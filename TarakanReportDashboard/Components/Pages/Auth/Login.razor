@page "/auth/login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using RestSharp
@inject NavigationManager NavigationManager
@inject IDbContextFactory<Models.TarakanContext> DbFactory
@inject IConfiguration Configuration

<div class="row">
    <div class="col-sm-5 mx-auto">
        <EditForm Model="Model" method="Post" OnValidSubmit="LoginUserAsync" FormName="@LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.UserID" class="form-control" />
                <ValidationMessage For="()=> Model.UserID" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText type="password" @bind-Value="Model.Password" class="form-control" />
                <ValidationMessage For="()=> Model.Password" />
            </div>
            <div class="mb-3">
                <InputCheckbox @bind-Value="Model.RememberMe" class="form-check-input" />
                Remember me
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary btn-sm">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private const string LoginForm = "login-form";

    [SupplyParameterFromForm(FormName = LoginForm)]
    private LoginModel Model { get; set; } = new();

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/";

    private async Task LoginUserAsync()
    {        
        // Validate Model.Email and Model.Pssword against your database
        //await Task.Delay(2000);

        using var context = DbFactory.CreateDbContext(); 

        if (context is not null)
        {
            var appUser = await context.AppUsers.SingleAsync(x => x.UserId == Model.UserID);

            if (appUser is not null)
            {
                var client = new RestClient(Configuration.GetSection("Parameters").GetSection("urlTarakanRest").Value + "Login/Validate");
                var request = new RestRequest();
                request.Method = Method.Post;
                request.AddParameter("Content-Type", "Application/x-www-form-urlencoded", ParameterType.HttpHeader);
                request.AddParameter("userid", Model.UserID);
                request.AddParameter("password", Model.Password);
                var response = await client.ExecuteAsync(request);
                if (response != null && response.Content != null)
                {
                    var _appUser = System.Text.Json.JsonSerializer.Deserialize<JsonModels.LoginResponse.Root>(response.Content);
                    if (_appUser != null && _appUser.metadata.code == 200)
                    {
                        LoggedInUserModel user = new LoggedInUserModel(1, _appUser.response.userName, Model.Password);
                        var claims = user.ToClaims();
                        var identity = new ClaimsIdentity(claims, Constants.AuthScheme);
                        var principal = new ClaimsPrincipal(identity);
                        var authProperties = new AuthenticationProperties
                            {
                                IsPersistent = Model.RememberMe
                            };
                        await HttpContext.SignInAsync(Constants.AuthScheme, principal, authProperties);
                        NavigationManager.NavigateTo(ReturnUrl);
                    }
                }else
                {
                    @if (Env.IsDevelopment())
                    {
                        NavigationManager.NavigateTo("/", replace: true);
                    }
                    else
                    {
                        NavigationManager.NavigateTo("dashboardreport/", replace: true);
                    }
                }
            }
        }



        // LoggedInUserModel user = new LoggedInUserModel(1, Model.UserID, Model.Password);

        // var claims = user.ToClaims();
        // var identity = new ClaimsIdentity(claims, Constants.AuthScheme);
        // var principal = new ClaimsPrincipal(identity);

        // var authProperties = new AuthenticationProperties
        //     {
        //         IsPersistent = Model.RememberMe
        //     };

        // await HttpContext.SignInAsync(Constants.AuthScheme, principal, authProperties);
        // NavigationManager.NavigateTo(ReturnUrl);
    }

    class LoginModel
    {
        [Required]    
        public string UserID { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
