@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@* @inject IHttpContextAccessor ctxAccessor *@
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedSessionStorage ProtectedSessionStore
@implements IDisposable

<div class="bb-page">

    <Sidebar2 Href="/"
    IconName="IconName.Hospital"
    Title="Report Dashboard"
    BadgeText="Tarakan"
    DataProvider="Sidebar2DataProvider" />

    <main>        
        <div class="bb-top-row px-4 d-flex justify-content-end">
            <ThemeSwitcher Position="DropdownMenuPosition.End"/>
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="page">
            <div class="content px-4">
                @Body
            </div>
        </div>
        @* <article class="content px-4">
            <div class="py-2">Page content goes here</div>
            @Body
        </article> *@
    </main>

</div>

@code {
    IEnumerable<NavItem>? navItems;
    [Inject] BitzArt.Blazor.Auth.IUserService<Services.SignInPayload>? UserService { get; set; }
    AuthenticationState? authenticationState;
    bool isAuthenticated;

    //Timer Related
    private int currentCount = 0;
    private TimeSpan elapsedTime = TimeSpan.Zero;
    private bool isRunning = false;
    private System.Timers.Timer? timer;
    private DateTime startTime;

    private void StartTimer()
    {
        if (!isRunning)
        {
            isRunning = true;
            startTime = DateTime.Now - elapsedTime;

            timer = new System.Timers.Timer(60000);
            timer.Elapsed += OnTimerElapsed;
            timer.Start();
        }
    }

    private void StopTimer()
    {
        isRunning = false;
        timer?.Stop();
    }

    private void ResetTimer()
    {
        StopTimer();
        currentCount = 0;
        elapsedTime = TimeSpan.Zero;
    }

    private async void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        currentCount++;

        elapsedTime = DateTime.Now - startTime;

        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticationState != null && authenticationState.User != null && authenticationState.User.Identity != null)
        {
            var claims = authenticationState.User.Claims;
            foreach (var claim in claims)
            {
                if (claim.Type == "exp")
                {
                    var expDate = claim.Value;
                    var expiredDateOffset = DateTimeOffset.FromUnixTimeSeconds(long.Parse(expDate));
                    var expiredDate = expiredDateOffset.LocalDateTime;
                    if (expiredDate < DateTime.Now)
                    {
                        StopTimer();
                        await ProtectedSessionStore.SetAsync("IsAuthenticated", false);
                        await UserService.SignOutAsync();
                        NavigationManager.NavigateTo("/auth/login", true);
                        await InvokeAsync(StateHasChanged);
                        break;
                    }
                    else
                    {
                        isAuthenticated = authenticationState.User.Identity.IsAuthenticated;
                        await ProtectedSessionStore.SetAsync("IsAuthenticated", isAuthenticated);
                    }
                }
            }
        }
        else
        {
            StopTimer();
            await ProtectedSessionStore.SetAsync("IsAuthenticated", false);
            await UserService.SignOutAsync();
            NavigationManager.NavigateTo("/auth/login", true);
        }
        if (currentCount >= 30)
        {
            StopTimer();
        }

        // Use SynchronizationContext to marshal back to the UI thread
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
    //End Timer Related

    private async Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        //var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (navItems is null)
            navItems = await GetNavItems();

        await Task.Delay(2000);

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private async Task<IEnumerable<NavItem>> GetNavItems()
    {
        var isAuth = await ProtectedSessionStore.GetAsync<bool>("IsAuthenticated");        
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "/getting-started", IconName = IconName.HouseDoorFill, Text = "Dashboard Management"},

            new NavItem { Id = "2", IconName = IconName.LayoutSidebarInset, Text = "Dashboard Report", IconColor = IconColor.Primary },
            new NavItem { Id = "2.1", Href = "/icons", IconName = IconName.PersonSquare, Text = "Nurses", ParentId="2"},
            new NavItem { Id = "2.2", Href = "/icons", IconName = IconName.PersonSquare, Text = "Doctors", ParentId="2"},
            new NavItem { Id = "2.3", Href = "/icons", IconName = IconName.PersonSquare, Text = "Finances", ParentId="2"},
            new NavItem { Id = "2.4", Href = "/icons", IconName = IconName.PersonSquare, Text = "Administrations", ParentId="2"},

            new NavItem { Id = "3", IconName = IconName.Gear, Text = "Setting", IconColor = IconColor.Success },
            new NavItem { Id = "3.1", Href = "/alerts", IconName = IconName.CheckCircleFill, Text = "Account", ParentId="3"},
            new NavItem { Id = "3.2", Href = "/breadcrumb", IconName = IconName.SegmentedNav, Text = "Breadcrumb", ParentId="3"},

            new NavItem { Id = "7", IconName = IconName.ListNested, Text = "Sidebar 2", ParentId="4"},
            new NavItem { Id = "701", Href = "/sidebar2/how-to-use", IconName = IconName.Dash, Text = "How to use", ParentId="7"},

            new NavItem { Id = "702", IconName = IconName.Dash, Text = "Examples", ParentId="7"},
            new NavItem { Id = "70201", Href = "/sidebar2", IconName = IconName.Dash, Text = "Nested levels", ParentId="702"},

            new NavItem { Id = "8", IconName = IconName.Grid, Text = "Grid", ParentId="4", IconColor = IconColor.Danger },
            new NavItem { Id = "801", Href = "/grid/#", IconName = IconName.Dash, Text = "How to use", ParentId="8"},
            new NavItem { Id = "802", IconName = IconName.Dash, Text = "Examples", ParentId="8"},
            new NavItem { Id = "80201", Href = "/grid/#", IconName = IconName.Dash, Text = "Filters", ParentId="802"},
            isAuth.Value ? new NavItem { Id = "9", Href = "/auth/logout", IconName = IconName.Lock, Text = "Logout"} : new NavItem { Id = "9", Href = "/auth/login", IconName = IconName.Lock, Text = "Login"},

            // new NavItem { Id = "9", IconName = IconName.WindowPlus, Text = "Forms", IconColor = IconColor.Warning },
            // new NavItem { Id = "10", Href = "/autocomplete", IconName = IconName.InputCursorText, Text = "Auto Complete", ParentId="9"},
            // new NavItem { Id = "11", Href = "/currency-input", IconName = IconName.CurrencyDollar, Text = "Currency Input", ParentId="9"},
            // new NavItem { Id = "12", Href = "/number-input", IconName = IconName.InputCursor, Text = "Number Input", ParentId="9"},
            // new NavItem { Id = "13", Href = "/switch", IconName = IconName.ToggleOn, Text = "Switch", ParentId="9"},
        };

        return navItems;
    }

    protected override async Task OnInitializedAsync()
    {
        // authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // if (authenticationState != null && authenticationState.User != null && authenticationState.User.Identity != null)
        // {
        //     isAuthenticated = authenticationState.User.Identity.IsAuthenticated;
        //     await ProtectedSessionStore.SetAsync("IsAuthenticated", isAuthenticated);
        // }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authenticationState != null && authenticationState.User != null && authenticationState.User.Identity != null)
            {
                isAuthenticated = authenticationState.User.Identity.IsAuthenticated;
                await ProtectedSessionStore.SetAsync("IsAuthenticated", isAuthenticated);
            }
        }
        StartTimer();
    }

}

       