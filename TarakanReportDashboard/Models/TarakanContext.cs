using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TarakanReportDashboard.Models;

public partial class TarakanContext : DbContext
{
    public TarakanContext()
    {
    }

    public TarakanContext(DbContextOptions<TarakanContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AbRestriction> AbRestrictions { get; set; }

    public virtual DbSet<AbRestrictionItem> AbRestrictionItems { get; set; }

    public virtual DbSet<AbRestrictionSuggestion> AbRestrictionSuggestions { get; set; }

    public virtual DbSet<AbsentCode> AbsentCodes { get; set; }

    public virtual DbSet<ActiveWaitStatistic> ActiveWaitStatistics { get; set; }

    public virtual DbSet<AddMealOrder> AddMealOrders { get; set; }

    public virtual DbSet<AddMealOrderItem> AddMealOrderItems { get; set; }

    public virtual DbSet<AddMealOrderItemDetail> AddMealOrderItemDetails { get; set; }

    public virtual DbSet<AdmDischargemon> AdmDischargemons { get; set; }

    public virtual DbSet<AdmKendalabayar> AdmKendalabayars { get; set; }

    public virtual DbSet<AdvanceFilteringAlert> AdvanceFilteringAlerts { get; set; }

    public virtual DbSet<AdvertisedPersonnelRequisition> AdvertisedPersonnelRequisitions { get; set; }

    public virtual DbSet<Alert> Alerts { get; set; }

    public virtual DbSet<AlertInstanceTemplate> AlertInstanceTemplates { get; set; }

    public virtual DbSet<AlertTemplateLookup> AlertTemplateLookups { get; set; }

    public virtual DbSet<AlertsAdvanceFilter> AlertsAdvanceFilters { get; set; }

    public virtual DbSet<AllSqlsignature> AllSqlsignatures { get; set; }

    public virtual DbSet<AllSqlstatement> AllSqlstatements { get; set; }

    public virtual DbSet<AlwaysOnAvailabilityGroup> AlwaysOnAvailabilityGroups { get; set; }

    public virtual DbSet<AlwaysOnDatabase> AlwaysOnDatabases { get; set; }

    public virtual DbSet<AlwaysOnReplica> AlwaysOnReplicas { get; set; }

    public virtual DbSet<AlwaysOnStatistic> AlwaysOnStatistics { get; set; }

    public virtual DbSet<AnalysisConfigBlockedDatabase> AnalysisConfigBlockedDatabases { get; set; }

    public virtual DbSet<AnalysisConfigBlockedRecommendation> AnalysisConfigBlockedRecommendations { get; set; }

    public virtual DbSet<AnalysisConfigCategory> AnalysisConfigCategories { get; set; }

    public virtual DbSet<AnalysisConfiguration> AnalysisConfigurations { get; set; }

    public virtual DbSet<AnalysisDocument> AnalysisDocuments { get; set; }

    public virtual DbSet<AnalysisDocumentItem> AnalysisDocumentItems { get; set; }

    public virtual DbSet<AntrianOnlineBpj> AntrianOnlineBpjs { get; set; }

    public virtual DbSet<ApdSurvey> ApdSurveys { get; set; }

    public virtual DbSet<ApdSurveyItem> ApdSurveyItems { get; set; }

    public virtual DbSet<AppAutoNumber> AppAutoNumbers { get; set; }

    public virtual DbSet<AppAutoNumberLast> AppAutoNumberLasts { get; set; }

    public virtual DbSet<AppAutoNumberTransactionCode> AppAutoNumberTransactionCodes { get; set; }

    public virtual DbSet<AppControl> AppControls { get; set; }

    public virtual DbSet<AppControlEntryMatrix> AppControlEntryMatrices { get; set; }

    public virtual DbSet<AppMessage> AppMessages { get; set; }

    public virtual DbSet<AppParameter> AppParameters { get; set; }

    public virtual DbSet<AppProgram> AppPrograms { get; set; }

    public virtual DbSet<AppProgramEsign> AppProgramEsigns { get; set; }

    public virtual DbSet<AppProgramHealthcare> AppProgramHealthcares { get; set; }

    public virtual DbSet<AppProgramRelated> AppProgramRelateds { get; set; }

    public virtual DbSet<AppProgramSignature> AppProgramSignatures { get; set; }

    public virtual DbSet<AppReportParameter> AppReportParameters { get; set; }

    public virtual DbSet<AppReportParameterHealthcare> AppReportParameterHealthcares { get; set; }

    public virtual DbSet<AppReportPivot> AppReportPivots { get; set; }

    public virtual DbSet<AppSrassessmentType> AppSrassessmentTypes { get; set; }

    public virtual DbSet<AppStandardReference> AppStandardReferences { get; set; }

    public virtual DbSet<AppStandardReferenceItem> AppStandardReferenceItems { get; set; }

    public virtual DbSet<AppUser> AppUsers { get; set; }

    public virtual DbSet<AppUserCustomPivot> AppUserCustomPivots { get; set; }

    public virtual DbSet<AppUserGroup> AppUserGroups { get; set; }

    public virtual DbSet<AppUserGroupProgram> AppUserGroupPrograms { get; set; }

    public virtual DbSet<AppUserServiceUnit> AppUserServiceUnits { get; set; }

    public virtual DbSet<AppUserSetting> AppUserSettings { get; set; }

    public virtual DbSet<AppUserUserGroup> AppUserUserGroups { get; set; }

    public virtual DbSet<ApplicantAppliedPosition> ApplicantAppliedPositions { get; set; }

    public virtual DbSet<ApplicantContact> ApplicantContacts { get; set; }

    public virtual DbSet<ApplicantEducationHistory> ApplicantEducationHistories { get; set; }

    public virtual DbSet<ApplicantFamily> ApplicantFamilies { get; set; }

    public virtual DbSet<ApplicantInfo> ApplicantInfos { get; set; }

    public virtual DbSet<ApplicantLicence> ApplicantLicences { get; set; }

    public virtual DbSet<ApplicantPhysical> ApplicantPhysicals { get; set; }

    public virtual DbSet<ApplicantPsychological> ApplicantPsychologicals { get; set; }

    public virtual DbSet<ApplicantReference> ApplicantReferences { get; set; }

    public virtual DbSet<ApplicantWorkExperience> ApplicantWorkExperiences { get; set; }

    public virtual DbSet<ApplicationName> ApplicationNames { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<AppointmentLokadok> AppointmentLokadoks { get; set; }

    public virtual DbSet<AppointmentOnline> AppointmentOnlines { get; set; }

    public virtual DbSet<AppointmentOnlineTask> AppointmentOnlineTasks { get; set; }

    public virtual DbSet<AppointmentQueueing> AppointmentQueueings { get; set; }

    public virtual DbSet<AppointmentSlot> AppointmentSlots { get; set; }

    public virtual DbSet<Appprogbak> Appprogbaks { get; set; }

    public virtual DbSet<AppraisalConclusion> AppraisalConclusions { get; set; }

    public virtual DbSet<AppraisalParticipant> AppraisalParticipants { get; set; }

    public virtual DbSet<AppraisalParticipantEvaluator> AppraisalParticipantEvaluators { get; set; }

    public virtual DbSet<AppraisalParticipantItem> AppraisalParticipantItems { get; set; }

    public virtual DbSet<AppraisalParticipantQuestioner> AppraisalParticipantQuestioners { get; set; }

    public virtual DbSet<AppraisalQuestion> AppraisalQuestions { get; set; }

    public virtual DbSet<AppraisalQuestionItem> AppraisalQuestionItems { get; set; }

    public virtual DbSet<AppraisalQuestionRating> AppraisalQuestionRatings { get; set; }

    public virtual DbSet<AppraisalScoresheet> AppraisalScoresheets { get; set; }

    public virtual DbSet<AppraisalScoresheetItem> AppraisalScoresheetItems { get; set; }

    public virtual DbSet<AppraisalScoringAccumulation> AppraisalScoringAccumulations { get; set; }

    public virtual DbSet<AppraisalScoringRecapitulation> AppraisalScoringRecapitulations { get; set; }

    public virtual DbSet<ApprovalRange> ApprovalRanges { get; set; }

    public virtual DbSet<ApprovalRangeUser> ApprovalRangeUsers { get; set; }

    public virtual DbSet<ApprovalTransaction> ApprovalTransactions { get; set; }

    public virtual DbSet<AskesCovered> AskesCovereds { get; set; }

    public virtual DbSet<AskesCovered2> AskesCovered2s { get; set; }

    public virtual DbSet<AssessmentTypeBodyDiagram> AssessmentTypeBodyDiagrams { get; set; }

    public virtual DbSet<Asset> Assets { get; set; }

    public virtual DbSet<AssetBook> AssetBooks { get; set; }

    public virtual DbSet<AssetDepreciationMethod> AssetDepreciationMethods { get; set; }

    public virtual DbSet<AssetDepreciationPost> AssetDepreciationPosts { get; set; }

    public virtual DbSet<AssetDepreciationPostView> AssetDepreciationPostViews { get; set; }

    public virtual DbSet<AssetGroup> AssetGroups { get; set; }

    public virtual DbSet<AssetInventoriedHistory> AssetInventoriedHistories { get; set; }

    public virtual DbSet<AssetItemService> AssetItemServices { get; set; }

    public virtual DbSet<AssetLocation> AssetLocations { get; set; }

    public virtual DbSet<AssetMaintenanceDt> AssetMaintenanceDts { get; set; }

    public virtual DbSet<AssetMaintenanceHd> AssetMaintenanceHds { get; set; }

    public virtual DbSet<AssetMaintenanceOrder> AssetMaintenanceOrders { get; set; }

    public virtual DbSet<AssetMovement> AssetMovements { get; set; }

    public virtual DbSet<AssetPostingStatus> AssetPostingStatuses { get; set; }

    public virtual DbSet<AssetPreventiveMaintenance> AssetPreventiveMaintenances { get; set; }

    public virtual DbSet<AssetPreventiveMaintenanceSchedule> AssetPreventiveMaintenanceSchedules { get; set; }

    public virtual DbSet<AssetPreventiveMaintenanceSchedulePeriod> AssetPreventiveMaintenanceSchedulePeriods { get; set; }

    public virtual DbSet<AssetPreventiveMaintenanceSchedulePeriodDate> AssetPreventiveMaintenanceSchedulePeriodDates { get; set; }

    public virtual DbSet<AssetStatusHistory> AssetStatusHistories { get; set; }

    public virtual DbSet<AssetSubGroup> AssetSubGroups { get; set; }

    public virtual DbSet<AssetUtilization> AssetUtilizations { get; set; }

    public virtual DbSet<AssetWorkOrder> AssetWorkOrders { get; set; }

    public virtual DbSet<AssetWorkOrderImplementer> AssetWorkOrderImplementers { get; set; }

    public virtual DbSet<AssetWorkOrderItem> AssetWorkOrderItems { get; set; }

    public virtual DbSet<AtePatientsControl> AtePatientsControls { get; set; }

    public virtual DbSet<AttedanceMatrix> AttedanceMatrices { get; set; }

    public virtual DbSet<AuditLog> AuditLogs { get; set; }

    public virtual DbSet<AuditLogDatum> AuditLogData { get; set; }

    public virtual DbSet<AuditLogSetting> AuditLogSettings { get; set; }

    public virtual DbSet<AuditableAction> AuditableActions { get; set; }

    public virtual DbSet<AuditableEvent> AuditableEvents { get; set; }

    public virtual DbSet<AveragePriceHistory> AveragePriceHistories { get; set; }

    public virtual DbSet<Award> Awards { get; set; }

    public virtual DbSet<AzureApplication> AzureApplications { get; set; }

    public virtual DbSet<AzureApplicationProfile> AzureApplicationProfiles { get; set; }

    public virtual DbSet<AzureProfile> AzureProfiles { get; set; }

    public virtual DbSet<AzureResource> AzureResources { get; set; }

    public virtual DbSet<AzureSubscription> AzureSubscriptions { get; set; }

    public virtual DbSet<BakTr112final> BakTr112finals { get; set; }

    public virtual DbSet<BakTr112sheet2> BakTr112sheet2s { get; set; }

    public virtual DbSet<BakTr113sheet1> BakTr113sheet1s { get; set; }

    public virtual DbSet<BakTr114sheet1> BakTr114sheet1s { get; set; }

    public virtual DbSet<BakTr115sheet1> BakTr115sheet1s { get; set; }

    public virtual DbSet<BakUddItem> BakUddItems { get; set; }

    public virtual DbSet<BakUserLogGriskaliaT> BakUserLogGriskaliaTs { get; set; }

    public virtual DbSet<Bank> Banks { get; set; }

    public virtual DbSet<BankAccount> BankAccounts { get; set; }

    public virtual DbSet<BankAccountBalance> BankAccountBalances { get; set; }

    public virtual DbSet<BankInquiry> BankInquiries { get; set; }

    public virtual DbSet<BankInquiryDetail> BankInquiryDetails { get; set; }

    public virtual DbSet<BankReconcile> BankReconciles { get; set; }

    public virtual DbSet<BaselineMetaDatum> BaselineMetaData { get; set; }

    public virtual DbSet<BaselineStatistic> BaselineStatistics { get; set; }

    public virtual DbSet<BaselineTemplate> BaselineTemplates { get; set; }

    public virtual DbSet<Bed> Beds { get; set; }

    public virtual DbSet<Bed1> Beds1 { get; set; }

    public virtual DbSet<BedBpj> BedBpjs { get; set; }

    public virtual DbSet<BedInformationDisplay> BedInformationDisplays { get; set; }

    public virtual DbSet<BedManagement> BedManagements { get; set; }

    public virtual DbSet<BedRoomIn> BedRoomIns { get; set; }

    public virtual DbSet<BedStatusHistory> BedStatusHistories { get; set; }

    public virtual DbSet<BiayaJabatan> BiayaJabatans { get; set; }

    public virtual DbSet<BillTransferHistory> BillTransferHistories { get; set; }

    public virtual DbSet<BillingAdjustItemGroupSetting> BillingAdjustItemGroupSettings { get; set; }

    public virtual DbSet<BillingAdjustItemSetting> BillingAdjustItemSettings { get; set; }

    public virtual DbSet<BillingToPatient> BillingToPatients { get; set; }

    public virtual DbSet<BirthAttendantsRecord> BirthAttendantsRecords { get; set; }

    public virtual DbSet<BirthRecord> BirthRecords { get; set; }

    public virtual DbSet<BkuJournalMessage> BkuJournalMessages { get; set; }

    public virtual DbSet<BkuJournalTransaction> BkuJournalTransactions { get; set; }

    public virtual DbSet<BkuJournalTransactionDetail> BkuJournalTransactionDetails { get; set; }

    public virtual DbSet<BkuTransaction> BkuTransactions { get; set; }

    public virtual DbSet<BkuTransactionBalance> BkuTransactionBalances { get; set; }

    public virtual DbSet<Block> Blocks { get; set; }

    public virtual DbSet<BlockingSessionStatistic> BlockingSessionStatistics { get; set; }

    public virtual DbSet<BloodBagNo> BloodBagNos { get; set; }

    public virtual DbSet<BloodBalance> BloodBalances { get; set; }

    public virtual DbSet<BloodBankTransaction> BloodBankTransactions { get; set; }

    public virtual DbSet<BloodBankTransactionItem> BloodBankTransactionItems { get; set; }

    public virtual DbSet<BloodExtermination> BloodExterminations { get; set; }

    public virtual DbSet<BloodExterminationItem> BloodExterminationItems { get; set; }

    public virtual DbSet<BloodReceived> BloodReceiveds { get; set; }

    public virtual DbSet<BloodReceivedItem> BloodReceivedItems { get; set; }

    public virtual DbSet<BloodTransformation> BloodTransformations { get; set; }

    public virtual DbSet<BloodTransformationItem> BloodTransformationItems { get; set; }

    public virtual DbSet<BodyDiagram> BodyDiagrams { get; set; }

    public virtual DbSet<BodyDiagramServiceUnit> BodyDiagramServiceUnits { get; set; }

    public virtual DbSet<BornCertification> BornCertifications { get; set; }

    public virtual DbSet<BpjsApproval> BpjsApprovals { get; set; }

    public virtual DbSet<BpjsCmg> BpjsCmgs { get; set; }

    public virtual DbSet<BpjsPackage> BpjsPackages { get; set; }

    public virtual DbSet<BpjsPackageTariff> BpjsPackageTariffs { get; set; }

    public virtual DbSet<BpjsPesertum> BpjsPeserta { get; set; }

    public virtual DbSet<BpjsRujukan> BpjsRujukans { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlue> BpjsRujukanCodeBlues { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueRole> BpjsRujukanCodeBlueRoles { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueRoleClaim> BpjsRujukanCodeBlueRoleClaims { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueUser> BpjsRujukanCodeBlueUsers { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueUser1> BpjsRujukanCodeBlueUsers1 { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueUserClaim> BpjsRujukanCodeBlueUserClaims { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueUserLogin> BpjsRujukanCodeBlueUserLogins { get; set; }

    public virtual DbSet<BpjsRujukanCodeBlueUserToken> BpjsRujukanCodeBlueUserTokens { get; set; }

    public virtual DbSet<BpjsSep> BpjsSeps { get; set; }

    public virtual DbSet<BpjsSuratKontrol> BpjsSuratKontrols { get; set; }

    public virtual DbSet<Bpjshfisparamedicschedule> Bpjshfisparamedicschedules { get; set; }

    public virtual DbSet<Budgeting> Budgetings { get; set; }

    public virtual DbSet<BudgetingDetail> BudgetingDetails { get; set; }

    public virtual DbSet<BudgetingDetailItem> BudgetingDetailItems { get; set; }

    public virtual DbSet<BudgetingDetailItemGroup> BudgetingDetailItemGroups { get; set; }

    public virtual DbSet<BudgetingHistory> BudgetingHistories { get; set; }

    public virtual DbSet<CasemixCovered> CasemixCovereds { get; set; }

    public virtual DbSet<CasemixCoveredDetail> CasemixCoveredDetails { get; set; }

    public virtual DbSet<CasemixCoveredGuarantor> CasemixCoveredGuarantors { get; set; }

    public virtual DbSet<CasemixCoveredRegistrationRule> CasemixCoveredRegistrationRules { get; set; }

    public virtual DbSet<CashManagement> CashManagements { get; set; }

    public virtual DbSet<CashManagementCashier> CashManagementCashiers { get; set; }

    public virtual DbSet<CashMutation> CashMutations { get; set; }

    public virtual DbSet<CashTransaction> CashTransactions { get; set; }

    public virtual DbSet<CashTransactionBalance> CashTransactionBalances { get; set; }

    public virtual DbSet<CashTransactionDetail> CashTransactionDetails { get; set; }

    public virtual DbSet<CashTransactionList> CashTransactionLists { get; set; }

    public virtual DbSet<CashTransactionListItem> CashTransactionListItems { get; set; }

    public virtual DbSet<Cencu> Cencus { get; set; }

    public virtual DbSet<CensusBalance> CensusBalances { get; set; }

    public virtual DbSet<ChargeBedAutoBillMatrix> ChargeBedAutoBillMatrices { get; set; }

    public virtual DbSet<ChartOfAccount> ChartOfAccounts { get; set; }

    public virtual DbSet<ChartOfAccountBalance> ChartOfAccountBalances { get; set; }

    public virtual DbSet<CheckinConfirmHistory> CheckinConfirmHistories { get; set; }

    public virtual DbSet<ClaimInaCbg> ClaimInaCbgs { get; set; }

    public virtual DbSet<Class> Classes { get; set; }

    public virtual DbSet<ClassBridging> ClassBridgings { get; set; }

    public virtual DbSet<ClassMealSetMenuSetting> ClassMealSetMenuSettings { get; set; }

    public virtual DbSet<ClassMenuSetting> ClassMenuSettings { get; set; }

    public virtual DbSet<ClinicalExamResult> ClinicalExamResults { get; set; }

    public virtual DbSet<ClinicalPathway> ClinicalPathways { get; set; }

    public virtual DbSet<ClosingAccounting> ClosingAccountings { get; set; }

    public virtual DbSet<ClosingThrTransaction> ClosingThrTransactions { get; set; }

    public virtual DbSet<ClosingWageTransaction> ClosingWageTransactions { get; set; }

    public virtual DbSet<CloudProvider> CloudProviders { get; set; }

    public virtual DbSet<CollectionService> CollectionServices { get; set; }

    public virtual DbSet<CompanyEducationProfile> CompanyEducationProfiles { get; set; }

    public virtual DbSet<CompanyFieldOfWorkProfile> CompanyFieldOfWorkProfiles { get; set; }

    public virtual DbSet<CompanyLaborProfile> CompanyLaborProfiles { get; set; }

    public virtual DbSet<ComplaintResponseTime> ComplaintResponseTimes { get; set; }

    public virtual DbSet<ConditionIh> ConditionIhs { get; set; }

    public virtual DbSet<ConsolidationCommitLog> ConsolidationCommitLogs { get; set; }

    public virtual DbSet<ConsolidationLog> ConsolidationLogs { get; set; }

    public virtual DbSet<ConsolidationLogDatum> ConsolidationLogData { get; set; }

    public virtual DbSet<ConsolidationUpdateLog> ConsolidationUpdateLogs { get; set; }

    public virtual DbSet<ConsumeMethod> ConsumeMethods { get; set; }

    public virtual DbSet<ContributoryFactorsClassificationFramework> ContributoryFactorsClassificationFrameworks { get; set; }

    public virtual DbSet<ContributoryFactorsClassificationFrameworkItem> ContributoryFactorsClassificationFrameworkItems { get; set; }

    public virtual DbSet<ContributoryFactorsClassificationFrameworkItemComponent> ContributoryFactorsClassificationFrameworkItemComponents { get; set; }

    public virtual DbSet<CooGradeParamedic> CooGradeParamedics { get; set; }

    public virtual DbSet<CoorporateGrade> CoorporateGrades { get; set; }

    public virtual DbSet<CostCalculation> CostCalculations { get; set; }

    public virtual DbSet<CostCalculationBuffer> CostCalculationBuffers { get; set; }

    public virtual DbSet<CostCalculationHistory> CostCalculationHistories { get; set; }

    public virtual DbSet<CostCalculationIntermBillTemp> CostCalculationIntermBillTemps { get; set; }

    public virtual DbSet<CostCalculationTemp> CostCalculationTemps { get; set; }

    public virtual DbSet<CostcalculationProratum> CostcalculationProrata { get; set; }

    public virtual DbSet<CounterMasterList> CounterMasterLists { get; set; }

    public virtual DbSet<CredentialProcess> CredentialProcesses { get; set; }

    public virtual DbSet<CredentialProcessDocument> CredentialProcessDocuments { get; set; }

    public virtual DbSet<CredentialProcessDocumentUpload> CredentialProcessDocumentUploads { get; set; }

    public virtual DbSet<CredentialProcessLicense> CredentialProcessLicenses { get; set; }

    public virtual DbSet<CredentialProcessQuestion> CredentialProcessQuestions { get; set; }

    public virtual DbSet<CredentialProcessSheet> CredentialProcessSheets { get; set; }

    public virtual DbSet<CredentialProcessTeam> CredentialProcessTeams { get; set; }

    public virtual DbSet<CredentialQuestionnaire> CredentialQuestionnaires { get; set; }

    public virtual DbSet<CredentialQuestionnaireItem> CredentialQuestionnaireItems { get; set; }

    public virtual DbSet<CrmVoucher> CrmVouchers { get; set; }

    public virtual DbSet<CssdItemDetail> CssdItemDetails { get; set; }

    public virtual DbSet<CssdMachine> CssdMachines { get; set; }

    public virtual DbSet<CssdMachineItem> CssdMachineItems { get; set; }

    public virtual DbSet<CssdSterileItemsReceived> CssdSterileItemsReceiveds { get; set; }

    public virtual DbSet<CssdSterileItemsReceivedItem> CssdSterileItemsReceivedItems { get; set; }

    public virtual DbSet<CssdSterileItemsRequest> CssdSterileItemsRequests { get; set; }

    public virtual DbSet<CssdSterileItemsRequestItem> CssdSterileItemsRequestItems { get; set; }

    public virtual DbSet<CssdSterileItemsReturned> CssdSterileItemsReturneds { get; set; }

    public virtual DbSet<CssdSterileItemsReturnedItem> CssdSterileItemsReturnedItems { get; set; }

    public virtual DbSet<CssdSterileItemsUltrasound> CssdSterileItemsUltrasounds { get; set; }

    public virtual DbSet<CssdSterileItemsUltrasoundItem> CssdSterileItemsUltrasoundItems { get; set; }

    public virtual DbSet<CssdSterilizationProcess> CssdSterilizationProcesses { get; set; }

    public virtual DbSet<CssdSterilizationProcessItem> CssdSterilizationProcessItems { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }

    public virtual DbSet<CustomCounterDefinition> CustomCounterDefinitions { get; set; }

    public virtual DbSet<CustomCounterStatistic> CustomCounterStatistics { get; set; }

    public virtual DbSet<CustomDashboard> CustomDashboards { get; set; }

    public virtual DbSet<CustomDashboardMatchType> CustomDashboardMatchTypes { get; set; }

    public virtual DbSet<CustomDashboardWidget> CustomDashboardWidgets { get; set; }

    public virtual DbSet<CustomDashboardWidgetType> CustomDashboardWidgetTypes { get; set; }

    public virtual DbSet<CustomReport> CustomReports { get; set; }

    public virtual DbSet<CustomReportsCounter> CustomReportsCounters { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DashboardDefault> DashboardDefaults { get; set; }

    public virtual DbSet<DashboardLayout> DashboardLayouts { get; set; }

    public virtual DbSet<DataDtd> DataDtds { get; set; }

    public virtual DbSet<DataIcd> DataIcds { get; set; }

    public virtual DbSet<DataKaryawan> DataKaryawans { get; set; }

    public virtual DbSet<DataMatrikDtd> DataMatrikDtds { get; set; }

    public virtual DbSet<DataRptItem> DataRptItems { get; set; }

    public virtual DbSet<DataRptMaster> DataRptMasters { get; set; }

    public virtual DbSet<DatabaseFile> DatabaseFiles { get; set; }

    public virtual DbSet<DatabaseFileActivity> DatabaseFileActivities { get; set; }

    public virtual DbSet<DatabaseFileStatistic> DatabaseFileStatistics { get; set; }

    public virtual DbSet<DatabaseFileStatisticsAggregation> DatabaseFileStatisticsAggregations { get; set; }

    public virtual DbSet<DatabaseSize> DatabaseSizes { get; set; }

    public virtual DbSet<DatabaseSizeAggregation> DatabaseSizeAggregations { get; set; }

    public virtual DbSet<DatabaseSizeDateTime> DatabaseSizeDateTimes { get; set; }

    public virtual DbSet<DatabaseSizeDateTimeAggregation> DatabaseSizeDateTimeAggregations { get; set; }

    public virtual DbSet<DatabaseStatistic> DatabaseStatistics { get; set; }

    public virtual DbSet<DatabaseStatisticsAggregation> DatabaseStatisticsAggregations { get; set; }

    public virtual DbSet<Dbmetric> Dbmetrics { get; set; }

    public virtual DbSet<Deadlock> Deadlocks { get; set; }

    public virtual DbSet<DeadlockProcess> DeadlockProcesses { get; set; }

    public virtual DbSet<DefaultMetricThreshold> DefaultMetricThresholds { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<DhfPatientLaboratoryResult> DhfPatientLaboratoryResults { get; set; }

    public virtual DbSet<Diagnose> Diagnoses { get; set; }

    public virtual DbSet<DiagnoseInaGroupper> DiagnoseInaGrouppers { get; set; }

    public virtual DbSet<Diet> Diets { get; set; }

    public virtual DbSet<DietComplication> DietComplications { get; set; }

    public virtual DbSet<DietComplicationPatient> DietComplicationPatients { get; set; }

    public virtual DbSet<DietLiquidPatient> DietLiquidPatients { get; set; }

    public virtual DbSet<DietLiquidPatientItem> DietLiquidPatientItems { get; set; }

    public virtual DbSet<DietLiquidPatientTime> DietLiquidPatientTimes { get; set; }

    public virtual DbSet<DietMenu> DietMenus { get; set; }

    public virtual DbSet<DietPatient> DietPatients { get; set; }

    public virtual DbSet<DietPatientItem> DietPatientItems { get; set; }

    public virtual DbSet<DisciplinarySanction> DisciplinarySanctions { get; set; }

    public virtual DbSet<DiskDrife> DiskDrives { get; set; }

    public virtual DbSet<DiskDriveStatistic> DiskDriveStatistics { get; set; }

    public virtual DbSet<DiskDriveStatisticsAggregation> DiskDriveStatisticsAggregations { get; set; }

    public virtual DbSet<DistributionPortion> DistributionPortions { get; set; }

    public virtual DbSet<DocumentChecklistDefinition> DocumentChecklistDefinitions { get; set; }

    public virtual DbSet<DocumentDefinition> DocumentDefinitions { get; set; }

    public virtual DbSet<DocumentDefinitionItem> DocumentDefinitionItems { get; set; }

    public virtual DbSet<DocumentFile> DocumentFiles { get; set; }

    public virtual DbSet<DocumentSignature> DocumentSignatures { get; set; }

    public virtual DbSet<DocumentSignatureItem> DocumentSignatureItems { get; set; }

    public virtual DbSet<Donator> Donators { get; set; }

    public virtual DbSet<Dtd> Dtds { get; set; }

    public virtual DbSet<Edcmachine> Edcmachines { get; set; }

    public virtual DbSet<EdcmachineTariff> EdcmachineTariffs { get; set; }

    public virtual DbSet<Embalace> Embalaces { get; set; }

    public virtual DbSet<EmergencyContact> EmergencyContacts { get; set; }

    public virtual DbSet<EmergencyDiagnose> EmergencyDiagnoses { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeAccidentReport> EmployeeAccidentReports { get; set; }

    public virtual DbSet<EmployeeAchievement> EmployeeAchievements { get; set; }

    public virtual DbSet<EmployeeAppraisalQuestion> EmployeeAppraisalQuestions { get; set; }

    public virtual DbSet<EmployeeClinicalPrivilege> EmployeeClinicalPrivileges { get; set; }

    public virtual DbSet<EmployeeDisciplinary> EmployeeDisciplinaries { get; set; }

    public virtual DbSet<EmployeeEducation> EmployeeEducations { get; set; }

    public virtual DbSet<EmployeeEducationLevel> EmployeeEducationLevels { get; set; }

    public virtual DbSet<EmployeeEmploymentPeriod> EmployeeEmploymentPeriods { get; set; }

    public virtual DbSet<EmployeeForm> EmployeeForms { get; set; }

    public virtual DbSet<EmployeeFormTemplate> EmployeeFormTemplates { get; set; }

    public virtual DbSet<EmployeeGrade> EmployeeGrades { get; set; }

    public virtual DbSet<EmployeeGradeMaster> EmployeeGradeMasters { get; set; }

    public virtual DbSet<EmployeeHealthAndSafety> EmployeeHealthAndSafeties { get; set; }

    public virtual DbSet<EmployeeHealthTestResult> EmployeeHealthTestResults { get; set; }

    public virtual DbSet<EmployeeIncentivePosition> EmployeeIncentivePositions { get; set; }

    public virtual DbSet<EmployeeIncentiveProcess> EmployeeIncentiveProcesses { get; set; }

    public virtual DbSet<EmployeeIncentiveProcessItem> EmployeeIncentiveProcessItems { get; set; }

    public virtual DbSet<EmployeeIncentiveProcessItemDetail> EmployeeIncentiveProcessItemDetails { get; set; }

    public virtual DbSet<EmployeeLanguageProficiency> EmployeeLanguageProficiencies { get; set; }

    public virtual DbSet<EmployeeLeave> EmployeeLeaves { get; set; }

    public virtual DbSet<EmployeeLeaveCashable> EmployeeLeaveCashables { get; set; }

    public virtual DbSet<EmployeeLeaveRequest> EmployeeLeaveRequests { get; set; }

    public virtual DbSet<EmployeeLoan> EmployeeLoans { get; set; }

    public virtual DbSet<EmployeeLoanDetail> EmployeeLoanDetails { get; set; }

    public virtual DbSet<EmployeeLoanItem> EmployeeLoanItems { get; set; }

    public virtual DbSet<EmployeeMedicalAdjustment> EmployeeMedicalAdjustments { get; set; }

    public virtual DbSet<EmployeeMedicalBenefit> EmployeeMedicalBenefits { get; set; }

    public virtual DbSet<EmployeeMedicalInsurance> EmployeeMedicalInsurances { get; set; }

    public virtual DbSet<EmployeeMiscellaneousBenefit> EmployeeMiscellaneousBenefits { get; set; }

    public virtual DbSet<EmployeeNeedleStickInjury> EmployeeNeedleStickInjuries { get; set; }

    public virtual DbSet<EmployeeOrganization> EmployeeOrganizations { get; set; }

    public virtual DbSet<EmployeeOrientation> EmployeeOrientations { get; set; }

    public virtual DbSet<EmployeeOvertime> EmployeeOvertimes { get; set; }

    public virtual DbSet<EmployeeOvertimeItem> EmployeeOvertimeItems { get; set; }

    public virtual DbSet<EmployeePerformanceAppraisal> EmployeePerformanceAppraisals { get; set; }

    public virtual DbSet<EmployeePeriodicSalary> EmployeePeriodicSalaries { get; set; }

    public virtual DbSet<EmployeePeriodicStructuralBenefit> EmployeePeriodicStructuralBenefits { get; set; }

    public virtual DbSet<EmployeePermission> EmployeePermissions { get; set; }

    public virtual DbSet<EmployeePosition> EmployeePositions { get; set; }

    public virtual DbSet<EmployeePositionGrade> EmployeePositionGrades { get; set; }

    public virtual DbSet<EmployeeRemun> EmployeeRemuns { get; set; }

    public virtual DbSet<EmployeeRemunDetail> EmployeeRemunDetails { get; set; }

    public virtual DbSet<EmployeeRl4> EmployeeRl4s { get; set; }

    public virtual DbSet<EmployeeSalaryInfo> EmployeeSalaryInfos { get; set; }

    public virtual DbSet<EmployeeSalaryMatrix> EmployeeSalaryMatrices { get; set; }

    public virtual DbSet<EmployeeTaxStatus> EmployeeTaxStatuses { get; set; }

    public virtual DbSet<EmployeeThrMatrix> EmployeeThrMatrices { get; set; }

    public virtual DbSet<EmployeeTraining> EmployeeTrainings { get; set; }

    public virtual DbSet<EmployeeTrainingAssessmentAspect> EmployeeTrainingAssessmentAspects { get; set; }

    public virtual DbSet<EmployeeTrainingAssessmentCriterion> EmployeeTrainingAssessmentCriteria { get; set; }

    public virtual DbSet<EmployeeTrainingEvaluation> EmployeeTrainingEvaluations { get; set; }

    public virtual DbSet<EmployeeTrainingExternalTrainer> EmployeeTrainingExternalTrainers { get; set; }

    public virtual DbSet<EmployeeTrainingHistory> EmployeeTrainingHistories { get; set; }

    public virtual DbSet<EmployeeWageStructureAndScale> EmployeeWageStructureAndScales { get; set; }

    public virtual DbSet<EmployeeWageStructureAndScalePosition> EmployeeWageStructureAndScalePositions { get; set; }

    public virtual DbSet<EmployeeWageStructureAndScalePositionItem> EmployeeWageStructureAndScalePositionItems { get; set; }

    public virtual DbSet<EmployeeWorkingInfo> EmployeeWorkingInfos { get; set; }

    public virtual DbSet<EncounterIh> EncounterIhs { get; set; }

    public virtual DbSet<EpisodeBodyDiagram> EpisodeBodyDiagrams { get; set; }

    public virtual DbSet<EpisodeDiagnose> EpisodeDiagnoses { get; set; }

    public virtual DbSet<EpisodeDiagnoseInaGroupper> EpisodeDiagnoseInaGrouppers { get; set; }

    public virtual DbSet<EpisodeProcedure> EpisodeProcedures { get; set; }

    public virtual DbSet<EpisodeProcedureInaGroupper> EpisodeProcedureInaGrouppers { get; set; }

    public virtual DbSet<EpisodeSoape> EpisodeSoapes { get; set; }

    public virtual DbSet<EsignLog> EsignLogs { get; set; }

    public virtual DbSet<EsignLogHist> EsignLogHists { get; set; }

    public virtual DbSet<EsxconfigDatum> EsxconfigData { get; set; }

    public virtual DbSet<Esxstatistic> Esxstatistics { get; set; }

    public virtual DbSet<EventMealOrder> EventMealOrders { get; set; }

    public virtual DbSet<EventMealOrderItem> EventMealOrderItems { get; set; }

    public virtual DbSet<ExamSummary> ExamSummaries { get; set; }

    public virtual DbSet<ExamSummaryResult> ExamSummaryResults { get; set; }

    public virtual DbSet<Fabric> Fabrics { get; set; }

    public virtual DbSet<FamilyMedicalHistory> FamilyMedicalHistories { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<FoodItem> FoodItems { get; set; }

    public virtual DbSet<FoodPackage> FoodPackages { get; set; }

    public virtual DbSet<GabunganUlang> GabunganUlangs { get; set; }

    public virtual DbSet<GroomingLog> GroomingLogs { get; set; }

    public virtual DbSet<Guarantor> Guarantors { get; set; }

    public virtual DbSet<GuarantorBridging> GuarantorBridgings { get; set; }

    public virtual DbSet<GuarantorDeposit> GuarantorDeposits { get; set; }

    public virtual DbSet<GuarantorDepositBalance> GuarantorDepositBalances { get; set; }

    public virtual DbSet<GuarantorDepositMovement> GuarantorDepositMovements { get; set; }

    public virtual DbSet<GuarantorDocumentChecklist> GuarantorDocumentChecklists { get; set; }

    public virtual DbSet<GuarantorInfo> GuarantorInfos { get; set; }

    public virtual DbSet<GuarantorInfoSummary> GuarantorInfoSummaries { get; set; }

    public virtual DbSet<GuarantorItemGroupProductMargin> GuarantorItemGroupProductMargins { get; set; }

    public virtual DbSet<GuarantorItemPrescriptionByTherapyRule> GuarantorItemPrescriptionByTherapyRules { get; set; }

    public virtual DbSet<GuarantorItemPrescriptionRule> GuarantorItemPrescriptionRules { get; set; }

    public virtual DbSet<GuarantorItemRestriction> GuarantorItemRestrictions { get; set; }

    public virtual DbSet<GuarantorItemRule> GuarantorItemRules { get; set; }

    public virtual DbSet<GuarantorItemRuleTariffComponent> GuarantorItemRuleTariffComponents { get; set; }

    public virtual DbSet<GuarantorItemTypeRule> GuarantorItemTypeRules { get; set; }

    public virtual DbSet<GuarantorServiceUnitRule> GuarantorServiceUnitRules { get; set; }

    public virtual DbSet<GuarantorSurgicalPackageCovered> GuarantorSurgicalPackageCovereds { get; set; }

    public virtual DbSet<GuarantorSurgicalPackageCoveredItem> GuarantorSurgicalPackageCoveredItems { get; set; }

    public virtual DbSet<HandHygiene> HandHygienes { get; set; }

    public virtual DbSet<HandHygieneItem> HandHygieneItems { get; set; }

    public virtual DbSet<HasilPasien> HasilPasiens { get; set; }

    public virtual DbSet<HealthIndexCofficient> HealthIndexCofficients { get; set; }

    public virtual DbSet<HealthRecord> HealthRecords { get; set; }

    public virtual DbSet<HealthRecordLine> HealthRecordLines { get; set; }

    public virtual DbSet<Healthcare> Healthcares { get; set; }

    public virtual DbSet<HisBedBridging> HisBedBridgings { get; set; }

    public virtual DbSet<Hl7message> Hl7messages { get; set; }

    public virtual DbSet<HolidaySchedule> HolidaySchedules { get; set; }

    public virtual DbSet<HomePrescription> HomePrescriptions { get; set; }

    public virtual DbSet<HospitalHoliday> HospitalHolidays { get; set; }

    public virtual DbSet<HospitalInfo> HospitalInfos { get; set; }

    public virtual DbSet<HostName> HostNames { get; set; }

    public virtual DbSet<HumanBasePeriod> HumanBasePeriods { get; set; }

    public virtual DbSet<IbNyeriFeb22> IbNyeriFeb22s { get; set; }

    public virtual DbSet<IhsMapping> IhsMappings { get; set; }

    public virtual DbSet<IhsParamedictemp> IhsParamedictemps { get; set; }

    public virtual DbSet<ImageTemplate> ImageTemplates { get; set; }

    public virtual DbSet<Immunization> Immunizations { get; set; }

    public virtual DbSet<ImmunizationItemProductMedic> ImmunizationItemProductMedics { get; set; }

    public virtual DbSet<ImplantInstallation> ImplantInstallations { get; set; }

    public virtual DbSet<Incentive> Incentives { get; set; }

    public virtual DbSet<IncentiveDetail> IncentiveDetails { get; set; }

    public virtual DbSet<IncidentType> IncidentTypes { get; set; }

    public virtual DbSet<IncidentTypeItem> IncidentTypeItems { get; set; }

    public virtual DbSet<IncomeJournalStatus> IncomeJournalStatuses { get; set; }

    public virtual DbSet<Indication> Indications { get; set; }

    public virtual DbSet<Infection> Infections { get; set; }

    public virtual DbSet<InfectionAntibiotic> InfectionAntibiotics { get; set; }

    public virtual DbSet<InhealthSjp> InhealthSjps { get; set; }

    public virtual DbSet<InitialGl> InitialGls { get; set; }

    public virtual DbSet<InitialGlitem> InitialGlitems { get; set; }

    public virtual DbSet<InitialLeaveType> InitialLeaveTypes { get; set; }

    public virtual DbSet<InosinfectionMonitoring> InosinfectionMonitorings { get; set; }

    public virtual DbSet<IntermBill> IntermBills { get; set; }

    public virtual DbSet<InvBa20220401> InvBa20220401s { get; set; }

    public virtual DbSet<InvBalDes22> InvBalDes22s { get; set; }

    public virtual DbSet<InvBalanceDes21> InvBalanceDes21s { get; set; }

    public virtual DbSet<InvBalanceJan22> InvBalanceJan22s { get; set; }

    public virtual DbSet<InventoryBalance> InventoryBalances { get; set; }

    public virtual DbSet<InventoryBalanceBak> InventoryBalanceBaks { get; set; }

    public virtual DbSet<InventoryBalanceBak20220401> InventoryBalanceBak20220401s { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<InvoiceAdjusment> InvoiceAdjusments { get; set; }

    public virtual DbSet<InvoiceSupplier> InvoiceSuppliers { get; set; }

    public virtual DbSet<InvoiceSupplierItem> InvoiceSupplierItems { get; set; }

    public virtual DbSet<InvoiceSupplierItemConsignment> InvoiceSupplierItemConsignments { get; set; }

    public virtual DbSet<InvoicesItem> InvoicesItems { get; set; }

    public virtual DbSet<InvoicesItemHistory> InvoicesItemHistories { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemBalance> ItemBalances { get; set; }

    public virtual DbSet<ItemBalanceByPeriod> ItemBalanceByPeriods { get; set; }

    public virtual DbSet<ItemBalanceByStockGroup> ItemBalanceByStockGroups { get; set; }

    public virtual DbSet<ItemBalanceDetail> ItemBalanceDetails { get; set; }

    public virtual DbSet<ItemBalanceEndOfTheMonth> ItemBalanceEndOfTheMonths { get; set; }

    public virtual DbSet<ItemBalanceExpire> ItemBalanceExpires { get; set; }

    public virtual DbSet<ItemBridging> ItemBridgings { get; set; }

    public virtual DbSet<ItemConditionRule> ItemConditionRules { get; set; }

    public virtual DbSet<ItemConditionRuleItem> ItemConditionRuleItems { get; set; }

    public virtual DbSet<ItemConditionRuleServiceUnit> ItemConditionRuleServiceUnits { get; set; }

    public virtual DbSet<ItemConsumption> ItemConsumptions { get; set; }

    public virtual DbSet<ItemDiagnostic> ItemDiagnostics { get; set; }

    public virtual DbSet<ItemGroup> ItemGroups { get; set; }

    public virtual DbSet<ItemGroupUserType> ItemGroupUserTypes { get; set; }

    public virtual DbSet<ItemIdi> ItemIdis { get; set; }

    public virtual DbSet<ItemIdiItemSmf> ItemIdiItemSmfs { get; set; }

    public virtual DbSet<ItemIdiProcedure> ItemIdiProcedures { get; set; }

    public virtual DbSet<ItemKitchen> ItemKitchens { get; set; }

    public virtual DbSet<ItemLabel> ItemLabels { get; set; }

    public virtual DbSet<ItemLaboratory> ItemLaboratories { get; set; }

    public virtual DbSet<ItemLaboratoryDetail> ItemLaboratoryDetails { get; set; }

    public virtual DbSet<ItemLaboratoryProfile> ItemLaboratoryProfiles { get; set; }

    public virtual DbSet<ItemLinen> ItemLinens { get; set; }

    public virtual DbSet<ItemLinenItem> ItemLinenItems { get; set; }

    public virtual DbSet<ItemMovement> ItemMovements { get; set; }

    public virtual DbSet<ItemMovementPerDate> ItemMovementPerDates { get; set; }

    public virtual DbSet<ItemOptic> ItemOptics { get; set; }

    public virtual DbSet<ItemPackage> ItemPackages { get; set; }

    public virtual DbSet<ItemPackageTariffComponent> ItemPackageTariffComponents { get; set; }

    public virtual DbSet<ItemProductConsumeUnitMatrix> ItemProductConsumeUnitMatrices { get; set; }

    public virtual DbSet<ItemProductDeductionDetail> ItemProductDeductionDetails { get; set; }

    public virtual DbSet<ItemProductDosageDetail> ItemProductDosageDetails { get; set; }

    public virtual DbSet<ItemProductLog> ItemProductLogs { get; set; }

    public virtual DbSet<ItemProductMargin> ItemProductMargins { get; set; }

    public virtual DbSet<ItemProductMarginClassValue> ItemProductMarginClassValues { get; set; }

    public virtual DbSet<ItemProductMarginValue> ItemProductMarginValues { get; set; }

    public virtual DbSet<ItemProductMedic> ItemProductMedics { get; set; }

    public virtual DbSet<ItemProductMedicIndication> ItemProductMedicIndications { get; set; }

    public virtual DbSet<ItemProductMedicLabel> ItemProductMedicLabels { get; set; }

    public virtual DbSet<ItemProductMedicMarginDetail> ItemProductMedicMarginDetails { get; set; }

    public virtual DbSet<ItemProductMedicZatActive> ItemProductMedicZatActives { get; set; }

    public virtual DbSet<ItemProductNonMedic> ItemProductNonMedics { get; set; }

    public virtual DbSet<ItemProductSalesDiscount> ItemProductSalesDiscounts { get; set; }

    public virtual DbSet<ItemRadiology> ItemRadiologies { get; set; }

    public virtual DbSet<ItemSalesPerDate> ItemSalesPerDates { get; set; }

    public virtual DbSet<ItemService> ItemServices { get; set; }

    public virtual DbSet<ItemServiceSubSpecialty> ItemServiceSubSpecialties { get; set; }

    public virtual DbSet<ItemStockOpnameApproval> ItemStockOpnameApprovals { get; set; }

    public virtual DbSet<ItemStockOpnamePrevBalance> ItemStockOpnamePrevBalances { get; set; }

    public virtual DbSet<ItemTariff> ItemTariffs { get; set; }

    public virtual DbSet<ItemTariffComponent> ItemTariffComponents { get; set; }

    public virtual DbSet<ItemTariffComponentUpdateHistory> ItemTariffComponentUpdateHistories { get; set; }

    public virtual DbSet<ItemTariffRequest> ItemTariffRequests { get; set; }

    public virtual DbSet<ItemTariffRequest2> ItemTariffRequest2s { get; set; }

    public virtual DbSet<ItemTariffRequest2Item> ItemTariffRequest2Items { get; set; }

    public virtual DbSet<ItemTariffRequest2ItemComp> ItemTariffRequest2ItemComps { get; set; }

    public virtual DbSet<ItemTariffRequestItem> ItemTariffRequestItems { get; set; }

    public virtual DbSet<ItemTariffRequestItemComp> ItemTariffRequestItemComps { get; set; }

    public virtual DbSet<ItemTariffRequestItemToImport> ItemTariffRequestItemToImports { get; set; }

    public virtual DbSet<ItemTariffRequestProcess> ItemTariffRequestProcesses { get; set; }

    public virtual DbSet<ItemTariffRequestProcessItemComp> ItemTariffRequestProcessItemComps { get; set; }

    public virtual DbSet<ItemTariffUpdateHistory> ItemTariffUpdateHistories { get; set; }

    public virtual DbSet<ItemTransaction> ItemTransactions { get; set; }

    public virtual DbSet<ItemTransactionInitialBalance> ItemTransactionInitialBalances { get; set; }

    public virtual DbSet<ItemTransactionItem> ItemTransactionItems { get; set; }

    public virtual DbSet<ItemTransactionItemBak> ItemTransactionItemBaks { get; set; }

    public virtual DbSet<ItemTransactionItemEd> ItemTransactionItemEds { get; set; }

    public virtual DbSet<ItemTransactionItemHistory> ItemTransactionItemHistories { get; set; }

    public virtual DbSet<Jamsostek> Jamsosteks { get; set; }

    public virtual DbSet<JobOpportunity> JobOpportunities { get; set; }

    public virtual DbSet<JournalCode> JournalCodes { get; set; }

    public virtual DbSet<JournalGroup> JournalGroups { get; set; }

    public virtual DbSet<JournalGroupDetail> JournalGroupDetails { get; set; }

    public virtual DbSet<JournalGroupUser> JournalGroupUsers { get; set; }

    public virtual DbSet<JournalMessage> JournalMessages { get; set; }

    public virtual DbSet<JournalTransaction> JournalTransactions { get; set; }

    public virtual DbSet<JournalTransactionDetail> JournalTransactionDetails { get; set; }

    public virtual DbSet<JsonBridgingValueTemp> JsonBridgingValueTemps { get; set; }

    public virtual DbSet<K3rsForm> K3rsForms { get; set; }

    public virtual DbSet<K3rsFormTemplate> K3rsFormTemplates { get; set; }

    public virtual DbSet<KTotalPayment> KTotalPayments { get; set; }

    public virtual DbSet<KTotalTagihan> KTotalTagihans { get; set; }

    public virtual DbSet<KemenkesSitb> KemenkesSitbs { get; set; }

    public virtual DbSet<KfaIh> KfaIhs { get; set; }

    public virtual DbSet<KiosKroom> KiosKrooms { get; set; }

    public virtual DbSet<KioskQueue> KioskQueues { get; set; }

    public virtual DbSet<KioskQueueCaller> KioskQueueCallers { get; set; }

    public virtual DbSet<Lab1> Lab1s { get; set; }

    public virtual DbSet<Labell> Labells { get; set; }

    public virtual DbSet<LatestGroomingStatus> LatestGroomingStatuses { get; set; }

    public virtual DbSet<LaunderedProcess> LaunderedProcesses { get; set; }

    public virtual DbSet<LaunderedProcessItem> LaunderedProcessItems { get; set; }

    public virtual DbSet<LaunderedProcessItemConsumption> LaunderedProcessItemConsumptions { get; set; }

    public virtual DbSet<LaunderedProcessItemInfectiou> LaunderedProcessItemInfectious { get; set; }

    public virtual DbSet<LaunderedProcessItemRewashing> LaunderedProcessItemRewashings { get; set; }

    public virtual DbSet<LaundryDistribution> LaundryDistributions { get; set; }

    public virtual DbSet<LaundryDistributionItem> LaundryDistributionItems { get; set; }

    public virtual DbSet<LaundryRecapitulationProcess> LaundryRecapitulationProcesses { get; set; }

    public virtual DbSet<LaundryRecapitulationProcessItem> LaundryRecapitulationProcessItems { get; set; }

    public virtual DbSet<LaundryReceived> LaundryReceiveds { get; set; }

    public virtual DbSet<LaundryReceivedItem> LaundryReceivedItems { get; set; }

    public virtual DbSet<LaundryReceivedItemInfectiou> LaundryReceivedItemInfectious { get; set; }

    public virtual DbSet<LaundryRepairingProcess> LaundryRepairingProcesses { get; set; }

    public virtual DbSet<LaundryRepairingProcessItem> LaundryRepairingProcessItems { get; set; }

    public virtual DbSet<LaundryReturned> LaundryReturneds { get; set; }

    public virtual DbSet<LaundryReturnedItem> LaundryReturnedItems { get; set; }

    public virtual DbSet<LaundrySortingProcess> LaundrySortingProcesses { get; set; }

    public virtual DbSet<LaundrySortingProcessItem> LaundrySortingProcessItems { get; set; }

    public virtual DbSet<LaundryWashingMachine> LaundryWashingMachines { get; set; }

    public virtual DbSet<LaundryWashingMachineProgram> LaundryWashingMachinePrograms { get; set; }

    public virtual DbSet<LaundryWashingProgramType> LaundryWashingProgramTypes { get; set; }

    public virtual DbSet<LaundryWashingProgramTypeItemConsumption> LaundryWashingProgramTypeItemConsumptions { get; set; }

    public virtual DbSet<LeaveRequest> LeaveRequests { get; set; }

    public virtual DbSet<LicenseKey> LicenseKeys { get; set; }

    public virtual DbSet<LiquidFoodDiet> LiquidFoodDiets { get; set; }

    public virtual DbSet<LiquidFoodDietTime> LiquidFoodDietTimes { get; set; }

    public virtual DbSet<LiquidFoodDietTimeGender> LiquidFoodDietTimeGenders { get; set; }

    public virtual DbSet<LiquidFoodTime> LiquidFoodTimes { get; set; }

    public virtual DbSet<LiquidFoodTimeGender> LiquidFoodTimeGenders { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LocationException> LocationExceptions { get; set; }

    public virtual DbSet<LocationExceptionDistributionConfirm> LocationExceptionDistributionConfirms { get; set; }

    public virtual DbSet<LocationIh> LocationIhs { get; set; }

    public virtual DbSet<LocationTemplate> LocationTemplates { get; set; }

    public virtual DbSet<LocationTemplateItem> LocationTemplateItems { get; set; }

    public virtual DbSet<LoginName> LoginNames { get; set; }

    public virtual DbSet<LoincAvilabIh> LoincAvilabIhs { get; set; }

    public virtual DbSet<LoincIh> LoincIhs { get; set; }

    public virtual DbSet<ManagementService> ManagementServices { get; set; }

    public virtual DbSet<MappingBpjsCendana> MappingBpjsCendanas { get; set; }

    public virtual DbSet<MappingKetersediaanBedDinke> MappingKetersediaanBedDinkes { get; set; }

    public virtual DbSet<MappingRanap> MappingRanaps { get; set; }

    public virtual DbSet<MappingRjBpj> MappingRjBpjs { get; set; }

    public virtual DbSet<MappingRjCendana> MappingRjCendanas { get; set; }

    public virtual DbSet<MasterMapping> MasterMappings { get; set; }

    public virtual DbSet<MealOrder> MealOrders { get; set; }

    public virtual DbSet<MealOrderDateInit> MealOrderDateInits { get; set; }

    public virtual DbSet<MealOrderItem> MealOrderItems { get; set; }

    public virtual DbSet<MealOrderItemLiquid> MealOrderItemLiquids { get; set; }

    public virtual DbSet<MealOrderItemPlan> MealOrderItemPlans { get; set; }

    public virtual DbSet<MealOrderItemSetting> MealOrderItemSettings { get; set; }

    public virtual DbSet<MealOrderNonPatient> MealOrderNonPatients { get; set; }

    public virtual DbSet<MealOrderNonPatientItem> MealOrderNonPatientItems { get; set; }

    public virtual DbSet<MedicalBenefitClaim> MedicalBenefitClaims { get; set; }

    public virtual DbSet<MedicalBenefitClaimItem> MedicalBenefitClaimItems { get; set; }

    public virtual DbSet<MedicalBenefitInfo> MedicalBenefitInfos { get; set; }

    public virtual DbSet<MedicalBenefitRuleDefinition> MedicalBenefitRuleDefinitions { get; set; }

    public virtual DbSet<MedicalDischargeSummary> MedicalDischargeSummaries { get; set; }

    public virtual DbSet<MedicalDischargeSummaryBak> MedicalDischargeSummaryBaks { get; set; }

    public virtual DbSet<MedicalDischargeSummaryBodyDiagram> MedicalDischargeSummaryBodyDiagrams { get; set; }

    public virtual DbSet<MedicalDischargeSummaryBodyDiagramBak> MedicalDischargeSummaryBodyDiagramBaks { get; set; }

    public virtual DbSet<MedicalDischargeSummaryByNurse> MedicalDischargeSummaryByNurses { get; set; }

    public virtual DbSet<MedicalDischargeSummaryDiagnose> MedicalDischargeSummaryDiagnoses { get; set; }

    public virtual DbSet<MedicalDischargeSummaryDiagnoseBak> MedicalDischargeSummaryDiagnoseBaks { get; set; }

    public virtual DbSet<MedicalDischargeSummaryPrescHomeBak> MedicalDischargeSummaryPrescHomeBaks { get; set; }

    public virtual DbSet<MedicalDischargeSummaryProcedure> MedicalDischargeSummaryProcedures { get; set; }

    public virtual DbSet<MedicalDischargeSummaryProcedureBak> MedicalDischargeSummaryProcedureBaks { get; set; }

    public virtual DbSet<MedicalEmployeeInitial> MedicalEmployeeInitials { get; set; }

    public virtual DbSet<MedicalFileStatus> MedicalFileStatuses { get; set; }

    public virtual DbSet<MedicalRecordFileBorrowed> MedicalRecordFileBorroweds { get; set; }

    public virtual DbSet<MedicalRecordFileBorrowedHistory> MedicalRecordFileBorrowedHistories { get; set; }

    public virtual DbSet<MedicalRecordFileStatus> MedicalRecordFileStatuses { get; set; }

    public virtual DbSet<MedicalRecordFileStatusDisplay> MedicalRecordFileStatusDisplays { get; set; }

    public virtual DbSet<MedicalRecordFileStatusMovement> MedicalRecordFileStatusMovements { get; set; }

    public virtual DbSet<MedicationReceive> MedicationReceives { get; set; }

    public virtual DbSet<MedicationReceiveAppropriate> MedicationReceiveAppropriates { get; set; }

    public virtual DbSet<MedicationReceiveFromPatient> MedicationReceiveFromPatients { get; set; }

    public virtual DbSet<MedicationReceiveStatus> MedicationReceiveStatuses { get; set; }

    public virtual DbSet<MedicationReceiveUsed> MedicationReceiveUseds { get; set; }

    public virtual DbSet<MedicationRecon> MedicationRecons { get; set; }

    public virtual DbSet<MedicationReconLine> MedicationReconLines { get; set; }

    public virtual DbSet<MedicationSchedule> MedicationSchedules { get; set; }

    public virtual DbSet<Membership> Memberships { get; set; }

    public virtual DbSet<MembershipDetail> MembershipDetails { get; set; }

    public virtual DbSet<MembershipItemRedeem> MembershipItemRedeems { get; set; }

    public virtual DbSet<MembershipItemRedemption> MembershipItemRedemptions { get; set; }

    public virtual DbSet<MembershipItemRedemptionDetail> MembershipItemRedemptionDetails { get; set; }

    public virtual DbSet<MembershipItemRedemptionItem> MembershipItemRedemptionItems { get; set; }

    public virtual DbSet<MembershipMember> MembershipMembers { get; set; }

    public virtual DbSet<Menu> Menus { get; set; }

    public virtual DbSet<MenuItem> MenuItems { get; set; }

    public virtual DbSet<MenuItemExtra> MenuItemExtras { get; set; }

    public virtual DbSet<MenuItemExtraFood> MenuItemExtraFoods { get; set; }

    public virtual DbSet<MenuItemFood> MenuItemFoods { get; set; }

    public virtual DbSet<MenuSetting> MenuSettings { get; set; }

    public virtual DbSet<MenuVersion> MenuVersions { get; set; }

    public virtual DbSet<MergeBilling> MergeBillings { get; set; }

    public virtual DbSet<MergeBillingHistory> MergeBillingHistories { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MetricInfo> MetricInfos { get; set; }

    public virtual DbSet<MetricMetaDataMessage> MetricMetaDataMessages { get; set; }

    public virtual DbSet<MetricMetaDataMessageMap> MetricMetaDataMessageMaps { get; set; }

    public virtual DbSet<MetricMetaDatum> MetricMetaData { get; set; }

    public virtual DbSet<MetricThreshold> MetricThresholds { get; set; }

    public virtual DbSet<MetricThresholdInstance> MetricThresholdInstances { get; set; }

    public virtual DbSet<MirroringParticipant> MirroringParticipants { get; set; }

    public virtual DbSet<MirroringPreferredConfig> MirroringPreferredConfigs { get; set; }

    public virtual DbSet<MirroringStatistic> MirroringStatistics { get; set; }

    public virtual DbSet<MonitoredServerSqlsafeInstance> MonitoredServerSqlsafeInstances { get; set; }

    public virtual DbSet<MonitoredSqlserver> MonitoredSqlservers { get; set; }

    public virtual DbSet<MonthlyAttendance> MonthlyAttendances { get; set; }

    public virtual DbSet<MonthlyAttendanceDetail> MonthlyAttendanceDetails { get; set; }

    public virtual DbSet<MonthlyAttendanceDetailHistory> MonthlyAttendanceDetailHistories { get; set; }

    public virtual DbSet<MonthlyAttendanceDetailSummary> MonthlyAttendanceDetailSummaries { get; set; }

    public virtual DbSet<MontlyAttedance> MontlyAttedances { get; set; }

    public virtual DbSet<Morphology> Morphologies { get; set; }

    public virtual DbSet<MsJan22> MsJan22s { get; set; }

    public virtual DbSet<NccInacbg> NccInacbgs { get; set; }

    public virtual DbSet<NosocomialMonitoring> NosocomialMonitorings { get; set; }

    public virtual DbSet<NosocomialMonitoringBedRest> NosocomialMonitoringBedRests { get; set; }

    public virtual DbSet<NosocomialMonitoringCatheter> NosocomialMonitoringCatheters { get; set; }

    public virtual DbSet<NosocomialMonitoringDetail> NosocomialMonitoringDetails { get; set; }

    public virtual DbSet<NosocomialMonitoringEtt> NosocomialMonitoringEtts { get; set; }

    public virtual DbSet<NosocomialMonitoringHap> NosocomialMonitoringHaps { get; set; }

    public virtual DbSet<NosocomialMonitoringInfu> NosocomialMonitoringInfus { get; set; }

    public virtual DbSet<NosocomialMonitoringNgt> NosocomialMonitoringNgts { get; set; }

    public virtual DbSet<NosocomialMonitoringSurgery> NosocomialMonitoringSurgeries { get; set; }

    public virtual DbSet<NotificationProvider> NotificationProviders { get; set; }

    public virtual DbSet<NotificationRule> NotificationRules { get; set; }

    public virtual DbSet<NumberOfBed> NumberOfBeds { get; set; }

    public virtual DbSet<NumberOfBedSmf> NumberOfBedSmfs { get; set; }

    public virtual DbSet<NursingAssessment> NursingAssessments { get; set; }

    public virtual DbSet<NursingAssessmentDiagnosa> NursingAssessmentDiagnosas { get; set; }

    public virtual DbSet<NursingAssessmentDiagnosaRen> NursingAssessmentDiagnosaRens { get; set; }

    public virtual DbSet<NursingAssessmentQuestion> NursingAssessmentQuestions { get; set; }

    public virtual DbSet<NursingAssessmentTransDt> NursingAssessmentTransDts { get; set; }

    public virtual DbSet<NursingAssessmentTransHd> NursingAssessmentTransHds { get; set; }

    public virtual DbSet<NursingDiagnosa> NursingDiagnosas { get; set; }

    public virtual DbSet<NursingDiagnosaEvaluation> NursingDiagnosaEvaluations { get; set; }

    public virtual DbSet<NursingDiagnosaNsType> NursingDiagnosaNsTypes { get; set; }

    public virtual DbSet<NursingDiagnosaServiceUnit> NursingDiagnosaServiceUnits { get; set; }

    public virtual DbSet<NursingDiagnosaTemplate> NursingDiagnosaTemplates { get; set; }

    public virtual DbSet<NursingDiagnosaTemplateDetail> NursingDiagnosaTemplateDetails { get; set; }

    public virtual DbSet<NursingDiagnosaTemplateServiceUnit> NursingDiagnosaTemplateServiceUnits { get; set; }

    public virtual DbSet<NursingDiagnosaTransDt> NursingDiagnosaTransDts { get; set; }

    public virtual DbSet<NursingTransHd> NursingTransHds { get; set; }

    public virtual DbSet<NutritionCareAssessmentQuestion> NutritionCareAssessmentQuestions { get; set; }

    public virtual DbSet<NutritionCareAssessmentQuestionDiagnose> NutritionCareAssessmentQuestionDiagnoses { get; set; }

    public virtual DbSet<NutritionCareAssessmentTransDt> NutritionCareAssessmentTransDts { get; set; }

    public virtual DbSet<NutritionCareAssessmentTransHd> NutritionCareAssessmentTransHds { get; set; }

    public virtual DbSet<NutritionCareDiagnoseEvaluation> NutritionCareDiagnoseEvaluations { get; set; }

    public virtual DbSet<NutritionCareDiagnoseTransDt> NutritionCareDiagnoseTransDts { get; set; }

    public virtual DbSet<NutritionCareTerminology> NutritionCareTerminologies { get; set; }

    public virtual DbSet<NutritionCareTerminologyTemplate> NutritionCareTerminologyTemplates { get; set; }

    public virtual DbSet<NutritionCareTerminologyTemplateDetail> NutritionCareTerminologyTemplateDetails { get; set; }

    public virtual DbSet<NutritionCareTransHd> NutritionCareTransHds { get; set; }

    public virtual DbSet<ObatTroliEmergency> ObatTroliEmergencies { get; set; }

    public virtual DbSet<ObatTroliEmergency2> ObatTroliEmergency2s { get; set; }

    public virtual DbSet<Obatdiskon> Obatdiskons { get; set; }

    public virtual DbSet<OldMedical> OldMedicals { get; set; }

    public virtual DbSet<OperatingTheaterInformationDisplay> OperatingTheaterInformationDisplays { get; set; }

    public virtual DbSet<OperationCostEstimation> OperationCostEstimations { get; set; }

    public virtual DbSet<OperationCostEstimationItem> OperationCostEstimationItems { get; set; }

    public virtual DbSet<OperationNotesTemplate> OperationNotesTemplates { get; set; }

    public virtual DbSet<OperationalTime> OperationalTimes { get; set; }

    public virtual DbSet<OrganizationUnit> OrganizationUnits { get; set; }

    public virtual DbSet<Osstatistic> Osstatistics { get; set; }

    public virtual DbSet<Overtime> Overtimes { get; set; }

    public virtual DbSet<OvertimeDetail> OvertimeDetails { get; set; }

    public virtual DbSet<Pajak> Pajaks { get; set; }

    public virtual DbSet<Paramedic> Paramedics { get; set; }

    public virtual DbSet<ParamedicAutoBillItem> ParamedicAutoBillItems { get; set; }

    public virtual DbSet<ParamedicBridging> ParamedicBridgings { get; set; }

    public virtual DbSet<ParamedicConsultForm> ParamedicConsultForms { get; set; }

    public virtual DbSet<ParamedicConsultRefer> ParamedicConsultRefers { get; set; }

    public virtual DbSet<ParamedicCopy1> ParamedicCopy1s { get; set; }

    public virtual DbSet<ParamedicFeeAddDeduc> ParamedicFeeAddDeducs { get; set; }

    public virtual DbSet<ParamedicFeeAddDeducCoaItem> ParamedicFeeAddDeducCoaItems { get; set; }

    public virtual DbSet<ParamedicFeeByArSetting> ParamedicFeeByArSettings { get; set; }

    public virtual DbSet<ParamedicFeeByFee4ServiceSetting> ParamedicFeeByFee4ServiceSettings { get; set; }

    public virtual DbSet<ParamedicFeeByNumberOfPatient> ParamedicFeeByNumberOfPatients { get; set; }

    public virtual DbSet<ParamedicFeeByNumberOfPatientsDetail> ParamedicFeeByNumberOfPatientsDetails { get; set; }

    public virtual DbSet<ParamedicFeeByNumberOfPatientsRangeAmount> ParamedicFeeByNumberOfPatientsRangeAmounts { get; set; }

    public virtual DbSet<ParamedicFeeByServiceSetting> ParamedicFeeByServiceSettings { get; set; }

    public virtual DbSet<ParamedicFeeDeduction> ParamedicFeeDeductions { get; set; }

    public virtual DbSet<ParamedicFeeDeductionSetting> ParamedicFeeDeductionSettings { get; set; }

    public virtual DbSet<ParamedicFeeExecutedFormula> ParamedicFeeExecutedFormulas { get; set; }

    public virtual DbSet<ParamedicFeeGuarantorCategory> ParamedicFeeGuarantorCategories { get; set; }

    public virtual DbSet<ParamedicFeeGuarantorCategoryItem> ParamedicFeeGuarantorCategoryItems { get; set; }

    public virtual DbSet<ParamedicFeeGuarantorCategoryItemComp> ParamedicFeeGuarantorCategoryItemComps { get; set; }

    public virtual DbSet<ParamedicFeeItem> ParamedicFeeItems { get; set; }

    public virtual DbSet<ParamedicFeeItemComp> ParamedicFeeItemComps { get; set; }

    public virtual DbSet<ParamedicFeeItemGuarantor> ParamedicFeeItemGuarantors { get; set; }

    public virtual DbSet<ParamedicFeeItemGuarantorComp> ParamedicFeeItemGuarantorComps { get; set; }

    public virtual DbSet<ParamedicFeePatientCategory> ParamedicFeePatientCategories { get; set; }

    public virtual DbSet<ParamedicFeePatientCategoryItem> ParamedicFeePatientCategoryItems { get; set; }

    public virtual DbSet<ParamedicFeePatientCategoryItemComp> ParamedicFeePatientCategoryItemComps { get; set; }

    public virtual DbSet<ParamedicFeePatientCategoryItemGuarantor> ParamedicFeePatientCategoryItemGuarantors { get; set; }

    public virtual DbSet<ParamedicFeePatientCategoryItemGuarantorComp> ParamedicFeePatientCategoryItemGuarantorComps { get; set; }

    public virtual DbSet<ParamedicFeePaymentDt> ParamedicFeePaymentDts { get; set; }

    public virtual DbSet<ParamedicFeePaymentGroup> ParamedicFeePaymentGroups { get; set; }

    public virtual DbSet<ParamedicFeePaymentGroupDetail> ParamedicFeePaymentGroupDetails { get; set; }

    public virtual DbSet<ParamedicFeePaymentHd> ParamedicFeePaymentHds { get; set; }

    public virtual DbSet<ParamedicFeeProgressiveTax> ParamedicFeeProgressiveTaxes { get; set; }

    public virtual DbSet<ParamedicFeeRemun> ParamedicFeeRemuns { get; set; }

    public virtual DbSet<ParamedicFeeRemunByIdi> ParamedicFeeRemunByIdis { get; set; }

    public virtual DbSet<ParamedicFeeRemunByIdiDetail> ParamedicFeeRemunByIdiDetails { get; set; }

    public virtual DbSet<ParamedicFeeRemunByIdiSetting> ParamedicFeeRemunByIdiSettings { get; set; }

    public virtual DbSet<ParamedicFeeRemunByIdiSummary> ParamedicFeeRemunByIdiSummaries { get; set; }

    public virtual DbSet<ParamedicFeeTaxCalculation> ParamedicFeeTaxCalculations { get; set; }

    public virtual DbSet<ParamedicFeeTaxCalculationDt> ParamedicFeeTaxCalculationDts { get; set; }

    public virtual DbSet<ParamedicFeeTaxCalculationHd> ParamedicFeeTaxCalculationHds { get; set; }

    public virtual DbSet<ParamedicFeeTransChargesItemComp> ParamedicFeeTransChargesItemComps { get; set; }

    public virtual DbSet<ParamedicFeeTransChargesItemCompByDischargeDate> ParamedicFeeTransChargesItemCompByDischargeDates { get; set; }

    public virtual DbSet<ParamedicFeeTransChargesItemCompSettled> ParamedicFeeTransChargesItemCompSettleds { get; set; }

    public virtual DbSet<ParamedicFeeTransPayment> ParamedicFeeTransPayments { get; set; }

    public virtual DbSet<ParamedicFeeVerification> ParamedicFeeVerifications { get; set; }

    public virtual DbSet<ParamedicFeeVerificationRentalRoom> ParamedicFeeVerificationRentalRooms { get; set; }

    public virtual DbSet<ParamedicGlobalSchedule> ParamedicGlobalSchedules { get; set; }

    public virtual DbSet<ParamedicLeave> ParamedicLeaves { get; set; }

    public virtual DbSet<ParamedicLeaveDate> ParamedicLeaveDates { get; set; }

    public virtual DbSet<ParamedicLeaveExeptionUnit> ParamedicLeaveExeptionUnits { get; set; }

    public virtual DbSet<ParamedicOtherType> ParamedicOtherTypes { get; set; }

    public virtual DbSet<ParamedicRemunReport> ParamedicRemunReports { get; set; }

    public virtual DbSet<ParamedicSchedule> ParamedicSchedules { get; set; }

    public virtual DbSet<ParamedicScheduleBpj> ParamedicScheduleBpjs { get; set; }

    public virtual DbSet<ParamedicScheduleDate> ParamedicScheduleDates { get; set; }

    public virtual DbSet<ParamedicScheduleDateItem> ParamedicScheduleDateItems { get; set; }

    public virtual DbSet<ParamedicScheduleForWebsite> ParamedicScheduleForWebsites { get; set; }

    public virtual DbSet<ParamedicSchedulePerDate> ParamedicSchedulePerDates { get; set; }

    public virtual DbSet<ParamedicScheduleSlot> ParamedicScheduleSlots { get; set; }

    public virtual DbSet<ParamedicSoaptemplate> ParamedicSoaptemplates { get; set; }

    public virtual DbSet<ParamedicTeam> ParamedicTeams { get; set; }

    public virtual DbSet<ParamedicTransCharge> ParamedicTransCharges { get; set; }

    public virtual DbSet<PastMedicalHistory> PastMedicalHistories { get; set; }

    public virtual DbSet<PastSurgicalHistory> PastSurgicalHistories { get; set; }

    public virtual DbSet<PastTransfusionHistory> PastTransfusionHistories { get; set; }

    public virtual DbSet<PathologyAnatomy> PathologyAnatomies { get; set; }

    public virtual DbSet<PathologyAnatomyDiagnosis> PathologyAnatomyDiagnoses { get; set; }

    public virtual DbSet<PathologyAnatomyImage> PathologyAnatomyImages { get; set; }

    public virtual DbSet<PathologyAnatomyImpressionGroup> PathologyAnatomyImpressionGroups { get; set; }

    public virtual DbSet<PathologyAnatomyImpressionGroupItem> PathologyAnatomyImpressionGroupItems { get; set; }

    public virtual DbSet<PathologyAnatomyLocationOfCytology> PathologyAnatomyLocationOfCytologies { get; set; }

    public virtual DbSet<PathologyAnatomySourceOfTissue> PathologyAnatomySourceOfTissues { get; set; }

    public virtual DbSet<PathologyAnatomyTissue> PathologyAnatomyTissues { get; set; }

    public virtual DbSet<Pathway> Pathways { get; set; }

    public virtual DbSet<PathwayDiagnoseItem> PathwayDiagnoseItems { get; set; }

    public virtual DbSet<PathwayItem> PathwayItems { get; set; }

    public virtual DbSet<PathwayItemExecution> PathwayItemExecutions { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<PatientAllergy> PatientAllergies { get; set; }

    public virtual DbSet<PatientAssessment> PatientAssessments { get; set; }

    public virtual DbSet<PatientBiometric> PatientBiometrics { get; set; }

    public virtual DbSet<PatientBirthRecord> PatientBirthRecords { get; set; }

    public virtual DbSet<PatientBlackListHistory> PatientBlackListHistories { get; set; }

    public virtual DbSet<PatientChildBirthHistory> PatientChildBirthHistories { get; set; }

    public virtual DbSet<PatientDischargeAppointment> PatientDischargeAppointments { get; set; }

    public virtual DbSet<PatientDischargeHistory> PatientDischargeHistories { get; set; }

    public virtual DbSet<PatientDocument> PatientDocuments { get; set; }

    public virtual DbSet<PatientDocumentImage> PatientDocumentImages { get; set; }

    public virtual DbSet<PatientEducation> PatientEducations { get; set; }

    public virtual DbSet<PatientEducationLine> PatientEducationLines { get; set; }

    public virtual DbSet<PatientEducationRsudt> PatientEducationRsudts { get; set; }

    public virtual DbSet<PatientEducationRsudtDetail> PatientEducationRsudtDetails { get; set; }

    public virtual DbSet<PatientEmergencyContact> PatientEmergencyContacts { get; set; }

    public virtual DbSet<PatientFace> PatientFaces { get; set; }

    public virtual DbSet<PatientFluidBalance> PatientFluidBalances { get; set; }

    public virtual DbSet<PatientFluidBalanceDetail> PatientFluidBalanceDetails { get; set; }

    public virtual DbSet<PatientFluidBalanceSchemaInfu> PatientFluidBalanceSchemaInfus { get; set; }

    public virtual DbSet<PatientGenogram> PatientGenograms { get; set; }

    public virtual DbSet<PatientHealthRecord> PatientHealthRecords { get; set; }

    public virtual DbSet<PatientHealthRecordDeleted> PatientHealthRecordDeleteds { get; set; }

    public virtual DbSet<PatientHealthRecordLine> PatientHealthRecordLines { get; set; }

    public virtual DbSet<PatientHealthRecordLineDeleted> PatientHealthRecordLineDeleteds { get; set; }

    public virtual DbSet<PatientHealthRecordTemplate> PatientHealthRecordTemplates { get; set; }

    public virtual DbSet<PatientIdentificationCompliance> PatientIdentificationCompliances { get; set; }

    public virtual DbSet<PatientIdentificationComplianceItem> PatientIdentificationComplianceItems { get; set; }

    public virtual DbSet<PatientImage> PatientImages { get; set; }

    public virtual DbSet<PatientImmunization> PatientImmunizations { get; set; }

    public virtual DbSet<PatientImmunizationOther> PatientImmunizationOthers { get; set; }

    public virtual DbSet<PatientIncident> PatientIncidents { get; set; }

    public virtual DbSet<PatientIncidentCauseAnalysis> PatientIncidentCauseAnalyses { get; set; }

    public virtual DbSet<PatientIncidentComponentType> PatientIncidentComponentTypes { get; set; }

    public virtual DbSet<PatientIncidentInvestigation> PatientIncidentInvestigations { get; set; }

    public virtual DbSet<PatientIncidentKtd> PatientIncidentKtds { get; set; }

    public virtual DbSet<PatientIncidentRelatedUnit> PatientIncidentRelatedUnits { get; set; }

    public virtual DbSet<PatientIncidentSafetyGoal> PatientIncidentSafetyGoals { get; set; }

    public virtual DbSet<PatientIncidentUnderlyingCausesItemComponent> PatientIncidentUnderlyingCausesItemComponents { get; set; }

    public virtual DbSet<PatientInfo> PatientInfos { get; set; }

    public virtual DbSet<PatientInfoSumary> PatientInfoSumaries { get; set; }

    public virtual DbSet<PatientMembership> PatientMemberships { get; set; }

    public virtual DbSet<PatientMembershipDetail> PatientMembershipDetails { get; set; }

    public virtual DbSet<PatientMembershipItemRedeem> PatientMembershipItemRedeems { get; set; }

    public virtual DbSet<PatientMembershipItemRedemption> PatientMembershipItemRedemptions { get; set; }

    public virtual DbSet<PatientMembershipItemRedemptionDetail> PatientMembershipItemRedemptionDetails { get; set; }

    public virtual DbSet<PatientMembershipItemRedemptionItem> PatientMembershipItemRedemptionItems { get; set; }

    public virtual DbSet<PatientMembershipMember> PatientMembershipMembers { get; set; }

    public virtual DbSet<PatientMrnnameHistory> PatientMrnnameHistories { get; set; }

    public virtual DbSet<PatientOdontogram> PatientOdontograms { get; set; }

    public virtual DbSet<PatientOtp> PatientOtps { get; set; }

    public virtual DbSet<PatientReceivableMonthlySummary> PatientReceivableMonthlySummaries { get; set; }

    public virtual DbSet<PatientReceivableMonthlySummaryDetail> PatientReceivableMonthlySummaryDetails { get; set; }

    public virtual DbSet<PatientRelated> PatientRelateds { get; set; }

    public virtual DbSet<PatientResearch> PatientResearches { get; set; }

    public virtual DbSet<PatientScheduling> PatientSchedulings { get; set; }

    public virtual DbSet<PatientTransfer> PatientTransfers { get; set; }

    public virtual DbSet<PatientTransferHistory> PatientTransferHistories { get; set; }

    public virtual DbSet<PatientVisum> PatientVisums { get; set; }

    public virtual DbSet<PatientVitalSignMonitoring> PatientVitalSignMonitorings { get; set; }

    public virtual DbSet<PatientVitalSignMonitoringItem> PatientVitalSignMonitoringItems { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<PayrollPeriod> PayrollPeriods { get; set; }

    public virtual DbSet<PcareKunjungan> PcareKunjungans { get; set; }

    public virtual DbSet<PcareKunjunganObat> PcareKunjunganObats { get; set; }

    public virtual DbSet<PcareKunjunganTindakan> PcareKunjunganTindakans { get; set; }

    public virtual DbSet<PcareReference> PcareReferences { get; set; }

    public virtual DbSet<PcareReferenceItem> PcareReferenceItems { get; set; }

    public virtual DbSet<PcareReferenceItemMapping> PcareReferenceItemMappings { get; set; }

    public virtual DbSet<PendolPrintJob> PendolPrintJobs { get; set; }

    public virtual DbSet<PensionTax> PensionTaxes { get; set; }

    public virtual DbSet<PerformancePlanActivity> PerformancePlanActivities { get; set; }

    public virtual DbSet<PerformancePlanAspectsOfBehavior> PerformancePlanAspectsOfBehaviors { get; set; }

    public virtual DbSet<PerformancePlanAspectsOfBehaviorGrade> PerformancePlanAspectsOfBehaviorGrades { get; set; }

    public virtual DbSet<PerformancePlanAspectsOfBehaviorItem> PerformancePlanAspectsOfBehaviorItems { get; set; }

    public virtual DbSet<PerformancePlanDocument> PerformancePlanDocuments { get; set; }

    public virtual DbSet<PerformancePlanJpt> PerformancePlanJpts { get; set; }

    public virtual DbSet<PerformancePlanJptItem> PerformancePlanJptItems { get; set; }

    public virtual DbSet<PerformancePlanJptSchedule> PerformancePlanJptSchedules { get; set; }

    public virtual DbSet<PerformancePlanJptTx> PerformancePlanJptTxes { get; set; }

    public virtual DbSet<PerformancePlanNonJpt> PerformancePlanNonJpts { get; set; }

    public virtual DbSet<PerformancePlanNonJptItem> PerformancePlanNonJptItems { get; set; }

    public virtual DbSet<PerformancePlanNonJptTx> PerformancePlanNonJptTxes { get; set; }

    public virtual DbSet<PerformancePlanNonJptTxItem> PerformancePlanNonJptTxItems { get; set; }

    public virtual DbSet<PerformancePlanPppk> PerformancePlanPppks { get; set; }

    public virtual DbSet<PerformancePlanPppkItem> PerformancePlanPppkItems { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<PersonalAddress> PersonalAddresses { get; set; }

    public virtual DbSet<PersonalContact> PersonalContacts { get; set; }

    public virtual DbSet<PersonalDocument> PersonalDocuments { get; set; }

    public virtual DbSet<PersonalEducationHistory> PersonalEducationHistories { get; set; }

    public virtual DbSet<PersonalEmergencyContact> PersonalEmergencyContacts { get; set; }

    public virtual DbSet<PersonalFamily> PersonalFamilies { get; set; }

    public virtual DbSet<PersonalIdentification> PersonalIdentifications { get; set; }

    public virtual DbSet<PersonalImage> PersonalImages { get; set; }

    public virtual DbSet<PersonalInfo> PersonalInfos { get; set; }

    public virtual DbSet<PersonalInfoGoogleForm> PersonalInfoGoogleForms { get; set; }

    public virtual DbSet<PersonalLicence> PersonalLicences { get; set; }

    public virtual DbSet<PersonalOrganization> PersonalOrganizations { get; set; }

    public virtual DbSet<PersonalPhysical> PersonalPhysicals { get; set; }

    public virtual DbSet<PersonalRecruitmentTest> PersonalRecruitmentTests { get; set; }

    public virtual DbSet<PersonalWorkExperience> PersonalWorkExperiences { get; set; }

    public virtual DbSet<PersonnelRequisition> PersonnelRequisitions { get; set; }

    public virtual DbSet<PettyCash> PettyCashes { get; set; }

    public virtual DbSet<PettyCashItem> PettyCashItems { get; set; }

    public virtual DbSet<Pio> Pios { get; set; }

    public virtual DbSet<PioCategoryLine> PioCategoryLines { get; set; }

    public virtual DbSet<PioSourceLine> PioSourceLines { get; set; }

    public virtual DbSet<Pkp> Pkps { get; set; }

    public virtual DbSet<PoliklinikQueList> PoliklinikQueLists { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<PositionBenchmark> PositionBenchmarks { get; set; }

    public virtual DbSet<PositionDuty> PositionDuties { get; set; }

    public virtual DbSet<PositionEducation> PositionEducations { get; set; }

    public virtual DbSet<PositionEmploymentCompany> PositionEmploymentCompanies { get; set; }

    public virtual DbSet<PositionFunctionalArea> PositionFunctionalAreas { get; set; }

    public virtual DbSet<PositionGoal> PositionGoals { get; set; }

    public virtual DbSet<PositionGrade> PositionGrades { get; set; }

    public virtual DbSet<PositionLevel> PositionLevels { get; set; }

    public virtual DbSet<PositionLicense> PositionLicenses { get; set; }

    public virtual DbSet<PositionPersonal> PositionPersonals { get; set; }

    public virtual DbSet<PositionPhysical> PositionPhysicals { get; set; }

    public virtual DbSet<PositionPsychological> PositionPsychologicals { get; set; }

    public virtual DbSet<PositionRanking> PositionRankings { get; set; }

    public virtual DbSet<PositionResponsibility> PositionResponsibilities { get; set; }

    public virtual DbSet<PositionWorkExperience> PositionWorkExperiences { get; set; }

    public virtual DbSet<PostingStatus> PostingStatuses { get; set; }

    public virtual DbSet<PphProgressiveTax> PphProgressiveTaxes { get; set; }

    public virtual DbSet<PpiAntimicrobialApplication> PpiAntimicrobialApplications { get; set; }

    public virtual DbSet<PpiDiseaseFactor> PpiDiseaseFactors { get; set; }

    public virtual DbSet<PpiInfection> PpiInfections { get; set; }

    public virtual DbSet<PpiNeedlePunctured> PpiNeedlePunctureds { get; set; }

    public virtual DbSet<PpiProcedureSurveillance> PpiProcedureSurveillances { get; set; }

    public virtual DbSet<PpiProcedureSurveillanceUseOfAntibiotic> PpiProcedureSurveillanceUseOfAntibiotics { get; set; }

    public virtual DbSet<PpiRiskFactor> PpiRiskFactors { get; set; }

    public virtual DbSet<PpiRiskFactorsItem> PpiRiskFactorsItems { get; set; }

    public virtual DbSet<PredictiveForecast> PredictiveForecasts { get; set; }

    public virtual DbSet<PredictiveModel> PredictiveModels { get; set; }

    public virtual DbSet<PrescriptionQueueDisplay> PrescriptionQueueDisplays { get; set; }

    public virtual DbSet<PrescriptionQueueDisplayByCode> PrescriptionQueueDisplayByCodes { get; set; }

    public virtual DbSet<PrescriptionReview> PrescriptionReviews { get; set; }

    public virtual DbSet<PrescriptiveAnalysis> PrescriptiveAnalyses { get; set; }

    public virtual DbSet<PrescriptiveAnalysisDetail> PrescriptiveAnalysisDetails { get; set; }

    public virtual DbSet<PrescriptiveAnalysisRecommendation> PrescriptiveAnalysisRecommendations { get; set; }

    public virtual DbSet<PrescriptiveAnalysisRecommendationProperty> PrescriptiveAnalysisRecommendationProperties { get; set; }

    public virtual DbSet<PrescriptiveAnalysisSnapshotValuesPreviou> PrescriptiveAnalysisSnapshotValuesPrevious { get; set; }

    public virtual DbSet<PrescriptiveAnalysisType> PrescriptiveAnalysisTypes { get; set; }

    public virtual DbSet<PrescriptiveAnalyzer> PrescriptiveAnalyzers { get; set; }

    public virtual DbSet<PrescriptiveAnalyzerCategory> PrescriptiveAnalyzerCategories { get; set; }

    public virtual DbSet<PrescriptiveOptimiztionExecutionStatus> PrescriptiveOptimiztionExecutionStatuses { get; set; }

    public virtual DbSet<PrescriptiveRecommendation> PrescriptiveRecommendations { get; set; }

    public virtual DbSet<PrescriptiveRecommendationCategory> PrescriptiveRecommendationCategories { get; set; }

    public virtual DbSet<PrescriptiveRecommendationProperty> PrescriptiveRecommendationProperties { get; set; }

    public virtual DbSet<PrintJob> PrintJobs { get; set; }

    public virtual DbSet<PrintJobLog> PrintJobLogs { get; set; }

    public virtual DbSet<PrintJobParameter> PrintJobParameters { get; set; }

    public virtual DbSet<PrintJobParameterLog> PrintJobParameterLogs { get; set; }

    public virtual DbSet<PrintSlipLog> PrintSlipLogs { get; set; }

    public virtual DbSet<Printer> Printers { get; set; }

    public virtual DbSet<PrmrjFollowUp> PrmrjFollowUps { get; set; }

    public virtual DbSet<Procedure> Procedures { get; set; }

    public virtual DbSet<ProcedureInaGroupper> ProcedureInaGrouppers { get; set; }

    public virtual DbSet<ProductAccount> ProductAccounts { get; set; }

    public virtual DbSet<ProductAccountGuarantorGroup> ProductAccountGuarantorGroups { get; set; }

    public virtual DbSet<ProductionFormula> ProductionFormulas { get; set; }

    public virtual DbSet<ProductionFormulaItem> ProductionFormulaItems { get; set; }

    public virtual DbSet<ProductionFormulaOtherItem> ProductionFormulaOtherItems { get; set; }

    public virtual DbSet<ProductionOfGood> ProductionOfGoods { get; set; }

    public virtual DbSet<ProductionOfGoodsItem> ProductionOfGoodsItems { get; set; }

    public virtual DbSet<Ptkp> Ptkps { get; set; }

    public virtual DbSet<Qty> Qties { get; set; }

    public virtual DbSet<QualityIndicatorSurvey> QualityIndicatorSurveys { get; set; }

    public virtual DbSet<QualityIndicatorSurveyDetail> QualityIndicatorSurveyDetails { get; set; }

    public virtual DbSet<QueLocation> QueLocations { get; set; }

    public virtual DbSet<QueLocationItem> QueLocationItems { get; set; }

    public virtual DbSet<QueryMonitorStatistic> QueryMonitorStatistics { get; set; }

    public virtual DbSet<QuerySignatureAggregation> QuerySignatureAggregations { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionAnswerSelection> QuestionAnswerSelections { get; set; }

    public virtual DbSet<QuestionAnswerSelectionLine> QuestionAnswerSelectionLines { get; set; }

    public virtual DbSet<QuestionDefaultValue> QuestionDefaultValues { get; set; }

    public virtual DbSet<QuestionForm> QuestionForms { get; set; }

    public virtual DbSet<QuestionFormInServiceUnit> QuestionFormInServiceUnits { get; set; }

    public virtual DbSet<QuestionGroup> QuestionGroups { get; set; }

    public virtual DbSet<QuestionGroupInForm> QuestionGroupInForms { get; set; }

    public virtual DbSet<QuestionInGroup> QuestionInGroups { get; set; }

    public virtual DbSet<QuestionRecord> QuestionRecords { get; set; }

    public virtual DbSet<QueueingSound> QueueingSounds { get; set; }

    public virtual DbSet<Raspro> Raspros { get; set; }

    public virtual DbSet<RasproAction> RasproActions { get; set; }

    public virtual DbSet<ReasonsForTreatment> ReasonsForTreatments { get; set; }

    public virtual DbSet<ReasonsForTreatmentDesc> ReasonsForTreatmentDescs { get; set; }

    public virtual DbSet<RecalculationProcessHistory> RecalculationProcessHistories { get; set; }

    public virtual DbSet<RecipeMarginValue> RecipeMarginValues { get; set; }

    public virtual DbSet<RecommedationClassification> RecommedationClassifications { get; set; }

    public virtual DbSet<RecruitmentMethod> RecruitmentMethods { get; set; }

    public virtual DbSet<RecruitmentPlan> RecruitmentPlans { get; set; }

    public virtual DbSet<ReferExternal> ReferExternals { get; set; }

    public virtual DbSet<ReferExternalBak> ReferExternalBaks { get; set; }

    public virtual DbSet<ReferInPatient> ReferInPatients { get; set; }

    public virtual DbSet<ReferLetter> ReferLetters { get; set; }

    public virtual DbSet<Referral> Referrals { get; set; }

    public virtual DbSet<Registration> Registrations { get; set; }

    public virtual DbSet<RegistrationAntrol> RegistrationAntrols { get; set; }

    public virtual DbSet<RegistrationApproximateCoverageDetail> RegistrationApproximateCoverageDetails { get; set; }

    public virtual DbSet<RegistrationBpjsPackage> RegistrationBpjsPackages { get; set; }

    public virtual DbSet<RegistrationCounseling> RegistrationCounselings { get; set; }

    public virtual DbSet<RegistrationCounselingLine> RegistrationCounselingLines { get; set; }

    public virtual DbSet<RegistrationCoverageDetail> RegistrationCoverageDetails { get; set; }

    public virtual DbSet<RegistrationDischargeDetail> RegistrationDischargeDetails { get; set; }

    public virtual DbSet<RegistrationDiscountRule> RegistrationDiscountRules { get; set; }

    public virtual DbSet<RegistrationDisplayEmergency> RegistrationDisplayEmergencies { get; set; }

    public virtual DbSet<RegistrationDocumentCheckList> RegistrationDocumentCheckLists { get; set; }

    public virtual DbSet<RegistrationDrugOb> RegistrationDrugObs { get; set; }

    public virtual DbSet<RegistrationDrugObsDrp> RegistrationDrugObsDrps { get; set; }

    public virtual DbSet<RegistrationDrugObsItem> RegistrationDrugObsItems { get; set; }

    public virtual DbSet<RegistrationDrugObsPto> RegistrationDrugObsPtos { get; set; }

    public virtual DbSet<RegistrationEso> RegistrationEsos { get; set; }

    public virtual DbSet<RegistrationEsoItem> RegistrationEsoItems { get; set; }

    public virtual DbSet<RegistrationEsoScale> RegistrationEsoScales { get; set; }

    public virtual DbSet<RegistrationEstimateAmount> RegistrationEstimateAmounts { get; set; }

    public virtual DbSet<RegistrationEstimateLo> RegistrationEstimateLos { get; set; }

    public virtual DbSet<RegistrationGeneralConsent> RegistrationGeneralConsents { get; set; }

    public virtual DbSet<RegistrationGuarantor> RegistrationGuarantors { get; set; }

    public virtual DbSet<RegistrationGuarantorHistory> RegistrationGuarantorHistories { get; set; }

    public virtual DbSet<RegistrationGyssen> RegistrationGyssens { get; set; }

    public virtual DbSet<RegistrationGyssensLine> RegistrationGyssensLines { get; set; }

    public virtual DbSet<RegistrationInfo> RegistrationInfos { get; set; }

    public virtual DbSet<RegistrationInfoMedic> RegistrationInfoMedics { get; set; }

    public virtual DbSet<RegistrationInfoMedicBodyDiagram> RegistrationInfoMedicBodyDiagrams { get; set; }

    public virtual DbSet<RegistrationInfoMedicDiagnose> RegistrationInfoMedicDiagnoses { get; set; }

    public virtual DbSet<RegistrationInfoMedicVitalSign> RegistrationInfoMedicVitalSigns { get; set; }

    public virtual DbSet<RegistrationInfoMedical> RegistrationInfoMedicals { get; set; }

    public virtual DbSet<RegistrationInfoSumary> RegistrationInfoSumaries { get; set; }

    public virtual DbSet<RegistrationItemRule> RegistrationItemRules { get; set; }

    public virtual DbSet<RegistrationMeasuredGoal> RegistrationMeasuredGoals { get; set; }

    public virtual DbSet<RegistrationMrnhistory> RegistrationMrnhistories { get; set; }

    public virtual DbSet<RegistrationPathway> RegistrationPathways { get; set; }

    public virtual DbSet<RegistrationPathwayItem> RegistrationPathwayItems { get; set; }

    public virtual DbSet<RegistrationPathwayItemExecution> RegistrationPathwayItemExecutions { get; set; }

    public virtual DbSet<RegistrationPatientRiskStatusHistory> RegistrationPatientRiskStatusHistories { get; set; }

    public virtual DbSet<RegistrationPlafondHistory> RegistrationPlafondHistories { get; set; }

    public virtual DbSet<RegistrationPlafondRule> RegistrationPlafondRules { get; set; }

    public virtual DbSet<RegistrationPto> RegistrationPtos { get; set; }

    public virtual DbSet<RegistrationRaspro> RegistrationRaspros { get; set; }

    public virtual DbSet<RegistrationRasproItem> RegistrationRasproItems { get; set; }

    public virtual DbSet<RegistrationRasproLine> RegistrationRasproLines { get; set; }

    public virtual DbSet<RegistrationResponsiblePerson> RegistrationResponsiblePeople { get; set; }

    public virtual DbSet<RegistrationTariffComponentDiscountRule> RegistrationTariffComponentDiscountRules { get; set; }

    public virtual DbSet<RegistrationVisit> RegistrationVisits { get; set; }

    public virtual DbSet<ReplicationTopology> ReplicationTopologies { get; set; }

    public virtual DbSet<ReportInterval> ReportIntervals { get; set; }

    public virtual DbSet<ReportPeriod> ReportPeriods { get; set; }

    public virtual DbSet<ReportPeriodInterval> ReportPeriodIntervals { get; set; }

    public virtual DbSet<RepositoryInfo> RepositoryInfos { get; set; }

    public virtual DbSet<ResearchLetter> ResearchLetters { get; set; }

    public virtual DbSet<ResearchLetterDocument> ResearchLetterDocuments { get; set; }

    public virtual DbSet<Reservation> Reservations { get; set; }

    public virtual DbSet<ResponseIh> ResponseIhs { get; set; }

    public virtual DbSet<ResponseIhsDev> ResponseIhsDevs { get; set; }

    public virtual DbSet<ResponseLog> ResponseLogs { get; set; }

    public virtual DbSet<RevenueByCashBasis> RevenueByCashBases { get; set; }

    public virtual DbSet<RewardDokterItemGroup> RewardDokterItemGroups { get; set; }

    public virtual DbSet<Rincian> Rincians { get; set; }

    public virtual DbSet<Rincian1> Rincians1 { get; set; }

    public virtual DbSet<RiskFactor> RiskFactors { get; set; }

    public virtual DbSet<RiskGrading> RiskGradings { get; set; }

    public virtual DbSet<RiskGradingMtx> RiskGradingMtxes { get; set; }

    public virtual DbSet<RiskManagement> RiskManagements { get; set; }

    public virtual DbSet<RiskManagementItem> RiskManagementItems { get; set; }

    public virtual DbSet<Rl4education> Rl4educations { get; set; }

    public virtual DbSet<RlMasterReport> RlMasterReports { get; set; }

    public virtual DbSet<RlMasterReportItem> RlMasterReportItems { get; set; }

    public virtual DbSet<RlTxReport> RlTxReports { get; set; }

    public virtual DbSet<RlTxReport12> RlTxReport12s { get; set; }

    public virtual DbSet<RlTxReport12Item> RlTxReport12Items { get; set; }

    public virtual DbSet<RlTxReport13> RlTxReport13s { get; set; }

    public virtual DbSet<RlTxReport2> RlTxReport2s { get; set; }

    public virtual DbSet<RlTxReport31> RlTxReport31s { get; set; }

    public virtual DbSet<RlTxReport310> RlTxReport310s { get; set; }

    public virtual DbSet<RlTxReport311> RlTxReport311s { get; set; }

    public virtual DbSet<RlTxReport312> RlTxReport312s { get; set; }

    public virtual DbSet<RlTxReport313> RlTxReport313s { get; set; }

    public virtual DbSet<RlTxReport313b> RlTxReport313bs { get; set; }

    public virtual DbSet<RlTxReport314> RlTxReport314s { get; set; }

    public virtual DbSet<RlTxReport315> RlTxReport315s { get; set; }

    public virtual DbSet<RlTxReport32> RlTxReport32s { get; set; }

    public virtual DbSet<RlTxReport33> RlTxReport33s { get; set; }

    public virtual DbSet<RlTxReport34> RlTxReport34s { get; set; }

    public virtual DbSet<RlTxReport35> RlTxReport35s { get; set; }

    public virtual DbSet<RlTxReport36> RlTxReport36s { get; set; }

    public virtual DbSet<RlTxReport37> RlTxReport37s { get; set; }

    public virtual DbSet<RlTxReport38> RlTxReport38s { get; set; }

    public virtual DbSet<RlTxReport39> RlTxReport39s { get; set; }

    public virtual DbSet<RlTxReport4A> RlTxReport4As { get; set; }

    public virtual DbSet<RlTxReport4Asebab> RlTxReport4Asebabs { get; set; }

    public virtual DbSet<RlTxReport4B> RlTxReport4Bs { get; set; }

    public virtual DbSet<RlTxReport4Bsebab> RlTxReport4Bsebabs { get; set; }

    public virtual DbSet<RlTxReport51> RlTxReport51s { get; set; }

    public virtual DbSet<RlTxReport52> RlTxReport52s { get; set; }

    public virtual DbSet<RlTxReport53> RlTxReport53s { get; set; }

    public virtual DbSet<RlTxReport54> RlTxReport54s { get; set; }

    public virtual DbSet<RoomBpjsBridgingClass> RoomBpjsBridgingClasses { get; set; }

    public virtual DbSet<RunQueryScript> RunQueryScripts { get; set; }

    public virtual DbSet<SalaryComponent> SalaryComponents { get; set; }

    public virtual DbSet<SalaryComponentRounding> SalaryComponentRoundings { get; set; }

    public virtual DbSet<SalaryComponentRuleDefinition> SalaryComponentRuleDefinitions { get; set; }

    public virtual DbSet<SalaryComponentRuleMatrix> SalaryComponentRuleMatrices { get; set; }

    public virtual DbSet<SalaryScale> SalaryScales { get; set; }

    public virtual DbSet<SalaryScaleFactor> SalaryScaleFactors { get; set; }

    public virtual DbSet<SalaryTemplate> SalaryTemplates { get; set; }

    public virtual DbSet<SalaryTemplateItem> SalaryTemplateItems { get; set; }

    public virtual DbSet<SanitationMaintenanceActivity> SanitationMaintenanceActivities { get; set; }

    public virtual DbSet<SanitationMaintenanceActivitySchedule> SanitationMaintenanceActivitySchedules { get; set; }

    public virtual DbSet<SanitationMaintenanceActivitySchedulePeriod> SanitationMaintenanceActivitySchedulePeriods { get; set; }

    public virtual DbSet<SanitationMaintenanceActivitySchedulePeriodDate> SanitationMaintenanceActivitySchedulePeriodDates { get; set; }

    public virtual DbSet<SanitationWasteItemBalance> SanitationWasteItemBalances { get; set; }

    public virtual DbSet<SanitationWasteItemMovement> SanitationWasteItemMovements { get; set; }

    public virtual DbSet<SanitationWasteTran> SanitationWasteTrans { get; set; }

    public virtual DbSet<SanitationWasteTransItem> SanitationWasteTransItems { get; set; }

    public virtual DbSet<SatuSehatKunjungan> SatuSehatKunjungans { get; set; }

    public virtual DbSet<SatuSehatMappingId> SatuSehatMappingIds { get; set; }

    public virtual DbSet<SatuSehatResult> SatuSehatResults { get; set; }

    public virtual DbSet<ScomalertEvent> ScomalertEvents { get; set; }

    public virtual DbSet<ServerActivity> ServerActivities { get; set; }

    public virtual DbSet<ServerStatistic> ServerStatistics { get; set; }

    public virtual DbSet<ServiceFee> ServiceFees { get; set; }

    public virtual DbSet<ServiceFeeExecutedFormula> ServiceFeeExecutedFormulas { get; set; }

    public virtual DbSet<ServiceFeeRemunRsucdr> ServiceFeeRemunRsucdrs { get; set; }

    public virtual DbSet<ServiceFeeRemunRsucdrDeduction> ServiceFeeRemunRsucdrDeductions { get; set; }

    public virtual DbSet<ServiceFeeRemunRsucdrInvoice> ServiceFeeRemunRsucdrInvoices { get; set; }

    public virtual DbSet<ServiceFeeRsucdr> ServiceFeeRsucdrs { get; set; }

    public virtual DbSet<ServiceFeeSetting> ServiceFeeSettings { get; set; }

    public virtual DbSet<ServiceRoom> ServiceRooms { get; set; }

    public virtual DbSet<ServiceRoomAutoBillItem> ServiceRoomAutoBillItems { get; set; }

    public virtual DbSet<ServiceRoomImage> ServiceRoomImages { get; set; }

    public virtual DbSet<ServiceUnit> ServiceUnits { get; set; }

    public virtual DbSet<ServiceUnitAssessmentType> ServiceUnitAssessmentTypes { get; set; }

    public virtual DbSet<ServiceUnitAutoBillItem> ServiceUnitAutoBillItems { get; set; }

    public virtual DbSet<ServiceUnitBooking> ServiceUnitBookings { get; set; }

    public virtual DbSet<ServiceUnitBookingBodyImage> ServiceUnitBookingBodyImages { get; set; }

    public virtual DbSet<ServiceUnitBookingForm> ServiceUnitBookingForms { get; set; }

    public virtual DbSet<ServiceUnitBookingOperatingNote> ServiceUnitBookingOperatingNotes { get; set; }

    public virtual DbSet<ServiceUnitBookingSmfMappingTmp> ServiceUnitBookingSmfMappingTmps { get; set; }

    public virtual DbSet<ServiceUnitBridging> ServiceUnitBridgings { get; set; }

    public virtual DbSet<ServiceUnitBridgingDefault> ServiceUnitBridgingDefaults { get; set; }

    public virtual DbSet<ServiceUnitClassMealSetFoodGroupMenuSetting> ServiceUnitClassMealSetFoodGroupMenuSettings { get; set; }

    public virtual DbSet<ServiceUnitClassMealSetMenuSetting> ServiceUnitClassMealSetMenuSettings { get; set; }

    public virtual DbSet<ServiceUnitClassMenuExtraSetting> ServiceUnitClassMenuExtraSettings { get; set; }

    public virtual DbSet<ServiceUnitClassMenuSetting> ServiceUnitClassMenuSettings { get; set; }

    public virtual DbSet<ServiceUnitImageTemplate> ServiceUnitImageTemplates { get; set; }

    public virtual DbSet<ServiceUnitItemService> ServiceUnitItemServices { get; set; }

    public virtual DbSet<ServiceUnitItemServiceClass> ServiceUnitItemServiceClasses { get; set; }

    public virtual DbSet<ServiceUnitItemServiceCompMapping> ServiceUnitItemServiceCompMappings { get; set; }

    public virtual DbSet<ServiceUnitItemType> ServiceUnitItemTypes { get; set; }

    public virtual DbSet<ServiceUnitLocation> ServiceUnitLocations { get; set; }

    public virtual DbSet<ServiceUnitNotOpr> ServiceUnitNotOprs { get; set; }

    public virtual DbSet<ServiceUnitParamedic> ServiceUnitParamedics { get; set; }

    public virtual DbSet<ServiceUnitProductAccountMapping> ServiceUnitProductAccountMappings { get; set; }

    public virtual DbSet<ServiceUnitQue> ServiceUnitQues { get; set; }

    public virtual DbSet<ServiceUnitSchedule> ServiceUnitSchedules { get; set; }

    public virtual DbSet<ServiceUnitTransactionCode> ServiceUnitTransactionCodes { get; set; }

    public virtual DbSet<ServiceUnitVisitType> ServiceUnitVisitTypes { get; set; }

    public virtual DbSet<ServiceUnitVitalSign> ServiceUnitVitalSigns { get; set; }

    public virtual DbSet<SettingRopHistory> SettingRopHistories { get; set; }

    public virtual DbSet<SeveranceTax> SeveranceTaxes { get; set; }

    public virtual DbSet<Sheet1> Sheet1s { get; set; }

    public virtual DbSet<Sheet1Absen> Sheet1Absens { get; set; }

    public virtual DbSet<SickLetter> SickLetters { get; set; }

    public virtual DbSet<Smf> Smfs { get; set; }

    public virtual DbSet<SmfDiagnose> SmfDiagnoses { get; set; }

    public virtual DbSet<SmfItemService> SmfItemServices { get; set; }

    public virtual DbSet<Snack> Snacks { get; set; }

    public virtual DbSet<SnackOrder> SnackOrders { get; set; }

    public virtual DbSet<SnackOrderItem> SnackOrderItems { get; set; }

    public virtual DbSet<SpectaclePrescription> SpectaclePrescriptions { get; set; }

    public virtual DbSet<SpectaclePrescriptionHistory> SpectaclePrescriptionHistories { get; set; }

    public virtual DbSet<SpectaclePrescriptionItem> SpectaclePrescriptionItems { get; set; }

    public virtual DbSet<SpectaclePrescriptionItemHistory> SpectaclePrescriptionItemHistories { get; set; }

    public virtual DbSet<SqlqueryPlan> SqlqueryPlans { get; set; }

    public virtual DbSet<SqlqueryPlansOverflow> SqlqueryPlansOverflows { get; set; }

    public virtual DbSet<SqlsafeConnection> SqlsafeConnections { get; set; }

    public virtual DbSet<SqlserverDatabaseName> SqlserverDatabaseNames { get; set; }

    public virtual DbSet<SqlserverTableName> SqlserverTableNames { get; set; }

    public virtual DbSet<SqlserverVersion> SqlserverVersions { get; set; }

    public virtual DbSet<Sqlsignature> Sqlsignatures { get; set; }

    public virtual DbSet<SqlsignaturesOverflow> SqlsignaturesOverflows { get; set; }

    public virtual DbSet<Sqlstatement> Sqlstatements { get; set; }

    public virtual DbSet<SqlstatementsOverflow> SqlstatementsOverflows { get; set; }

    public virtual DbSet<StageDatabaseStatistic> StageDatabaseStatistics { get; set; }

    public virtual DbSet<StandardSalary> StandardSalaries { get; set; }

    public virtual DbSet<StandardSalaryFaktor> StandardSalaryFaktors { get; set; }

    public virtual DbSet<StandartSelectionProse> StandartSelectionProses { get; set; }

    public virtual DbSet<StructuralBenefit> StructuralBenefits { get; set; }

    public virtual DbSet<SubLedger> SubLedgers { get; set; }

    public virtual DbSet<SubLedgerBalance> SubLedgerBalances { get; set; }

    public virtual DbSet<SubLedgerGroup> SubLedgerGroups { get; set; }

    public virtual DbSet<SubSpecialty> SubSpecialties { get; set; }

    public virtual DbSet<SukuRefDinke> SukuRefDinkes { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<SupplierBank> SupplierBanks { get; set; }

    public virtual DbSet<SupplierContract> SupplierContracts { get; set; }

    public virtual DbSet<SupplierContractItem> SupplierContractItems { get; set; }

    public virtual DbSet<SupplierFabric> SupplierFabrics { get; set; }

    public virtual DbSet<SupplierItem> SupplierItems { get; set; }

    public virtual DbSet<SupplierLocation> SupplierLocations { get; set; }

    public virtual DbSet<SurgicalPackage> SurgicalPackages { get; set; }

    public virtual DbSet<TabelIdi> TabelIdis { get; set; }

    public virtual DbSet<TableGrowth> TableGrowths { get; set; }

    public virtual DbSet<TableGrowthAggregation> TableGrowthAggregations { get; set; }

    public virtual DbSet<TableReorganization> TableReorganizations { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TamAppLog> TamAppLogs { get; set; }

    public virtual DbSet<TarifGabung> TarifGabungs { get; set; }

    public virtual DbSet<TariffAmbulance> TariffAmbulances { get; set; }

    public virtual DbSet<TariffComponent> TariffComponents { get; set; }

    public virtual DbSet<TariffItemVct> TariffItemVcts { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TempdbFileDatum> TempdbFileData { get; set; }

    public virtual DbSet<Tempo> Tempos { get; set; }

    public virtual DbSet<TerdugaTb> TerdugaTbs { get; set; }

    public virtual DbSet<TestResult> TestResults { get; set; }

    public virtual DbSet<TestResultTemplate> TestResultTemplates { get; set; }

    public virtual DbSet<TestResultTemplateItem> TestResultTemplateItems { get; set; }

    public virtual DbSet<Therapy> Therapies { get; set; }

    public virtual DbSet<Thr> Thrs { get; set; }

    public virtual DbSet<ThrSchedule> ThrSchedules { get; set; }

    public virtual DbSet<ThrScheduleItem> ThrScheduleItems { get; set; }

    public virtual DbSet<TmDatum> TmData { get; set; }

    public virtual DbSet<TmpAlke> TmpAlkes { get; set; }

    public virtual DbSet<TmpAppUserFarmasi> TmpAppUserFarmasis { get; set; }

    public virtual DbSet<TmpAppUserUpdateAppUser> TmpAppUserUpdateAppUsers { get; set; }

    public virtual DbSet<TmpBank> TmpBanks { get; set; }

    public virtual DbSet<TmpBillInterm> TmpBillInterms { get; set; }

    public virtual DbSet<TmpBillInterm2> TmpBillInterm2s { get; set; }

    public virtual DbSet<TmpBillInterm3> TmpBillInterm3s { get; set; }

    public virtual DbSet<TmpBillInterm4> TmpBillInterm4s { get; set; }

    public virtual DbSet<TmpBillInterm5> TmpBillInterm5s { get; set; }

    public virtual DbSet<TmpBillInterm7> TmpBillInterm7s { get; set; }

    public virtual DbSet<TmpBillIntermLog> TmpBillIntermLogs { get; set; }

    public virtual DbSet<TmpChartOfAccount> TmpChartOfAccounts { get; set; }

    public virtual DbSet<TmpCheckinBedHistory> TmpCheckinBedHistories { get; set; }

    public virtual DbSet<TmpCheckinBedRoomIn> TmpCheckinBedRoomIns { get; set; }

    public virtual DbSet<TmpCheckinPatientTransferHistory> TmpCheckinPatientTransferHistories { get; set; }

    public virtual DbSet<TmpCheckinRegistrationHistory> TmpCheckinRegistrationHistories { get; set; }

    public virtual DbSet<TmpCorporationGrade> TmpCorporationGrades { get; set; }

    public virtual DbSet<TmpDataAtasanCuti> TmpDataAtasanCutis { get; set; }

    public virtual DbSet<TmpDataKaryawan> TmpDataKaryawans { get; set; }

    public virtual DbSet<TmpDataKaryawan3> TmpDataKaryawan3s { get; set; }

    public virtual DbSet<TmpEmptyTransChargesItemComp> TmpEmptyTransChargesItemComps { get; set; }

    public virtual DbSet<TmpFlagItem> TmpFlagItems { get; set; }

    public virtual DbSet<TmpGabungan> TmpGabungans { get; set; }

    public virtual DbSet<TmpGabunganBaru> TmpGabunganBarus { get; set; }

    public virtual DbSet<TmpGabunganPenunjang> TmpGabunganPenunjangs { get; set; }

    public virtual DbSet<TmpGuarantor> TmpGuarantors { get; set; }

    public virtual DbSet<TmpHisapp> TmpHisapps { get; set; }

    public virtual DbSet<TmpIb> TmpIbs { get; set; }

    public virtual DbSet<TmpItemMinmax> TmpItemMinmaxes { get; set; }

    public virtual DbSet<TmpItemProductMedicGabungan> TmpItemProductMedicGabungans { get; set; }

    public virtual DbSet<TmpItemProductMedical> TmpItemProductMedicals { get; set; }

    public virtual DbSet<TmpItemRequestMaintenance> TmpItemRequestMaintenances { get; set; }

    public virtual DbSet<TmpItemTarffGabunganService> TmpItemTarffGabunganServices { get; set; }

    public virtual DbSet<TmpItemTariffEdelweise> TmpItemTariffEdelweises { get; set; }

    public virtual DbSet<TmpItemTariffUrologi> TmpItemTariffUrologis { get; set; }

    public virtual DbSet<TmpKasirGdbaru> TmpKasirGdbarus { get; set; }

    public virtual DbSet<TmpObat> TmpObats { get; set; }

    public virtual DbSet<TmpOperationalDate> TmpOperationalDates { get; set; }

    public virtual DbSet<TmpOrganizationUnit2> TmpOrganizationUnit2s { get; set; }

    public virtual DbSet<TmpParamedicCooGrade> TmpParamedicCooGrades { get; set; }

    public virtual DbSet<TmpParamedicFee> TmpParamedicFees { get; set; }

    public virtual DbSet<TmpParamedicSchedule> TmpParamedicSchedules { get; set; }

    public virtual DbSet<TmpParamedicScheduleDate> TmpParamedicScheduleDates { get; set; }

    public virtual DbSet<TmpPasienTarakan> TmpPasienTarakans { get; set; }

    public virtual DbSet<TmpPaymentGdbaru> TmpPaymentGdbarus { get; set; }

    public virtual DbSet<TmpPendapatanfartx> TmpPendapatanfartxes { get; set; }

    public virtual DbSet<TmpPendapatantx> TmpPendapatantxes { get; set; }

    public virtual DbSet<TmpPendapatantxBefore> TmpPendapatantxBefores { get; set; }

    public virtual DbSet<TmpPersonalInfo> TmpPersonalInfos { get; set; }

    public virtual DbSet<TmpPresc> TmpPrescs { get; set; }

    public virtual DbSet<TmpQuePoli> TmpQuePolis { get; set; }

    public virtual DbSet<TmpReOrderPo> TmpReOrderPos { get; set; }

    public virtual DbSet<TmpReg> TmpRegs { get; set; }

    public virtual DbSet<TmpRekapitulasiRekeningFarmasi> TmpRekapitulasiRekeningFarmasis { get; set; }

    public virtual DbSet<TmpRumusJasmed> TmpRumusJasmeds { get; set; }

    public virtual DbSet<TmpServiceRoom> TmpServiceRooms { get; set; }

    public virtual DbSet<TmpSupplier> TmpSuppliers { get; set; }

    public virtual DbSet<TmpTariffSusulan> TmpTariffSusulans { get; set; }

    public virtual DbSet<TmpTempDataKyw> TmpTempDataKyws { get; set; }

    public virtual DbSet<TmpTemptampungDataKurangMampu> TmpTemptampungDataKurangMampus { get; set; }

    public virtual DbSet<TmpTemptampungDataKurangMampuRekap> TmpTemptampungDataKurangMampuRekaps { get; set; }

    public virtual DbSet<TmpTemptampungDataPasien> TmpTemptampungDataPasiens { get; set; }

    public virtual DbSet<TmpTemptampungDataPasienRekap> TmpTemptampungDataPasienRekaps { get; set; }

    public virtual DbSet<TmpTranChargesPerShift> TmpTranChargesPerShifts { get; set; }

    public virtual DbSet<TmpTx> TmpTxes { get; set; }

    public virtual DbSet<Tmpregip> Tmpregips { get; set; }

    public virtual DbSet<TransCharge> TransCharges { get; set; }

    public virtual DbSet<TransChargesExtramuralItem> TransChargesExtramuralItems { get; set; }

    public virtual DbSet<TransChargesHistory> TransChargesHistories { get; set; }

    public virtual DbSet<TransChargesItem> TransChargesItems { get; set; }

    public virtual DbSet<TransChargesItemComp> TransChargesItemComps { get; set; }

    public virtual DbSet<TransChargesItemCompHistory> TransChargesItemCompHistories { get; set; }

    public virtual DbSet<TransChargesItemCompTempPaymentReturn> TransChargesItemCompTempPaymentReturns { get; set; }

    public virtual DbSet<TransChargesItemConsumption> TransChargesItemConsumptions { get; set; }

    public virtual DbSet<TransChargesItemFilmConsumption> TransChargesItemFilmConsumptions { get; set; }

    public virtual DbSet<TransChargesItemHistory> TransChargesItemHistories { get; set; }

    public virtual DbSet<TransChargesItemImage> TransChargesItemImages { get; set; }

    public virtual DbSet<TransChargesItemTempCoverage> TransChargesItemTempCoverages { get; set; }

    public virtual DbSet<TransChargesItemTempPaymentReturn> TransChargesItemTempPaymentReturns { get; set; }

    public virtual DbSet<TransChargesItemTemplate> TransChargesItemTemplates { get; set; }

    public virtual DbSet<TransChargesLaboratoryCritical> TransChargesLaboratoryCriticals { get; set; }

    public virtual DbSet<TransChargesTemplate> TransChargesTemplates { get; set; }

    public virtual DbSet<TransChargesVisiteItem> TransChargesVisiteItems { get; set; }

    public virtual DbSet<TransChargesVisiteItemRealization> TransChargesVisiteItemRealizations { get; set; }

    public virtual DbSet<TransDocumentBpjsclaim> TransDocumentBpjsclaims { get; set; }

    public virtual DbSet<TransPayment> TransPayments { get; set; }

    public virtual DbSet<TransPaymentAdditionalCharge> TransPaymentAdditionalCharges { get; set; }

    public virtual DbSet<TransPaymentCorrection> TransPaymentCorrections { get; set; }

    public virtual DbSet<TransPaymentItem> TransPaymentItems { get; set; }

    public virtual DbSet<TransPaymentItemCorrection> TransPaymentItemCorrections { get; set; }

    public virtual DbSet<TransPaymentItemIntermBill> TransPaymentItemIntermBills { get; set; }

    public virtual DbSet<TransPaymentItemIntermBillGuarantor> TransPaymentItemIntermBillGuarantors { get; set; }

    public virtual DbSet<TransPaymentItemOrder> TransPaymentItemOrders { get; set; }

    public virtual DbSet<TransPaymentItemVisite> TransPaymentItemVisites { get; set; }

    public virtual DbSet<TransPaymentPatient> TransPaymentPatients { get; set; }

    public virtual DbSet<TransPaymentPatientItem> TransPaymentPatientItems { get; set; }

    public virtual DbSet<TransPaymentReceipt> TransPaymentReceipts { get; set; }

    public virtual DbSet<TransPaymentReceiptItem> TransPaymentReceiptItems { get; set; }

    public virtual DbSet<TransPrescription> TransPrescriptions { get; set; }

    public virtual DbSet<TransPrescriptionFloorSeqNo> TransPrescriptionFloorSeqNos { get; set; }

    public virtual DbSet<TransPrescriptionHighAlert> TransPrescriptionHighAlerts { get; set; }

    public virtual DbSet<TransPrescriptionHistory> TransPrescriptionHistories { get; set; }

    public virtual DbSet<TransPrescriptionItem> TransPrescriptionItems { get; set; }

    public virtual DbSet<TransPrescriptionItemEtiquette> TransPrescriptionItemEtiquettes { get; set; }

    public virtual DbSet<TransPrescriptionItemHistory> TransPrescriptionItemHistories { get; set; }

    public virtual DbSet<TransPrescriptionItemTempCoverage> TransPrescriptionItemTempCoverages { get; set; }

    public virtual DbSet<TransPrescriptionItemTempPaymentReturn> TransPrescriptionItemTempPaymentReturns { get; set; }

    public virtual DbSet<TransPrescriptionItemTemplate> TransPrescriptionItemTemplates { get; set; }

    public virtual DbSet<TransPrescriptionItemUnitDose> TransPrescriptionItemUnitDoses { get; set; }

    public virtual DbSet<TransPrescriptionOrder> TransPrescriptionOrders { get; set; }

    public virtual DbSet<TransPrescriptionOrderDetail> TransPrescriptionOrderDetails { get; set; }

    public virtual DbSet<TransPrescriptionProgress> TransPrescriptionProgresses { get; set; }

    public virtual DbSet<TransPrescriptionReview> TransPrescriptionReviews { get; set; }

    public virtual DbSet<TransPrescriptionTemplate> TransPrescriptionTemplates { get; set; }

    public virtual DbSet<TransaksiBku> TransaksiBkus { get; set; }

    public virtual DbSet<TransaksiBkuDetail> TransaksiBkuDetails { get; set; }

    public virtual DbSet<TranspaymentUpdate> TranspaymentUpdates { get; set; }

    public virtual DbSet<TreatmentForAnimalBite> TreatmentForAnimalBites { get; set; }

    public virtual DbSet<UddItem> UddItems { get; set; }

    public virtual DbSet<UserHostPrinter> UserHostPrinters { get; set; }

    public virtual DbSet<UserHostPrinterOther> UserHostPrinterOthers { get; set; }

    public virtual DbSet<UserLog> UserLogs { get; set; }

    public virtual DbSet<UserProgramLog> UserProgramLogs { get; set; }

    public virtual DbSet<UserSessionDatum> UserSessionData { get; set; }

    public virtual DbSet<UserSessionSetting> UserSessionSettings { get; set; }

    public virtual DbSet<VDoktersoap> VDoktersoaps { get; set; }

    public virtual DbSet<VObatKosong> VObatKosongs { get; set; }

    public virtual DbSet<VRegistrationDisplayEmergencyTrk> VRegistrationDisplayEmergencyTrks { get; set; }

    public virtual DbSet<VRegistrationIgd> VRegistrationIgds { get; set; }

    public virtual DbSet<VRegkendalabyarot> VRegkendalabyarots { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleDriver> VehicleDrivers { get; set; }

    public virtual DbSet<VehicleTransaction> VehicleTransactions { get; set; }

    public virtual DbSet<VewKetersediaanBedDinke> VewKetersediaanBedDinkes { get; set; }

    public virtual DbSet<VewKetersediaanBedMobileJkn> VewKetersediaanBedMobileJkns { get; set; }

    public virtual DbSet<VirtualHostServer> VirtualHostServers { get; set; }

    public virtual DbSet<VisitSchedule> VisitSchedules { get; set; }

    public virtual DbSet<VisitScheduleDetail> VisitScheduleDetails { get; set; }

    public virtual DbSet<VisitType> VisitTypes { get; set; }

    public virtual DbSet<VisitsPerServiceUnitPerPeriod> VisitsPerServiceUnitPerPeriods { get; set; }

    public virtual DbSet<VitalSign> VitalSigns { get; set; }

    public virtual DbSet<VitalSignEwsLevel> VitalSignEwsLevels { get; set; }

    public virtual DbSet<VitalSignews> VitalSignEws { get; set; }

    public virtual DbSet<VmconfigDatum> VmconfigData { get; set; }

    public virtual DbSet<Vmstatistic> Vmstatistics { get; set; }

    public virtual DbSet<VwAppointment> VwAppointments { get; set; }

    public virtual DbSet<VwClosedRegistration> VwClosedRegistrations { get; set; }

    public virtual DbSet<VwEmployeeTable> VwEmployeeTables { get; set; }

    public virtual DbSet<VwGetLatestItemPorPrice> VwGetLatestItemPorPrices { get; set; }

    public virtual DbSet<VwHasilLabMobileSysmex> VwHasilLabMobileSysmexes { get; set; }

    public virtual DbSet<VwHasilPasien> VwHasilPasiens { get; set; }

    public virtual DbSet<VwHasilPasienVanslab> VwHasilPasienVanslabs { get; set; }

    public virtual DbSet<VwHistoryAppointment> VwHistoryAppointments { get; set; }

    public virtual DbSet<VwHistoryRegistration> VwHistoryRegistrations { get; set; }

    public virtual DbSet<VwHl7messageParameter> VwHl7messageParameters { get; set; }

    public virtual DbSet<VwItemAncillary> VwItemAncillaries { get; set; }

    public virtual DbSet<VwItemAssetUtilization> VwItemAssetUtilizations { get; set; }

    public virtual DbSet<VwItemProductMedicNonMedic> VwItemProductMedicNonMedics { get; set; }

    public virtual DbSet<VwItemProductSalesAvailable> VwItemProductSalesAvailables { get; set; }

    public virtual DbSet<VwItemServiceAndProductWithAdminCalculation> VwItemServiceAndProductWithAdminCalculations { get; set; }

    public virtual DbSet<VwItemServicesRlReport> VwItemServicesRlReports { get; set; }

    public virtual DbSet<VwItemTariffComponent> VwItemTariffComponents { get; set; }

    public virtual DbSet<VwItemTariffComponentClass> VwItemTariffComponentClasses { get; set; }

    public virtual DbSet<VwItemTransactionItemPrDrFromWo> VwItemTransactionItemPrDrFromWos { get; set; }

    public virtual DbSet<VwItemWithAdminCalculation> VwItemWithAdminCalculations { get; set; }

    public virtual DbSet<VwItemsAlreadyUsed> VwItemsAlreadyUseds { get; set; }

    public virtual DbSet<VwListDataSatuSehat> VwListDataSatuSehats { get; set; }

    public virtual DbSet<VwMergeBillingInpatient> VwMergeBillingInpatients { get; set; }

    public virtual DbSet<VwMinmaxStock> VwMinmaxStocks { get; set; }

    public virtual DbSet<VwMr> VwMrs { get; set; }

    public virtual DbSet<VwParamedicFeeDeduction> VwParamedicFeeDeductions { get; set; }

    public virtual DbSet<VwParamedicLeaveDate> VwParamedicLeaveDates { get; set; }

    public virtual DbSet<VwPatient> VwPatients { get; set; }

    public virtual DbSet<VwPatientMerge> VwPatientMerges { get; set; }

    public virtual DbSet<VwPatientsPaidOff> VwPatientsPaidOffs { get; set; }

    public virtual DbSet<VwPelangganBku> VwPelangganBkus { get; set; }

    public virtual DbSet<VwPrescriptionSale> VwPrescriptionSales { get; set; }

    public virtual DbSet<VwRegistrasi> VwRegistrasis { get; set; }

    public virtual DbSet<VwRegistration> VwRegistrations { get; set; }

    public virtual DbSet<VwRegistrationAllpatient> VwRegistrationAllpatients { get; set; }

    public virtual DbSet<VwRegistrationForMappingCoa> VwRegistrationForMappingCoas { get; set; }

    public virtual DbSet<VwRegistrationGuarantorCob> VwRegistrationGuarantorCobs { get; set; }

    public virtual DbSet<VwRegistrationInpatient> VwRegistrationInpatients { get; set; }

    public virtual DbSet<VwRegistrationKaryawan> VwRegistrationKaryawans { get; set; }

    public virtual DbSet<VwRegistrationOutpatient> VwRegistrationOutpatients { get; set; }

    public virtual DbSet<VwRegistrationque> VwRegistrationques { get; set; }

    public virtual DbSet<VwRegistrationqueoption> VwRegistrationqueoptions { get; set; }

    public virtual DbSet<VwServiceUnitBooking> VwServiceUnitBookings { get; set; }

    public virtual DbSet<VwSpGetNilaiPersediaanAkhirFromMutasiStock> VwSpGetNilaiPersediaanAkhirFromMutasiStocks { get; set; }

    public virtual DbSet<VwSpMutasiStokFixed> VwSpMutasiStokFixeds { get; set; }

    public virtual DbSet<VwTransChargesItemCompParamedic> VwTransChargesItemCompParamedics { get; set; }

    public virtual DbSet<VwTransChargesItemIsOrderOutstanding> VwTransChargesItemIsOrderOutstandings { get; set; }

    public virtual DbSet<VwTransChargesItemNoCorrection> VwTransChargesItemNoCorrections { get; set; }

    public virtual DbSet<VwTransChargesItemPaymentType> VwTransChargesItemPaymentTypes { get; set; }

    public virtual DbSet<VwTransChargesNoCorrection> VwTransChargesNoCorrections { get; set; }

    public virtual DbSet<VwTransPaymentItemCorrectionWithStatus> VwTransPaymentItemCorrectionWithStatuses { get; set; }

    public virtual DbSet<VwTransPaymentItemOrderAll> VwTransPaymentItemOrderAlls { get; set; }

    public virtual DbSet<VwTransPaymentItemOrderReturn> VwTransPaymentItemOrderReturns { get; set; }

    public virtual DbSet<VwTransPrescriptionFromSoap> VwTransPrescriptionFromSoaps { get; set; }

    public virtual DbSet<VwTransaction> VwTransactions { get; set; }

    public virtual DbSet<VwTransactionItem> VwTransactionItems { get; set; }

    public virtual DbSet<VwTransactionItemMerge> VwTransactionItemMerges { get; set; }

    public virtual DbSet<WageBase> WageBases { get; set; }

    public virtual DbSet<WageStructureAndScale> WageStructureAndScales { get; set; }

    public virtual DbSet<WageStructureAndScaleItem> WageStructureAndScaleItems { get; set; }

    public virtual DbSet<WageTransaction> WageTransactions { get; set; }

    public virtual DbSet<WageTransactionItem> WageTransactionItems { get; set; }

    public virtual DbSet<WaitCategory> WaitCategories { get; set; }

    public virtual DbSet<WaitStatistic> WaitStatistics { get; set; }

    public virtual DbSet<WaitStatisticsDetail> WaitStatisticsDetails { get; set; }

    public virtual DbSet<WaitType> WaitTypes { get; set; }

    public virtual DbSet<WebFramework> WebFrameworks { get; set; }

    public virtual DbSet<WebServiceAccessKey> WebServiceAccessKeys { get; set; }

    public virtual DbSet<WebServiceApilog> WebServiceApilogs { get; set; }

    public virtual DbSet<WhatsappMessage> WhatsappMessages { get; set; }

    public virtual DbSet<Wilayah> Wilayahs { get; set; }

    public virtual DbSet<WilayahRefDinke> WilayahRefDinkes { get; set; }

    public virtual DbSet<WorkingHour> WorkingHours { get; set; }

    public virtual DbSet<WorkingHourOrganizationUnit> WorkingHourOrganizationUnits { get; set; }

    public virtual DbSet<WorkingSchduleIntervention> WorkingSchduleInterventions { get; set; }

    public virtual DbSet<WorkingSchduleInterventionDetail> WorkingSchduleInterventionDetails { get; set; }

    public virtual DbSet<WorkingSchedule> WorkingSchedules { get; set; }

    public virtual DbSet<WorkingScheduleDetail> WorkingScheduleDetails { get; set; }

    public virtual DbSet<XemapKey> XemapKeys { get; set; }

    public virtual DbSet<ZatActive> ZatActives { get; set; }

    public virtual DbSet<ZatActiveInteraction> ZatActiveInteractions { get; set; }

    public virtual DbSet<ZipCode> ZipCodes { get; set; }

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //    => optionsBuilder.UseSqlServer("Name=ConnectionStrings:DefaultConnection");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AbRestriction>(entity =>
        {
            entity.ToTable("AbRestriction");

            entity.Property(e => e.AbRestrictionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AbRestrictionID");
            entity.Property(e => e.AbRestrictionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentID");
            entity.Property(e => e.SrabRestrictionType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SRAbRestrictionType");
        });

        modelBuilder.Entity<AbRestrictionItem>(entity =>
        {
            entity.HasKey(e => new { e.AbRestrictionId, e.AbLevel, e.ZatActiveId });

            entity.ToTable("AbRestrictionItem");

            entity.Property(e => e.AbRestrictionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AbRestrictionID");
            entity.Property(e => e.ZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZatActiveID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AbRestrictionSuggestion>(entity =>
        {
            entity.HasKey(e => new { e.AbRestrictionId, e.AbLevel });

            entity.ToTable("AbRestrictionSuggestion");

            entity.Property(e => e.AbRestrictionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AbRestrictionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SuggestionNote)
                .HasMaxLength(8000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AbsentCode>(entity =>
        {
            entity.ToTable("AbsentCode");

            entity.Property(e => e.AbsentCodeId).HasColumnName("AbsentCodeID");
            entity.Property(e => e.AbsentCode1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AbsentCode");
            entity.Property(e => e.AbsentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrcodeClasification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCodeClasification");
            entity.Property(e => e.SrmanagementType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRManagementType");
        });

        modelBuilder.Entity<ActiveWaitStatistic>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.StatementUtcstartTime, "IXActiveWaitStatistics").IsClustered();

            entity.HasIndex(e => new { e.SqlserverId, e.Msticks }, "IXActiveWaitStatisticsMSTicks");

            entity.Property(e => e.ActiveWaitId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ActiveWaitID");
            entity.Property(e => e.ApplicationNameId).HasColumnName("ApplicationNameID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.HostNameId).HasColumnName("HostNameID");
            entity.Property(e => e.LoginNameId).HasColumnName("LoginNameID");
            entity.Property(e => e.Msticks).HasColumnName("MSTicks");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");
            entity.Property(e => e.StatementLocalStartTime).HasColumnType("datetime");
            entity.Property(e => e.StatementUtcstartTime)
                .HasColumnType("datetime")
                .HasColumnName("StatementUTCStartTime");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.WaitTypeId).HasColumnName("WaitTypeID");

            entity.HasOne(d => d.ApplicationName).WithMany()
                .HasForeignKey(d => d.ApplicationNameId)
                .HasConstraintName("FKActiveWaitStatisticsApplicationNames");

            entity.HasOne(d => d.Database).WithMany()
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKActiveWaitStatisticsSQLServerDatabaseNames");

            entity.HasOne(d => d.HostName).WithMany()
                .HasForeignKey(d => d.HostNameId)
                .HasConstraintName("FKActiveWaitStatisticsHostNames");

            entity.HasOne(d => d.LoginName).WithMany()
                .HasForeignKey(d => d.LoginNameId)
                .HasConstraintName("FKActiveWaitStatisticsLoginNames");

            entity.HasOne(d => d.Sqlserver).WithMany()
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKActiveWaitStatisticsMonitoredSQLServers");

            entity.HasOne(d => d.Sqlstatement).WithMany()
                .HasForeignKey(d => d.SqlstatementId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActiveWaitStatisticsSQLStatements");

            entity.HasOne(d => d.WaitType).WithMany()
                .HasForeignKey(d => d.WaitTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKActiveWaitStatisticsWaitTypes");
        });

        modelBuilder.Entity<AddMealOrder>(entity =>
        {
            entity.HasKey(e => e.OrderNo);

            entity.ToTable("AddMealOrder");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
            entity.Property(e => e.MenuItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MenuItemID");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.SeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.VersionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VersionID");
        });

        modelBuilder.Entity<AddMealOrderItem>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.FoodId });

            entity.ToTable("AddMealOrderItem");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AddMealOrderItemDetail>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.FoodId });

            entity.ToTable("AddMealOrderItemDetail");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AdmDischargemon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("adm_dischargemon");

            entity.HasIndex(e => e.RegistrationNo, "IX_adm_dischargemon_RegistrationNo");

            entity.Property(e => e.CasemixdateAnalisis)
                .HasColumnType("datetime")
                .HasColumnName("casemixdate_analisis");
            entity.Property(e => e.Codedangroup)
                .HasColumnType("datetime")
                .HasColumnName("codedangroup");
            entity.Property(e => e.Diagnosa)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("diagnosa");
            entity.Property(e => e.MbdateKlaim)
                .HasColumnType("datetime")
                .HasColumnName("mbdate_klaim");
            entity.Property(e => e.MppdateResume)
                .HasColumnType("datetime")
                .HasColumnName("mppdate_resume");
            entity.Property(e => e.MppdateStg)
                .HasColumnType("datetime")
                .HasColumnName("mppdate_stg");
            entity.Property(e => e.Mpptopenrek)
                .HasColumnType("datetime")
                .HasColumnName("mpptopenrek");
            entity.Property(e => e.Numcodgroup).HasColumnName("numcodgroup");
            entity.Property(e => e.PenrekdateLengkap)
                .HasColumnType("datetime")
                .HasColumnName("penrekdate_lengkap");
            entity.Property(e => e.PenrekdateTdklengkap)
                .HasColumnType("datetime")
                .HasColumnName("penrekdate_tdklengkap");
            entity.Property(e => e.Penrektocasemix)
                .HasColumnType("datetime")
                .HasColumnName("penrektocasemix");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Vutmobda)
                .HasColumnType("datetime")
                .HasColumnName("vutmobda");
        });

        modelBuilder.Entity<AdmKendalabayar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("adm_kendalabayar");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TlKabagkeu)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("tl_kabagkeu");
            entity.Property(e => e.TlMobda)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("tl_mobda");
            entity.Property(e => e.TlPendaftaranIgd)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("tl_pendaftaranIGD");
            entity.Property(e => e.TlWadirkum)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("tl_wadirkum");
            entity.Property(e => e.TlWadiryan)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("tl_wadiryan");
        });

        modelBuilder.Entity<AdvanceFilteringAlert>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AdvanceFilteringAlert");

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.ServerName).HasMaxLength(256);
            entity.Property(e => e.ThresholdType).IsUnicode(false);
        });

        modelBuilder.Entity<AdvertisedPersonnelRequisition>(entity =>
        {
            entity.ToTable("AdvertisedPersonnelRequisition");

            entity.Property(e => e.AdvertisedPersonnelRequisitionId).HasColumnName("AdvertisedPersonnelRequisitionID");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.EstimatedSalary).HasColumnType("money");
            entity.Property(e => e.JobDescription)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.JobOpportunityId).HasColumnName("JobOpportunityID");
            entity.Property(e => e.JobSpecification)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaximumEstimatedSalary).HasColumnType("money");
            entity.Property(e => e.MinimumEstimatedSalary).HasColumnType("money");
            entity.Property(e => e.PersonnelRequisitionId).HasColumnName("PersonnelRequisitionID");
        });

        modelBuilder.Entity<Alert>(entity =>
        {
            entity.HasIndex(e => new { e.ServerName, e.UtcoccurrenceDateTime, e.Active }, "IXAlerts2").IsDescending(false, true, false);

            entity.HasIndex(e => new { e.UtcoccurrenceDateTime, e.ServerName, e.Severity }, "IXAlerts4").IsDescending(true, false, false);

            entity.HasIndex(e => new { e.ServerName, e.UtcoccurrenceDateTime }, "IXAlerts5");

            entity.HasIndex(e => new { e.Metric, e.UtcoccurrenceDateTime, e.ServerName }, "IX_Alerts_Metric_UTCOccurrenceDateTime");

            entity.HasIndex(e => new { e.ServerName, e.Metric, e.Severity, e.UtcoccurrenceDateTime }, "IX_Alerts_PredictiveTrainingIndex");

            entity.HasIndex(e => new { e.ServerName, e.Metric, e.UtcoccurrenceDateTime, e.AlertId }, "IX_Alerts_ViewSupport");

            entity.Property(e => e.AlertId).HasColumnName("AlertID");
            entity.Property(e => e.DatabaseName).HasMaxLength(255);
            entity.Property(e => e.Heading).HasMaxLength(256);
            entity.Property(e => e.Message).HasMaxLength(2048);
            entity.Property(e => e.QualifierHash).HasMaxLength(28);
            entity.Property(e => e.ServerName).HasMaxLength(256);
            entity.Property(e => e.TableName).HasMaxLength(255);
            entity.Property(e => e.UtcoccurrenceDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCOccurrenceDateTime");

            entity.HasOne(d => d.ServerNameNavigation).WithMany(p => p.Alerts)
                .HasPrincipalKey(p => p.InstanceName)
                .HasForeignKey(d => d.ServerName)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AlertsMonitoredSQLServers");
        });

        modelBuilder.Entity<AlertInstanceTemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AlertInstanceTemplate");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
        });

        modelBuilder.Entity<AlertTemplateLookup>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PKAlertTemplateLookup");

            entity.ToTable("AlertTemplateLookup");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.Default).HasDefaultValue(true);
            entity.Property(e => e.Description).HasMaxLength(1024);
            entity.Property(e => e.Name)
                .HasMaxLength(256)
                .HasDefaultValue("Default");
        });

        modelBuilder.Entity<AlertsAdvanceFilter>(entity =>
        {
            entity.HasKey(e => e.FilterName).HasName("PK__AlertsAd__E040BCF8EF47DD04");

            entity.ToTable("AlertsAdvanceFilter");

            entity.Property(e => e.FilterName).HasMaxLength(100);
        });

        modelBuilder.Entity<AllSqlsignature>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllSQLSignatures");

            entity.Property(e => e.Sqlsignature).HasColumnName("SQLSignature");
            entity.Property(e => e.SqlsignatureHash)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SQLSignatureHash");
            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.SqlstatementExample).HasColumnName("SQLStatementExample");
        });

        modelBuilder.Entity<AllSqlstatement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllSQLStatements");

            entity.Property(e => e.Sqlstatement).HasColumnName("SQLStatement");
            entity.Property(e => e.SqlstatementHash)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SQLStatementHash");
            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");
        });

        modelBuilder.Entity<AlwaysOnAvailabilityGroup>(entity =>
        {
            entity.HasKey(e => e.GroupTopologyId);

            entity.Property(e => e.Delete).HasDefaultValue(true);
            entity.Property(e => e.GroupName).HasMaxLength(128);
            entity.Property(e => e.ListenerDnsName).HasMaxLength(63);
            entity.Property(e => e.ListenerIpAddress).HasMaxLength(48);
            entity.Property(e => e.ServerSourceName).HasMaxLength(128);
        });

        modelBuilder.Entity<AlwaysOnDatabase>(entity =>
        {
            entity.HasKey(e => e.AlwaysOnDatabasesId);

            entity.Property(e => e.AlwaysOnDatabasesId).HasColumnName("AlwaysOnDatabasesID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.Delete).HasDefaultValue(true);
            entity.Property(e => e.ServerSourceName).HasMaxLength(128);
        });

        modelBuilder.Entity<AlwaysOnReplica>(entity =>
        {
            entity.HasKey(e => e.ReplicaTopologyId);

            entity.Property(e => e.Delete).HasDefaultValue(true);
            entity.Property(e => e.ReplicaName).HasMaxLength(256);
            entity.Property(e => e.ServerSourceName).HasMaxLength(128);
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.AlwaysOnReplicas)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("fk_AlwaysOnReplicasForServerID");
        });

        modelBuilder.Entity<AlwaysOnStatistic>(entity =>
        {
            entity.HasKey(e => e.AlwaysOnStatisticsId);

            entity.Property(e => e.AlwaysOnStatisticsId).HasColumnName("AlwaysOnStatisticsID");
            entity.Property(e => e.LastConnectErrorDescription).HasMaxLength(1024);
            entity.Property(e => e.LastConnectErrorTimestamp).HasColumnType("datetime");
            entity.Property(e => e.LastHardenedTime).HasColumnType("datetime");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
        });

        modelBuilder.Entity<AnalysisConfigBlockedDatabase>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AnalysisConfigurationId).HasColumnName("AnalysisConfigurationID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");

            entity.HasOne(d => d.AnalysisConfiguration).WithMany()
                .HasForeignKey(d => d.AnalysisConfigurationId)
                .HasConstraintName("fk_AnalysisConfigurationIDForDB");

            entity.HasOne(d => d.Database).WithMany()
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("fk_DatabaseID");
        });

        modelBuilder.Entity<AnalysisConfigBlockedRecommendation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AnalysisConfigBlockedRecommendation");

            entity.Property(e => e.AnalysisConfigurationId).HasColumnName("AnalysisConfigurationID");
            entity.Property(e => e.RecommendationId)
                .HasMaxLength(10)
                .HasColumnName("RecommendationID");

            entity.HasOne(d => d.AnalysisConfiguration).WithMany()
                .HasForeignKey(d => d.AnalysisConfigurationId)
                .HasConstraintName("fk_AnalysisConfigurationIDForRecommendation");

            entity.HasOne(d => d.Recommendation).WithMany()
                .HasForeignKey(d => d.RecommendationId)
                .HasConstraintName("fk_RecommendationIDForAnalysisConfigBlockedRecommendation");
        });

        modelBuilder.Entity<AnalysisConfigCategory>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AnalysisConfigurationId).HasColumnName("AnalysisConfigurationID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

            entity.HasOne(d => d.AnalysisConfiguration).WithMany()
                .HasForeignKey(d => d.AnalysisConfigurationId)
                .HasConstraintName("fk_AnalysisConfigurationIDForCategory");

            entity.HasOne(d => d.Category).WithMany()
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("fk_PrescriptiveRecommendationCategoryID");
        });

        modelBuilder.Entity<AnalysisConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ID");

            entity.ToTable("AnalysisConfiguration");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MonitoredServerId).HasColumnName("MonitoredServerID");
            entity.Property(e => e.Oltp).HasColumnName("OLTP");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AnalysisDocument>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("AnalysisDocument");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FilesAcceptanceDate).HasColumnType("datetime");
            entity.Property(e => e.FilesReceiveDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrcompleteStatusRm)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCompleteStatusRM");
            entity.Property(e => e.SrfilesAnalysis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFilesAnalysis");
        });

        modelBuilder.Entity<AnalysisDocumentItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.DocumentFilesId });

            entity.ToTable("AnalysisDocumentItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DocumentFilesId).HasColumnName("DocumentFilesID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AntrianOnlineBpj>(entity =>
        {
            entity.HasKey(e => e.TanggalAntrian).HasName("PK__AntrianO__188D101542CA91F6");

            entity.Property(e => e.TanggalAntrian)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApdSurvey>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("ApdSurvey");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.DivisionId).HasColumnName("DivisionID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ObserverId).HasColumnName("ObserverID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SubDivisionId).HasColumnName("SubDivisionID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ApdSurveyItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SrapdType });

            entity.ToTable("ApdSurveyItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrapdType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRApdType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppAutoNumber>(entity =>
        {
            entity.HasKey(e => new { e.SrautoNumber, e.EffectiveDate });

            entity.ToTable("AppAutoNumber");

            entity.Property(e => e.SrautoNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRAutoNumber");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NumberFormat)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NumberGroupSeparator)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Prefik)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SeparatorAfterDay)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeparatorAfterDept)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeparatorAfterMonth)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeparatorAfterNumber)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeparatorAfterPrefik)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeparatorAfterYear)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppAutoNumberLast>(entity =>
        {
            entity.HasKey(e => new { e.SrautoNumber, e.EffectiveDate, e.DepartmentInitial, e.YearNo, e.MonthNo, e.DayNo });

            entity.ToTable("AppAutoNumberLast");

            entity.Property(e => e.SrautoNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRAutoNumber");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.DepartmentInitial)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastCompleteNumber)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppAutoNumberTransactionCode>(entity =>
        {
            entity.HasKey(e => e.SrtransactionCode).HasName("PK_AppAutoNumberTransactionCode_1");

            entity.ToTable("AppAutoNumberTransactionCode");

            entity.Property(e => e.SrtransactionCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTransactionCode");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrautoNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRAutoNumber");
        });

        modelBuilder.Entity<AppControl>(entity =>
        {
            entity.HasKey(e => e.ControlId);

            entity.ToTable("AppControl");

            entity.Property(e => e.ControlId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ControlID");
            entity.Property(e => e.ControlType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ControlUrl)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppControlEntryMatrix>(entity =>
        {
            entity.HasKey(e => new { e.HealthcareInitialAppsVersion, e.EntryType, e.ControlId });

            entity.ToTable("AppControlEntryMatrix");

            entity.Property(e => e.HealthcareInitialAppsVersion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EntryType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ControlId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ControlID");
            entity.Property(e => e.ReferenceValue)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppMessage>(entity =>
        {
            entity.HasKey(e => e.MessageId);

            entity.ToTable("AppMessage");

            entity.Property(e => e.MessageId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MessageID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MessageText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MessageTextCustom)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppParameter>(entity =>
        {
            entity.HasKey(e => e.ParameterId).HasName("PK_appParameter");

            entity.ToTable("AppParameter");

            entity.Property(e => e.ParameterId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ParameterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ParameterName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ParameterType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParameterValue)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppProgram>(entity =>
        {
            entity.HasKey(e => e.ProgramId).HasName("PK_appProgram");

            entity.ToTable("AppProgram");

            entity.HasIndex(e => e.ApplicationId, "_idx_AppID");

            entity.HasIndex(e => new { e.IsProgram, e.IsVisible }, "_idx_IsProg_IsVis");

            entity.HasIndex(e => e.ParentProgramId, "_idx_ParentID");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ProgramID");
            entity.Property(e => e.AccessKey)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApplicationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.AssemblyClassName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AssemblyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HelpLinkId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("HelpLinkID");
            entity.Property(e => e.IsBeginGroup).HasDefaultValue(false);
            entity.Property(e => e.IsParentProgram).HasDefaultValue(false);
            entity.Property(e => e.IsProgram).HasDefaultValue(true);
            entity.Property(e => e.IsVisible).HasDefaultValue(false);
            entity.Property(e => e.NavigateUrl)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParentProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ParentProgramID");
            entity.Property(e => e.ProgramName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ProgramType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrprogramCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRProgramCategory");
            entity.Property(e => e.StoreProcedureName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TopLevelProgramId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TopLevelProgramID");
            entity.Property(e => e.ZplCommandTemplate).IsUnicode(false);
        });

        modelBuilder.Entity<AppProgramEsign>(entity =>
        {
            entity.HasKey(e => e.ProgramId);

            entity.ToTable("AppProgramEsign");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.Page)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TagCoordinate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UrlRootHist)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Xaxis).HasColumnName("XAxis");
            entity.Property(e => e.Yaxis).HasColumnName("YAxis");
        });

        modelBuilder.Entity<AppProgramHealthcare>(entity =>
        {
            entity.HasKey(e => new { e.ProgramId, e.HealthcareInitial });

            entity.ToTable("AppProgramHealthcare");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ProgramID");
            entity.Property(e => e.HealthcareInitial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AssemblyClassName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AssemblyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.HelpLinkId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("HelpLinkID");
            entity.Property(e => e.NavigateUrl)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ProgramType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StoreProcedureName).IsUnicode(false);
        });

        modelBuilder.Entity<AppProgramRelated>(entity =>
        {
            entity.HasKey(e => new { e.ProgramId, e.RelatedProgramId, e.ReferenceId }).HasName("PK_AppProgramReport");

            entity.ToTable("AppProgramRelated");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ProgramID");
            entity.Property(e => e.RelatedProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("RelatedProgramID");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
        });

        modelBuilder.Entity<AppProgramSignature>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ProgramId });

            entity.ToTable("AppProgramSignature");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Signature)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppReportParameter>(entity =>
        {
            entity.HasKey(e => new { e.ProgramId, e.ParameterName });

            entity.ToTable("AppReportParameter");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.ParameterName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParameterCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReportControlName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppReportParameterHealthcare>(entity =>
        {
            entity.HasKey(e => new { e.ProgramId, e.HealthcareInitial, e.ParameterName });

            entity.ToTable("AppReportParameterHealthcare");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.HealthcareInitial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ParameterName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParameterCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReportControlName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppReportPivot>(entity =>
        {
            entity.HasKey(e => new { e.ProgramId, e.CustomPivotId, e.FieldCaption }).HasName("PK_AppReportPivot_1");

            entity.ToTable("AppReportPivot");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.CustomPivotId).HasColumnName("CustomPivotID");
            entity.Property(e => e.FieldCaption)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FieldName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormatString)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FormatType).HasDefaultValue(0);
            entity.Property(e => e.GroupInterval).HasDefaultValue(0);
            entity.Property(e => e.SummaryType).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<AppSrassessmentType>(entity =>
        {
            entity.HasKey(e => e.SrassessmentType);

            entity.ToTable("AppSRAssessmentType");

            entity.Property(e => e.SrassessmentType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRAssessmentType");
            entity.Property(e => e.ContinuedSrassessmentType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ContinuedSRAssessmentType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingQuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NursingQuestionFormID");
            entity.Property(e => e.ReportProgramId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReportProgramID");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
        });

        modelBuilder.Entity<AppStandardReference>(entity =>
        {
            entity.HasKey(e => e.StandardReferenceId);

            entity.ToTable("AppStandardReference");

            entity.Property(e => e.StandardReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("StandardReferenceID");
            entity.Property(e => e.HasCoa).HasColumnName("HasCOA");
            entity.Property(e => e.IsUsedBySystem).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.StandardReferenceGroup)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StandardReferenceName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppStandardReferenceItem>(entity =>
        {
            entity.HasKey(e => new { e.StandardReferenceId, e.ItemId }).HasName("PK_appStandardReferenceItem");

            entity.ToTable("AppStandardReferenceItem");

            entity.HasIndex(e => e.ItemId, "IX_AppStandardReferenceItem_ItemID");

            entity.HasIndex(e => e.StandardReferenceId, "_dta_index_AppStandardReferenceItem_13_219147826__K1");

            entity.HasIndex(e => new { e.StandardReferenceId, e.ItemId }, "_dta_index_AppStandardReferenceItem_13_219147826__K1_K2");

            entity.Property(e => e.StandardReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("StandardReferenceID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.CoaId).HasColumnName("coaID");
            entity.Property(e => e.CustomField)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.CustomField2)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.IsUsedBySystem).HasDefaultValue(true);
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.NumericValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.SubledgerId).HasColumnName("subledgerID");
        });

        modelBuilder.Entity<AppUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_appUser");

            entity.ToTable("AppUser");

            entity.HasIndex(e => e.ParamedicId, "_idx_parid");

            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ActiveDate).HasColumnType("datetime");
            entity.Property(e => e.CashManagementNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EsignNik)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESignNik");
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.LastCounterName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastLogin).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LicenseNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Password)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.PasswordMd5)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SignatureImage).HasColumnType("image");
            entity.Property(e => e.Srlanguage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("id-ID")
                .HasColumnName("SRLanguage");
            entity.Property(e => e.SruserType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRUserType");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppUserCustomPivot>(entity =>
        {
            entity.HasKey(e => new { e.ProgramId, e.CustomPivotId });

            entity.ToTable("AppUserCustomPivot");

            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.CustomPivotId).HasColumnName("CustomPivotID");
            entity.Property(e => e.CustomPivotName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SummaryType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<AppUserGroup>(entity =>
        {
            entity.HasKey(e => e.UserGroupId).HasName("PK_appUserGroup");

            entity.ToTable("AppUserGroup");

            entity.Property(e => e.UserGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UserGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UserGroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppUserGroupProgram>(entity =>
        {
            entity.HasKey(e => new { e.UserGroupId, e.ProgramId }).HasName("PK_appUserGroupProgram");

            entity.ToTable("AppUserGroupProgram");

            entity.HasIndex(e => e.ProgramId, "IX_AppUserGroupProgram_ProgramID");

            entity.Property(e => e.UserGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UserGroupID");
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppUserServiceUnit>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ServiceUnitId });

            entity.ToTable("AppUserServiceUnit");

            entity.HasIndex(e => new { e.ServiceUnitId, e.UserId }, "_dta_index_AppUserServiceUnit_5_57871373__K2_K1");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppUserSetting>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_AppUserSettings_UserID");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.QueueingCounterSetting).IsUnicode(false);
        });

        modelBuilder.Entity<AppUserUserGroup>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.UserGroupId }).HasName("PK_appUserUserGroup");

            entity.ToTable("AppUserUserGroup");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.UserGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ApplicantAppliedPosition>(entity =>
        {
            entity.HasKey(e => e.ApplicantAppliedPositionsId);

            entity.Property(e => e.ApplicantAppliedPositionsId).HasColumnName("ApplicantAppliedPositionsID");
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
        });

        modelBuilder.Entity<ApplicantContact>(entity =>
        {
            entity.ToTable("ApplicantContact");

            entity.Property(e => e.ApplicantContactId).HasColumnName("ApplicantContactID");
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.ContactValue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrcontactType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRContactType");
        });

        modelBuilder.Entity<ApplicantEducationHistory>(entity =>
        {
            entity.ToTable("ApplicantEducationHistory");

            entity.Property(e => e.ApplicantEducationHistoryId).HasColumnName("ApplicantEducationHistoryID");
            entity.Property(e => e.Achievement)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.EndYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gpa).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.InstitutionName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.StartYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ApplicantFamily>(entity =>
        {
            entity.ToTable("ApplicantFamily");

            entity.Property(e => e.ApplicantFamilyId).HasColumnName("ApplicantFamilyID");
            entity.Property(e => e.Address)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.DateBirth).HasColumnType("datetime");
            entity.Property(e => e.FamilyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SrfamilyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFamilyRelation");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
        });

        modelBuilder.Entity<ApplicantInfo>(entity =>
        {
            entity.HasKey(e => e.ApplicantId);

            entity.ToTable("ApplicantInfo");

            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.DateApplied).HasColumnType("datetime");
            entity.Property(e => e.DateAvailable).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.JobOpportunityReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Ktpno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("KTPNo");
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Picture)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PlaceBirth)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.SendRejectionDate).HasColumnType("datetime");
            entity.Property(e => e.SrapplicantSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRApplicantSource");
            entity.Property(e => e.SrapplicantStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRApplicantStatus");
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.Srcity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCity");
            entity.Property(e => e.SrcurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRCurrencyCode");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.Srstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRState");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApplicantLicence>(entity =>
        {
            entity.ToTable("ApplicantLicence");

            entity.Property(e => e.ApplicantLicenceId).HasColumnName("ApplicantLicenceID");
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SrlicenceType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLicenceType");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<ApplicantPhysical>(entity =>
        {
            entity.ToTable("ApplicantPhysical");

            entity.Property(e => e.ApplicantPhysicalId).HasColumnName("ApplicantPhysicalID");
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PhysicalValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmeasurementCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMeasurementCode");
            entity.Property(e => e.SrphysicalCharacteristic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicalCharacteristic");
        });

        modelBuilder.Entity<ApplicantPsychological>(entity =>
        {
            entity.ToTable("ApplicantPsychological");

            entity.Property(e => e.ApplicantPsychologicalId).HasColumnName("ApplicantPsychologicalID");
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PsychologicalValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SroperandType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROperandType");
            entity.Property(e => e.Srpsychological)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPsychological");
        });

        modelBuilder.Entity<ApplicantReference>(entity =>
        {
            entity.HasKey(e => e.ApplicantReferencesId);

            entity.Property(e => e.ApplicantReferencesId).HasColumnName("ApplicantReferencesID");
            entity.Property(e => e.Address)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferencesName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApplicantWorkExperience>(entity =>
        {
            entity.ToTable("ApplicantWorkExperience");

            entity.Property(e => e.ApplicantWorkExperienceId).HasColumnName("ApplicantWorkExperienceID");
            entity.Property(e => e.ApplicantId).HasColumnName("ApplicantID");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Division)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.JobDesc)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastSalary).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReasonOfLeaving).HasColumnType("text");
            entity.Property(e => e.SrlineBisnis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLineBisnis");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.SupervisorName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApplicationName>(entity =>
        {
            entity.HasKey(e => e.ApplicationNameId).HasName("PKApplicationNames");

            entity.HasIndex(e => e.ApplicationName1, "UKApplicationName").IsUnique();

            entity.Property(e => e.ApplicationNameId).HasColumnName("ApplicationNameID");
            entity.Property(e => e.ApplicationName1)
                .HasMaxLength(256)
                .HasColumnName("ApplicationName");
        });

        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentNo).IsClustered(false);

            entity.ToTable("Appointment");

            entity.HasIndex(e => e.AppointmentDate, "_idx_AppointmentDate");

            entity.HasIndex(e => e.ParamedicId, "_idx_Paramedic");

            entity.HasIndex(e => e.PatientId, "_idx_PatientID");

            entity.HasIndex(e => e.ServiceUnitId, "_idx_ServiceUnit");

            entity.HasIndex(e => e.SrappointmentStatus, "_idx_Status");

            entity.HasIndex(e => new { e.PatientId, e.ServiceUnitId, e.ParamedicId, e.GuarantorId, e.AppointmentDate, e.SrappoinmentType }, "no_duplicate").IsUnique();

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AppointmentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.AppointmentTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.BirthPlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CancelNotes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DateOfBirth)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(0)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmployeeJobDepartementName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeJobTitleName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.FollowUpDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OfficerPic)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OfficerPIC");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientPic)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PatientPIC");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReferenceNumber)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrappoinmentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAppoinmentType");
            entity.Property(e => e.SrappointmentStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRAppointmentStatus");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.Srnationality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNationality");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrreferralGroup)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRReferralGroup");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalutation");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<AppointmentLokadok>(entity =>
        {
            entity.HasKey(e => e.ApptId).HasName("PK__Appointm__E43EE9967A1E4D27");

            entity.ToTable("AppointmentLokadok");

            entity.Property(e => e.ApptId)
                .ValueGeneratedNever()
                .HasColumnName("appt_id");
            entity.Property(e => e.BookingCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("booking_code");
            entity.Property(e => e.CheckedIn)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("checked_in");
            entity.Property(e => e.Confirmed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("confirmed");
            entity.Property(e => e.DocId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("doc_id");
            entity.Property(e => e.DocSpc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("doc_spc");
            entity.Property(e => e.Doctor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("doctor");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.LkdPid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lkd_pid");
            entity.Property(e => e.NewPatient).HasColumnName("new_patient");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasColumnName("notes");
            entity.Property(e => e.PDob).HasColumnName("p_dob");
            entity.Property(e => e.PGender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("p_gender");
            entity.Property(e => e.PId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("p_id");
            entity.Property(e => e.PInsId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("p_ins_id");
            entity.Property(e => e.PInsNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("p_ins_number");
            entity.Property(e => e.PInsurance)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("p_insurance");
            entity.Property(e => e.PMobile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("p_mobile");
            entity.Property(e => e.PName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("p_name");
            entity.Property(e => e.Place).HasColumnName("place");
            entity.Property(e => e.PolyId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("poly_id");
            entity.Property(e => e.ReasonVisit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("reason_visit");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoSender)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<AppointmentOnline>(entity =>
        {
            entity.HasKey(e => e.AppointmentNo).HasName("PK__Appointm__8ECE4382CC6EA9A9");

            entity.ToTable("AppointmentOnline");

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AppointmentDate).HasColumnType("smalldatetime");
            entity.Property(e => e.BpjsCob)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BpjsDiagnosaCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BpjsDiagnosaName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BpjsDpjpKode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BpjsDpjpName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.BpjsJenisPesertaCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BpjsJenisPesertaKeterangan)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BpjsJenisPesertaName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BpjsPenjamin)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BpjsRujukanPoliCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BpjsRujukanPoliName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BpjsSepDiagnosa)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.BpjsSepNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BpjsTujuanPoliCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BpjsTujuanPoliName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Catatan)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreatedDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.IsAfterInpatient).HasDefaultValue(false);
            entity.Property(e => e.IsRegistered).HasDefaultValue(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.QrCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RujukanAsalFaskes)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.RujukanJenisRanap)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RujukanKelasRawat)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RujukanNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrappoinmentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAppoinmentType");
            entity.Property(e => e.SuratKontrolDpjpLayan)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SuratKontrolNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TujuanPoliCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TujuanPoliName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.UpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UpdateByUserID");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppointmentOnlineTask>(entity =>
        {
            entity.HasKey(e => new { e.AppointmentNo, e.TaskId }).HasName("PK__Appointm__8908D719953C6304");

            entity.ToTable("AppointmentOnlineTask");

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Attempt).HasDefaultValue((byte)0);
            entity.Property(e => e.IsError).HasDefaultValue(false);
            entity.Property(e => e.IsSended).HasDefaultValue(false);
            entity.Property(e => e.IsTaskEightDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskFiveDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskFourDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskNineDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskOneDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskSevenDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskSixDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskTenDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskThreeDone).HasDefaultValue(false);
            entity.Property(e => e.IsTaskTwoDone).HasDefaultValue(false);
            entity.Property(e => e.LastUpdatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.TaskEightTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskFiveTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskFourTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskNineTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskOneTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskSevenTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskSixTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskTenTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskThreeTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaskTwoTimestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Timestamp)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<AppointmentQueueing>(entity =>
        {
            entity.ToTable("AppointmentQueueing");

            entity.HasIndex(e => e.FormattedNo, "_idx_FormattedNo");

            entity.HasIndex(e => e.ProcessByUserId, "_idx_ProcBy");

            entity.HasIndex(e => e.QueueingDate, "_idx_QueueingDate");

            entity.HasIndex(e => e.SrqueueingGroup, "_idx_SRGroup");

            entity.HasIndex(e => e.SrqueueingLocation, "_idx_SRLoc");

            entity.HasIndex(e => e.SrkioskQueueStatus, "_idx_SRQueStatus");

            entity.HasIndex(e => e.SrqueueingType, "_idx_SRType");

            entity.HasIndex(e => e.ServiceUnitId, "_idx_SuID");

            entity.HasIndex(e => e.AppointmentNo, "_idx_apptNo");

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CounterCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FormattedNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcessByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ProcessByUserID");
            entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            entity.Property(e => e.QueueingDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrkioskQueueStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRKioskQueueStatus");
            entity.Property(e => e.SrqueueingGroup)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRQueueingGroup");
            entity.Property(e => e.SrqueueingLocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRQueueingLocation");
            entity.Property(e => e.SrqueueingType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRQueueingType");
        });

        modelBuilder.Entity<AppointmentSlot>(entity =>
        {
            entity.HasKey(e => e.AppointmentNo).HasName("PK__Appointm__8ECE43822786ED08");

            entity.ToTable("AppointmentSlot");

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.SlotId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SlotID");
        });

        modelBuilder.Entity<Appprogbak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_appprogbak");

            entity.Property(e => e.ApplicationId)
                .HasMaxLength(255)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.ParentProgramId)
                .HasMaxLength(255)
                .HasColumnName("ParentProgramID");
            entity.Property(e => e.ProgramId)
                .HasMaxLength(255)
                .HasColumnName("ProgramID");
            entity.Property(e => e.ProgramName).HasMaxLength(255);
            entity.Property(e => e.ProgramType).HasMaxLength(255);
        });

        modelBuilder.Entity<AppraisalConclusion>(entity =>
        {
            entity.HasKey(e => e.ConclusionId);

            entity.ToTable("AppraisalConclusion");

            entity.Property(e => e.ConclusionId).HasColumnName("ConclusionID");
            entity.Property(e => e.ConclusionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.MinValue).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<AppraisalParticipant>(entity =>
        {
            entity.HasKey(e => e.ParticipantId);

            entity.ToTable("AppraisalParticipant");

            entity.Property(e => e.ParticipantId).HasColumnName("ParticipantID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.ParticipantName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SrquarterPeriod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRQuarterPeriod");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppraisalParticipantEvaluator>(entity =>
        {
            entity.HasKey(e => new { e.ParticipantEvaluatorId, e.ParticipantItemId, e.EvaluatorId, e.SrevaluatorType }).HasName("PK_AppraisalParticipantEvaluator_1");

            entity.ToTable("AppraisalParticipantEvaluator");

            entity.Property(e => e.ParticipantEvaluatorId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ParticipantEvaluatorID");
            entity.Property(e => e.ParticipantItemId).HasColumnName("ParticipantItemID");
            entity.Property(e => e.EvaluatorId).HasColumnName("EvaluatorID");
            entity.Property(e => e.SrevaluatorType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SREvaluatorType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.PositionValidFromDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SubDivisonId).HasColumnName("SubDivisonID");
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
        });

        modelBuilder.Entity<AppraisalParticipantItem>(entity =>
        {
            entity.HasKey(e => new { e.ParticipantItemId, e.ParticipantId, e.EmployeeId });

            entity.ToTable("AppraisalParticipantItem");

            entity.Property(e => e.ParticipantItemId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ParticipantItemID");
            entity.Property(e => e.ParticipantId).HasColumnName("ParticipantID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ClosedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedByUserID");
            entity.Property(e => e.ClosedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.PositionValidFromDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SubDivisonId).HasColumnName("SubDivisonID");
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
        });

        modelBuilder.Entity<AppraisalParticipantQuestioner>(entity =>
        {
            entity.HasKey(e => new { e.ParticipantQuestionerId, e.ParticipantItemId, e.QuestionerId });

            entity.ToTable("AppraisalParticipantQuestioner");

            entity.Property(e => e.ParticipantQuestionerId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ParticipantQuestionerID");
            entity.Property(e => e.ParticipantItemId).HasColumnName("ParticipantItemID");
            entity.Property(e => e.QuestionerId).HasColumnName("QuestionerID");
            entity.Property(e => e.EvaluatorId).HasColumnName("EvaluatorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppraisalQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionerId);

            entity.ToTable("AppraisalQuestion");

            entity.Property(e => e.QuestionerId).HasColumnName("QuestionerID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LoadScore).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.QuestionerName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.QuestionerNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SranswerRecord)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRAnswerRecord");
        });

        modelBuilder.Entity<AppraisalQuestionItem>(entity =>
        {
            entity.HasKey(e => e.QuestionerItemId).HasName("PK_AppraisalQuestionItem_1");

            entity.ToTable("AppraisalQuestionItem");

            entity.Property(e => e.QuestionerItemId).HasColumnName("QuestionerItemID");
            entity.Property(e => e.Achievements)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Benchmark).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.MinValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.QuestionCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionGroupName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.QuestionName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.QuestionerId).HasColumnName("QuestionerID");
            entity.Property(e => e.Rating).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Target)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppraisalQuestionRating>(entity =>
        {
            entity.HasKey(e => e.RatingId);

            entity.ToTable("AppraisalQuestionRating");

            entity.Property(e => e.RatingId).HasColumnName("RatingID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionerId).HasColumnName("QuestionerID");
            entity.Property(e => e.RatingCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RatingName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RatingValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RatingValueMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RatingValueMin).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<AppraisalScoresheet>(entity =>
        {
            entity.HasKey(e => new { e.ScoresheetId, e.ParticipantItemId, e.EvaluatorId });

            entity.ToTable("AppraisalScoresheet");

            entity.Property(e => e.ScoresheetId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ScoresheetID");
            entity.Property(e => e.ParticipantItemId).HasColumnName("ParticipantItemID");
            entity.Property(e => e.EvaluatorId).HasColumnName("EvaluatorID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.ScoringDate).HasColumnType("smalldatetime");
            entity.Property(e => e.SrevaluatorType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SREvaluatorType");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AppraisalScoresheetItem>(entity =>
        {
            entity.HasKey(e => new { e.ScoresheetItemId, e.ScoresheetId, e.QuestionerItemId }).HasName("PK_AppraisalScoresheetItem_1");

            entity.ToTable("AppraisalScoresheetItem");

            entity.Property(e => e.ScoresheetItemId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ScoresheetItemID");
            entity.Property(e => e.ScoresheetId).HasColumnName("ScoresheetID");
            entity.Property(e => e.QuestionerItemId).HasColumnName("QuestionerItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarkValue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RatingValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Score).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TotalScore).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<AppraisalScoringAccumulation>(entity =>
        {
            entity.HasKey(e => new { e.ScoringAccumulationId, e.ParticipantItemId, e.QuestionerItemId }).HasName("PK_AppraisalScoringAccumulation_1");

            entity.ToTable("AppraisalScoringAccumulation");

            entity.Property(e => e.ScoringAccumulationId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ScoringAccumulationID");
            entity.Property(e => e.ParticipantItemId).HasColumnName("ParticipantItemID");
            entity.Property(e => e.QuestionerItemId).HasColumnName("QuestionerItemID");
            entity.Property(e => e.AverageScore).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PartnerScore).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PartnerScoreIntervention).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SelfScore).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SelfScoreIntervention).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SubordinateScore).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SubordinateScoreIntervention).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SupervisorScore).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SupervisorScoreIntervention).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<AppraisalScoringRecapitulation>(entity =>
        {
            entity.HasKey(e => new { e.ScoringRecapitulationId, e.ParticipantItemId, e.QuestionerId }).HasName("PK_AppraisalScoringRecapitulation_1");

            entity.ToTable("AppraisalScoringRecapitulation");

            entity.Property(e => e.ScoringRecapitulationId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ScoringRecapitulationID");
            entity.Property(e => e.ParticipantItemId).HasColumnName("ParticipantItemID");
            entity.Property(e => e.QuestionerId).HasColumnName("QuestionerID");
            entity.Property(e => e.Capacity)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NeedsToBeDeveloped)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApprovalRange>(entity =>
        {
            entity.ToTable("ApprovalRange");

            entity.Property(e => e.ApprovalRangeId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ApprovalRangeID");
            entity.Property(e => e.AmountFrom).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApprovalRangeUser>(entity =>
        {
            entity.HasKey(e => new { e.ApprovalRangeId, e.ApprovalLevel, e.UserId });

            entity.ToTable("ApprovalRangeUser");

            entity.Property(e => e.ApprovalRangeId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ApprovalRangeID");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ApprovalTransaction>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ApprovalLevel, e.UserId });

            entity.ToTable("ApprovalTransaction");

            entity.HasIndex(e => new { e.UserId, e.IsApproved }, "IX_ApprovalTransaction_User");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ApprovalRangeId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ApprovalRangeID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AskesCovered>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("AskesCovered");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CtScanAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HaemodialiseAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HcuAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IccuAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalSupportAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RoomAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SurgeryAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<AskesCovered2>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo });

            entity.ToTable("AskesCovered2");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CtScanAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.HaemodialiseAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HcuAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IccuAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalSupportAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.SurgeryAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssessmentTypeBodyDiagram>(entity =>
        {
            entity.HasKey(e => new { e.SrassessmentType, e.BodyId });

            entity.ToTable("AssessmentTypeBodyDiagram");

            entity.Property(e => e.SrassessmentType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRAssessmentType");
            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Asset>(entity =>
        {
            entity.HasKey(e => e.AssetId).IsClustered(false);

            entity.ToTable("Asset");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.AssetBookId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssetBookID");
            entity.Property(e => e.AssetGroupId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetGroupID");
            entity.Property(e => e.AssetLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssetLocationID");
            entity.Property(e => e.AssetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AssetSubGroupId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BrandName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentCondition).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.CurrentValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DateDisposed).HasColumnType("datetime");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepreciationMethodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepreciationMethodID");
            entity.Property(e => e.GuaranteeExpiredDate).HasColumnType("smalldatetime");
            entity.Property(e => e.InsuranceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InsuranceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InsuranceID");
            entity.Property(e => e.InsurancePolicyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IntervalUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IssuedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IssuedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastInventoriedBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastInventoriedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastMaintenanceDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaintenanceIntervalIn)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MaintenanceServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MaintenanceServiceUnitID");
            entity.Property(e => e.NextMaintenanceDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NotesToTechnician)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PurchaseOrderNumber)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PurchasedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PurchasedPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidualValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SalesPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrassetType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetType");
            entity.Property(e => e.SrassetUsageTimeEstimation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetUsageTimeEstimation");
            entity.Property(e => e.SrassetsCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetsCondition");
            entity.Property(e => e.SrassetsCriticality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetsCriticality");
            entity.Property(e => e.SrassetsStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetsStatus");
            entity.Property(e => e.SrassetsWarrantyContract)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetsWarrantyContract");
            entity.Property(e => e.SrissuedReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIssuedReason");
            entity.Property(e => e.Srmanufacturer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRManufacturer");
            entity.Property(e => e.StartDepreciationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StartUsingDate).HasColumnType("smalldatetime");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.ValueDisposed).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.WarrantyContractNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetBook>(entity =>
        {
            entity.HasKey(e => e.AssetBookId).IsClustered(false);

            entity.ToTable("AssetBook");

            entity.Property(e => e.AssetBookId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AssetBookID");
            entity.Property(e => e.AssetBookName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DepreciationMethodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepreciationMethodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrassetType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRAssetType");

            entity.HasOne(d => d.DepreciationMethod).WithMany(p => p.AssetBooks)
                .HasForeignKey(d => d.DepreciationMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefAssetBookToAssetDepreciationMethod");
        });

        modelBuilder.Entity<AssetDepreciationMethod>(entity =>
        {
            entity.HasKey(e => e.DepreciationMethodId).IsClustered(false);

            entity.ToTable("AssetDepreciationMethod");

            entity.Property(e => e.DepreciationMethodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepreciationMethodID");
            entity.Property(e => e.DepreciationMethodName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Factor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetDepreciationPost>(entity =>
        {
            entity.ToTable("AssetDepreciationPost");

            entity.Property(e => e.AccumulationAmount).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.CurrentAmount).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.DepreciationAmount).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.DepreciationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.JournalNumber).HasMaxLength(20);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetDepreciationPostView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AssetDepreciationPostView");

            entity.Property(e => e.AssetGroupId)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.AssetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DepreciationAmount).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetGroup>(entity =>
        {
            entity.ToTable("AssetGroup");

            entity.Property(e => e.AssetGroupId)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.Initial)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetInventoriedHistory>(entity =>
        {
            entity.HasKey(e => new { e.AssetId, e.SequenceNo }).IsClustered(false);

            entity.ToTable("AssetInventoriedHistory");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .HasColumnName("AssetID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.InventoriedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.InventoriedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<AssetItemService>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.AssetId });

            entity.ToTable("AssetItemService");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .HasColumnName("AssetID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetLocation>(entity =>
        {
            entity.HasKey(e => e.AssetLocationId).IsClustered(false);

            entity.ToTable("AssetLocation");

            entity.Property(e => e.AssetLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AssetLocationID");
            entity.Property(e => e.Approver)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AssetLocationName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PersonInCharge)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<AssetMaintenanceDt>(entity =>
        {
            entity.HasKey(e => e.MaintenanceItemId);

            entity.ToTable("AssetMaintenanceDt");

            entity.Property(e => e.BaseItemUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BaseQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetMaintenanceHd>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).IsClustered(false);

            entity.ToTable("AssetMaintenanceHd");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.Condition).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaintenanceBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MaintenanceDate).HasColumnType("smalldatetime");
            entity.Property(e => e.NextMaintenanceDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.SrmaintenanceType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaintenanceType");
        });

        modelBuilder.Entity<AssetMaintenanceOrder>(entity =>
        {
            entity.HasKey(e => e.JobOrderNo).IsClustered(false);

            entity.ToTable("AssetMaintenanceOrder");

            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.FromLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromLocationID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OrderedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RequestBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
        });

        modelBuilder.Entity<AssetMovement>(entity =>
        {
            entity.HasKey(e => e.AssetMovementNo).IsClustered(false);

            entity.ToTable("AssetMovement");

            entity.Property(e => e.AssetMovementNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.FromAssetLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromAssetLocationID");
            entity.Property(e => e.FromDepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromDepartmentID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MovementDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ToAssetLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToAssetLocationID");
            entity.Property(e => e.ToDepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToDepartmentID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
        });

        modelBuilder.Entity<AssetPostingStatus>(entity =>
        {
            entity.HasKey(e => e.PostingId);

            entity.ToTable("AssetPostingStatus");

            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetPreventiveMaintenance>(entity =>
        {
            entity.HasKey(e => e.Pmno);

            entity.ToTable("AssetPreventiveMaintenance");

            entity.Property(e => e.Pmno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMNo");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pmdate)
                .HasColumnType("datetime")
                .HasColumnName("PMDate");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrworkTrade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTrade");
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetPreventiveMaintenanceSchedule>(entity =>
        {
            entity.HasKey(e => new { e.AssetId, e.ScheduleDate });

            entity.ToTable("AssetPreventiveMaintenanceSchedule");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PeriodDate).HasColumnType("datetime");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetPreventiveMaintenanceSchedulePeriod>(entity =>
        {
            entity.HasKey(e => new { e.AssetId, e.PeriodYear });

            entity.ToTable("AssetPreventiveMaintenanceSchedulePeriod");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetPreventiveMaintenanceSchedulePeriodDate>(entity =>
        {
            entity.HasKey(e => new { e.AssetId, e.PeriodYear, e.PeriodDate });

            entity.ToTable("AssetPreventiveMaintenanceSchedulePeriodDate");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.PeriodDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetStatusHistory>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("AssetStatusHistory");

            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BuyersAddress)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BuyersName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BuyersPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BuyersTaxRegister)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CurrentValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DepreciationAccValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrassetsStatusFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetsStatusFrom");
            entity.Property(e => e.SrassetsStatusTo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssetsStatusTo");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
            entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TaxPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.TaxStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetSubGroup>(entity =>
        {
            entity.HasKey(e => new { e.AssetGroupId, e.AssetSubGroupId });

            entity.ToTable("AssetSubGroup");

            entity.Property(e => e.AssetGroupId)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AssetSubGroupId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AssetSubGroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Initial)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetUtilization>(entity =>
        {
            entity.HasKey(e => new { e.AssetId, e.PeriodNo }).IsClustered(false);

            entity.ToTable("AssetUtilization");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .HasColumnName("AssetID");
            entity.Property(e => e.PeriodNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AssetWorkOrder>(entity =>
        {
            entity.HasKey(e => e.OrderNo);

            entity.ToTable("AssetWorkOrder");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AcceptedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcceptedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AcceptedByUserID");
            entity.Property(e => e.AcceptedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ActionTaken)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.CostEstimation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FailureCauseDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FirstResponseByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FirstResponseByUserID");
            entity.Property(e => e.FirstResponseDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.ImplementedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsGeneratePrDr).HasDefaultValue(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastRealizationByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastRealizationByUserID");
            entity.Property(e => e.LastRealizationDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LetterNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.Pmno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMNo");
            entity.Property(e => e.PreventionTaken)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProblemDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedByUserID");
            entity.Property(e => e.ReceivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedFromLogisticsByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedFromLogisticsByUserID");
            entity.Property(e => e.ReceivedFromLogisticsDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedFromThirdPartiesByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedFromThirdPartiesByUserID");
            entity.Property(e => e.ReceivedFromThirdPartiesDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RequestByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RequestByUserID");
            entity.Property(e => e.RequiredDate).HasColumnType("datetime");
            entity.Property(e => e.SentToThirdPartiesByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SentToThirdPartiesByUserID");
            entity.Property(e => e.SentToThirdPartiesDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrfailureCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFailureCode");
            entity.Property(e => e.SrworkOrderPoint)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkOrderPoint");
            entity.Property(e => e.SrworkPriority)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkPriority");
            entity.Property(e => e.SrworkStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkStatus");
            entity.Property(e => e.SrworkTrade)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTrade");
            entity.Property(e => e.SrworkTradeItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTradeItem");
            entity.Property(e => e.SrworkType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkType");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.WorkOrderPoint).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<AssetWorkOrderImplementer>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.UserId });

            entity.ToTable("AssetWorkOrderImplementer");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssetWorkOrderItem>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.SeqNo });

            entity.ToTable("AssetWorkOrderItem");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityRealization).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Specification)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<AtePatientsControl>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.SrmealSet });

            entity.ToTable("AtePatientsControl");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.AnimalSideDish)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Beverage)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Carbohydrate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ControlDate).HasColumnType("datetime");
            entity.Property(e => e.Fruit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SreatingPatientStatusReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREatingPatientStatusReason");
            entity.Property(e => e.Vegetable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VegetableSideDish)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AttedanceMatrix>(entity =>
        {
            entity.ToTable("AttedanceMatrix");

            entity.Property(e => e.AttedanceMatrixId).HasColumnName("AttedanceMatrixID");
            entity.Property(e => e.AttedanceMatrixFieldt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AttedanceMatrixName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<AuditLog>(entity =>
        {
            entity.ToTable("AuditLog");

            entity.Property(e => e.AuditLogId)
                .ValueGeneratedNever()
                .HasColumnName("AuditLogID");
            entity.Property(e => e.ActionByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ActionByUserID");
            entity.Property(e => e.AuditActionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LogDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrimaryKeyData)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AuditLogDatum>(entity =>
        {
            entity.HasKey(e => new { e.AuditLogId, e.ColumnName }).HasName("PK_AuditLogData_1");

            entity.Property(e => e.AuditLogId).HasColumnName("AuditLogID");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewValue)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OldValue)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AuditLogSetting>(entity =>
        {
            entity.HasKey(e => e.TableName);

            entity.ToTable("AuditLogSetting");

            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsConsolidationBranchToHo).HasColumnName("IsConsolidationBranchToHO");
            entity.Property(e => e.IsConsolidationHotoBranch).HasColumnName("IsConsolidationHOToBranch");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TableDescription)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AuditableAction>(entity =>
        {
            entity.HasKey(e => e.ActionId).HasName("PK_AudtitableActions");

            entity.Property(e => e.ActionId)
                .ValueGeneratedNever()
                .HasColumnName("ActionID");
            entity.Property(e => e.HeaderTemplate).HasMaxLength(256);
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.SecurityRequired).HasDefaultValueSql("(NULL)");
        });

        modelBuilder.Entity<AuditableEvent>(entity =>
        {
            entity.Property(e => e.AuditableEventId).HasColumnName("AuditableEventID");
            entity.Property(e => e.ActionId).HasColumnName("ActionID");
            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Header).HasMaxLength(500);
            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.Sqluser)
                .HasMaxLength(256)
                .HasColumnName("SQLUser");
            entity.Property(e => e.Workstation).HasMaxLength(256);
            entity.Property(e => e.WorkstationUser).HasMaxLength(256);
        });

        modelBuilder.Entity<AveragePriceHistory>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId, e.OldAveragePrice });

            entity.ToTable("AveragePriceHistory");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.OldAveragePrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ChangedDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ItemUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NewAveragePrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NewPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NewPriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NewPurchaseDiscount1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.NewPurchaseDiscount2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.OldPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OldPriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OldPurchaseDiscount1).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.OldPurchaseDiscount2).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Award>(entity =>
        {
            entity.ToTable("Award");

            entity.Property(e => e.AwardId).HasColumnName("AwardID");
            entity.Property(e => e.AwardCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AwardName)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.AwardPrize)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.SrawardCriteria)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SRAwardCriteria");
            entity.Property(e => e.SrawardType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SRAwardType");
            entity.Property(e => e.ValidFrom).HasColumnType("smalldatetime");
            entity.Property(e => e.ValidTo).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<AzureApplication>(entity =>
        {
            entity.ToTable("AzureApplication");

            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<AzureApplicationProfile>(entity =>
        {
            entity.ToTable("AzureApplicationProfile");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.HasOne(d => d.AzureApplication).WithMany(p => p.AzureApplicationProfiles)
                .HasForeignKey(d => d.AzureApplicationId)
                .HasConstraintName("fk_AzureApplicationProfile_AzureApplicationId");

            entity.HasOne(d => d.AzureSubscription).WithMany(p => p.AzureApplicationProfiles)
                .HasForeignKey(d => d.AzureSubscriptionId)
                .HasConstraintName("fk_AzureApplicationProfile_AzureSubscriptionId");
        });

        modelBuilder.Entity<AzureProfile>(entity =>
        {
            entity.ToTable("AzureProfile");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");

            entity.HasOne(d => d.AzureApplicationProfile).WithMany(p => p.AzureProfiles)
                .HasForeignKey(d => d.AzureApplicationProfileId)
                .HasConstraintName("fk_AzureProfile_AzureApplicationProfileId");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.AzureProfiles)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("fk_AzureProfile_SQLServerID");
        });

        modelBuilder.Entity<AzureResource>(entity =>
        {
            entity.ToTable("AzureResource");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.HasOne(d => d.AzureApplicationProfile).WithMany(p => p.AzureResources)
                .HasForeignKey(d => d.AzureApplicationProfileId)
                .HasConstraintName("fk_AzureResource_AzureApplicationProfileId");
        });

        modelBuilder.Entity<AzureSubscription>(entity =>
        {
            entity.ToTable("AzureSubscription");

            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<BakTr112final>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_Bak_TR112Final");

            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ReferenceNo).HasMaxLength(255);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(255)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasMaxLength(255);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(255)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName).HasMaxLength(255);
            entity.Property(e => e.TariffTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<BakTr112sheet2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_BakTR112Sheet2$");

            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ReferenceNo).HasMaxLength(255);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(255)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasMaxLength(255);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(255)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName).HasMaxLength(255);
            entity.Property(e => e.TariffTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<BakTr113sheet1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_BakTR113Sheet1$");

            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ReferenceNo).HasMaxLength(255);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(255)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasMaxLength(255);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(255)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName).HasMaxLength(255);
            entity.Property(e => e.TariffTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<BakTr114sheet1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_BakTR114Sheet1$");

            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ReferenceNo).HasMaxLength(255);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(255)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasMaxLength(255);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(255)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName).HasMaxLength(255);
            entity.Property(e => e.TariffTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<BakTr115sheet1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_BakTR115Sheet1$");

            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ReferenceNo).HasMaxLength(255);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(255)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasMaxLength(255);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(255)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName).HasMaxLength(255);
            entity.Property(e => e.TariffTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<BakUddItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_bak_UddItem");

            entity.Property(e => e.Acpcdc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACPCDC");
            entity.Property(e => e.ConsumeMethod)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DosageQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DosingPeriod)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmbalaceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmbalaceID");
            entity.Property(e => e.EmbalaceQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsRflag).HasColumnName("IsRFlag");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemQtyInString)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumberOfDosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.StopDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BakUserLogGriskaliaT>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_bak_UserLog_GriskaliaT");

            entity.Property(e => e.ApplicationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.BrowserInfo)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ClientIp)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("ClientIP");
            entity.Property(e => e.LoginDateTime).HasColumnType("datetime");
            entity.Property(e => e.LogoutDateTime).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SessionID");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.UserLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("UserLogID");
        });

        modelBuilder.Entity<Bank>(entity =>
        {
            entity.HasKey(e => e.BankId).IsClustered(false);

            entity.ToTable("Bank");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IsBku).HasColumnName("IsBKU");
            entity.Property(e => e.JournalCode).HasMaxLength(10);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NoRek)
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BankAccount>(entity =>
        {
            entity.HasKey(e => new { e.BankId, e.BankAccountNo });

            entity.ToTable("BankAccount");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BankID");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Srcurrency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCurrency");
        });

        modelBuilder.Entity<BankAccountBalance>(entity =>
        {
            entity.HasKey(e => e.BalanceId);

            entity.ToTable("BankAccountBalance");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreditAmount).HasColumnType("money");
            entity.Property(e => e.DebitAmount).HasColumnType("money");
            entity.Property(e => e.FinalBalance).HasColumnType("money");
            entity.Property(e => e.InitialBalance).HasColumnType("money");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Bank).WithMany(p => p.BankAccountBalances)
                .HasForeignKey(d => d.BankId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BankAccountBalance_BankAccount");
        });

        modelBuilder.Entity<BankInquiry>(entity =>
        {
            entity.HasKey(e => e.InquiryId).HasName("BankInquiryID");

            entity.ToTable("BankInquiry");

            entity.Property(e => e.InquiryId).HasColumnName("InquiryID");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Credit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Debit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FileName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BankInquiryDetail>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("BankInquiryDetailID");

            entity.ToTable("BankInquiryDetail");

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Credit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Debit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InquiryId).HasColumnName("InquiryID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReconcileId).HasColumnName("ReconcileID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RelatedTransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrcashTransactionCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRCashTransactionCode");
            entity.Property(e => e.TransactionDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BankReconcile>(entity =>
        {
            entity.HasKey(e => e.ReconcileId).HasName("BankReconcileID");

            entity.ToTable("BankReconcile");

            entity.Property(e => e.ReconcileId).HasColumnName("ReconcileID");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreditCashTransaction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreditInquiry).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebitCashTransaction).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebitInquiry).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BaselineMetaDatum>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PKBaselineMetaData");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.Category).HasMaxLength(128);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Format).HasMaxLength(64);
            entity.Property(e => e.Llimit).HasColumnName("LLimit");
            entity.Property(e => e.MetricId)
                .HasDefaultValueSql("(NULL)")
                .HasColumnName("MetricID");
            entity.Property(e => e.MetricValue).HasMaxLength(256);
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.NullFormat).HasMaxLength(64);
            entity.Property(e => e.Scale).HasColumnType("decimal(15, 9)");
            entity.Property(e => e.StatisticTable).HasMaxLength(256);
            entity.Property(e => e.Ulimit).HasColumnName("ULimit");
            entity.Property(e => e.Unit).HasMaxLength(32);
        });

        modelBuilder.Entity<BaselineStatistic>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.Utccalculation, e.TemplateId, e.MetricId }).HasName("PKBaselineStatistics");

            entity.HasIndex(e => new { e.SqlserverId, e.Utccalculation }, "IXBaselineStatistics");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.Utccalculation)
                .HasColumnType("datetime")
                .HasColumnName("UTCCalculation");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.MetricId).HasColumnName("MetricID");
            entity.Property(e => e.Max).HasColumnType("decimal(38, 5)");
            entity.Property(e => e.Mean).HasColumnType("decimal(38, 5)");
            entity.Property(e => e.Min).HasColumnType("decimal(38, 5)");
            entity.Property(e => e.StdDeviation).HasColumnType("decimal(38, 5)");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.BaselineStatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKBaselineStatisticsSQLServers");
        });

        modelBuilder.Entity<BaselineTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.HasIndex(e => e.SqlserverId, "IXBaselineTemplates");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.BaselineName)
                .HasMaxLength(500)
                .HasDefaultValue("Default");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.Template).HasMaxLength(1024);

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.BaselineTemplates)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKBaselineServersSQLServers");
        });

        modelBuilder.Entity<Bed>(entity =>
        {
            entity.HasKey(e => e.BedId).HasName("PK_Bed_1");

            entity.ToTable("Bed");

            entity.HasIndex(e => new { e.SrbedStatus, e.IsActive, e.DefaultChargeClassId }, "IX_Bed_SRBedStatus_IsActive_DefaultChargeClassID");

            entity.HasIndex(e => new { e.RegistrationNo, e.SrbedStatus }, "_idx_bedSt_regNo");

            entity.HasIndex(e => e.RoomId, "_idx_roomid");

            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BedID");
            entity.Property(e => e.BedStatusUpdatedBy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BookingDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.DefaultChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DefaultChargeClassID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsNeedConfirmation).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OldBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OldBedID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RoomID");
            entity.Property(e => e.SrbedStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRBedStatus");
        });

        modelBuilder.Entity<Bed1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Bed$");

            entity.Property(e => e.BedId)
                .HasMaxLength(255)
                .HasColumnName("BedID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName).HasMaxLength(255);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(255)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(255);
            entity.Property(e => e.F6).HasMaxLength(255);
            entity.Property(e => e.RoomId)
                .HasMaxLength(255)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoomName).HasMaxLength(255);
            entity.Property(e => e.RoomNameId).HasColumnName("RoomNameID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName).HasMaxLength(255);
        });

        modelBuilder.Entity<BedBpj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BedBPJS");

            entity.Property(e => e.ClassId).HasColumnName("ClassID");
            entity.Property(e => e.ClassName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BedInformationDisplay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BedInformationDisplay");

            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
        });

        modelBuilder.Entity<BedManagement>(entity =>
        {
            entity.ToTable("BedManagement");

            entity.Property(e => e.BedManagementId).HasColumnName("BedManagementID");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RegistrationBedID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReleasedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReleasedByUserID");
            entity.Property(e => e.ReleasedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReservationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrbedStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBedStatus");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BedRoomIn>(entity =>
        {
            entity.HasKey(e => new { e.BedId, e.RegistrationNo, e.DateOfEntry, e.TimeOfEntry });

            entity.ToTable("BedRoomIn");

            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateOfEntry).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeOfEntry)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BedStatusUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfExit).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrbedStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBedStatus");
            entity.Property(e => e.TimeOfExit)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BedStatusHistory>(entity =>
        {
            entity.HasKey(e => e.TransactionId);

            entity.ToTable("BedStatusHistory");

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrbedStatusFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBedStatusFrom");
            entity.Property(e => e.SrbedStatusTo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBedStatusTo");
            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BiayaJabatan>(entity =>
        {
            entity.ToTable("BiayaJabatan");

            entity.Property(e => e.BiayaJabatanId).HasColumnName("BiayaJabatanID");
            entity.Property(e => e.AmountOfDeduction).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PercentOfDeduction).HasColumnType("numeric(4, 2)");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<BillTransferHistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ProcessDateTime, e.ProcessByUserId });

            entity.ToTable("BillTransferHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcessByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ProcessByUserID");
        });

        modelBuilder.Entity<BillingAdjustItemGroupSetting>(entity =>
        {
            entity.HasKey(e => e.ItemGroupId).HasName("PK__BillingA__CCB7CA9D5047E900");

            entity.ToTable("BillingAdjustItemGroupSetting");

            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiscValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BillingAdjustItemSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BillingA__3214EC072CCEF89D");

            entity.ToTable("BillingAdjustItemSetting");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemGroupIdsReplacement)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ItemGroupIDsReplacement");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.Srspecialty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpecialty");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
        });

        modelBuilder.Entity<BillingToPatient>(entity =>
        {
            entity.HasKey(e => e.BillingNo);

            entity.ToTable("BillingToPatient");

            entity.Property(e => e.BillingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BedId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.BillingCreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BillingCreatedByUserID");
            entity.Property(e => e.BillingCreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BillingDate).HasColumnType("datetime");
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DownPaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PaymentByUserID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PlafondAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RemainingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrbillingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBillingType");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BirthAttendantsRecord>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ParamedicId });

            entity.ToTable("BirthAttendantsRecord");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SrmidwivesType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMidwivesType");
        });

        modelBuilder.Entity<BirthRecord>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("BirthRecord");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AbdomenCircumference).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.AnusExaminedNotes)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApgarScore1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ApgarScore2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ApgarScore3).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.BirthPregnancyAge).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.BornAtDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CertificateNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChestCircumference).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EyesSmearedNotes)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FatherBirthOfDate).HasColumnType("datetime");
            entity.Property(e => e.FatherName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FatherSsn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HeadCircumference).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Length).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MotherMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MotherRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrbirthComplication)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBirthComplication");
            entity.Property(e => e.SrbirthIndication)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBirthIndication");
            entity.Property(e => e.SrbirthMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBirthMethod");
            entity.Property(e => e.SrbornAt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBornAt");
            entity.Property(e => e.SrbornCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBornCondition");
            entity.Property(e => e.SrcaesarMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCaesarMethod");
            entity.Property(e => e.Srcongenital)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SRCongenital");
            entity.Property(e => e.SrdeathCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDeathCondition");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrsingleTwin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSingleTwin");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TimeOfBirth)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TwinNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Weight).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BkuJournalMessage>(entity =>
        {
            entity.HasKey(e => e.BkuJournalMessagesId).HasName("PK_BkuJournalMessageId");

            entity.HasIndex(e => e.BkuJournalId, "_idx_BkuJournalId");

            entity.HasIndex(e => e.DetailJournalId, "_idx_DetailJournalId");

            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BkuJournalTransaction>(entity =>
        {
            entity.HasKey(e => e.BkuJournalId).HasName("PK_BkuJournalId");

            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BkuJournalTransactionDetail>(entity =>
        {
            entity.HasKey(e => e.BkuDetailId).HasName("PK_BkuDetailId");

            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Credit).HasColumnType("money");
            entity.Property(e => e.Debit).HasColumnType("money");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BkuTransaction>(entity =>
        {
            entity.HasKey(e => e.BkuId);

            entity.ToTable("BkuTransaction");

            entity.Property(e => e.BkuId).HasColumnName("BkuID");
            entity.Property(e => e.Credit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Debit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InvoiceReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RekeningId).HasColumnName("RekeningID");
            entity.Property(e => e.TransactionReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.Uraian).IsUnicode(false);
        });

        modelBuilder.Entity<BkuTransactionBalance>(entity =>
        {
            entity.HasKey(e => e.BalanceId);

            entity.Property(e => e.BalanceId).HasColumnName("BalanceID");
            entity.Property(e => e.CreditAmount).HasColumnType("money");
            entity.Property(e => e.Date).HasColumnType("smalldatetime");
            entity.Property(e => e.DebitAmount).HasColumnType("money");
            entity.Property(e => e.FinalBalance).HasColumnType("money");
            entity.Property(e => e.InitialBalance).HasColumnType("money");
            entity.Property(e => e.RekeningId).HasColumnName("RekeningID");
        });

        modelBuilder.Entity<Block>(entity =>
        {
            entity.HasKey(e => e.BlockId)
                .HasName("PKBlocks")
                .IsClustered(false);

            entity.HasIndex(e => new { e.XactId, e.UtccollectionDateTime }, "IX_Blocks").IsUnique();

            entity.Property(e => e.BlockId)
                .ValueGeneratedNever()
                .HasColumnName("BlockID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.XactId).HasColumnName("XActID");
            entity.Property(e => e.Xdldata).HasColumnName("XDLData");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.Blocks)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKBlocksMonitoredSQLServers");
        });

        modelBuilder.Entity<BlockingSessionStatistic>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.BlockingUtcstartTime, "IXBlockingSessionStatistics").IsClustered();

            entity.HasIndex(e => e.BlockingDurationMilliseconds, "IXBlockingSessionStatistics_DurationMilliSeconds");

            entity.Property(e => e.ApplicationNameId).HasColumnName("ApplicationNameID");
            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BlockingLocalStartTime).HasColumnType("datetime");
            entity.Property(e => e.BlockingSessionId)
                .ValueGeneratedOnAdd()
                .HasColumnName("BlockingSessionID");
            entity.Property(e => e.BlockingUtcstartTime)
                .HasColumnType("datetime")
                .HasColumnName("BlockingUTCStartTime");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.HostNameId).HasColumnName("HostNameID");
            entity.Property(e => e.LoginNameId).HasColumnName("LoginNameID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");

            entity.HasOne(d => d.ApplicationName).WithMany()
                .HasForeignKey(d => d.ApplicationNameId)
                .HasConstraintName("FKBlockingSessionStatisticsApplicationNames");

            entity.HasOne(d => d.Database).WithMany()
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKBlockingSessionStatisticsSQLServerDatabaseNames");

            entity.HasOne(d => d.HostName).WithMany()
                .HasForeignKey(d => d.HostNameId)
                .HasConstraintName("FKBlockingSessionStatisticsHostNames");

            entity.HasOne(d => d.LoginName).WithMany()
                .HasForeignKey(d => d.LoginNameId)
                .HasConstraintName("FKBlockingSessionStatisticsLoginNames");

            entity.HasOne(d => d.Sqlserver).WithMany()
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKBlockingSessionStatisticsMonitoredSQLServers");

            entity.HasOne(d => d.Sqlsignature).WithMany()
                .HasForeignKey(d => d.SqlsignatureId)
                .HasConstraintName("FKBlockingSessionStatisticsSQLSignatures");

            entity.HasOne(d => d.Sqlstatement).WithMany()
                .HasForeignKey(d => d.SqlstatementId)
                .HasConstraintName("FKBlockingSessionStatisticsSQLStatements");
        });

        modelBuilder.Entity<BloodBagNo>(entity =>
        {
            entity.HasKey(e => e.BagNo);

            entity.ToTable("BloodBagNo");

            entity.Property(e => e.BagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BloodRhesus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiredDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrbloodGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroup");
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.VolumeBag).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<BloodBalance>(entity =>
        {
            entity.HasKey(e => new { e.SrbloodSource, e.SrbloodSourceFrom, e.BagNo }).HasName("PK_BloodBalance_1");

            entity.ToTable("BloodBalance");

            entity.Property(e => e.SrbloodSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSource");
            entity.Property(e => e.SrbloodSourceFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSourceFrom");
            entity.Property(e => e.BagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BloodBankTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("BloodBankTransaction");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BloodBankNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BloodSampleReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BloodSampleReceivedByUserID");
            entity.Property(e => e.BloodSampleReceivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BloodSampleSubmittedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BloodSampleSubmittedByUserID");
            entity.Property(e => e.BloodSampleSubmittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BloodSampleTakenByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BloodSampleTakenByUserID");
            entity.Property(e => e.BloodSampleTakenDateTime).HasColumnType("datetime");
            entity.Property(e => e.CasemixNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Diagnose)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HbResultValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OfficerByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OfficerByUserID");
            entity.Property(e => e.PdutNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrbloodGroupRequest)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroupRequest");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.ValidatedByCasemixDateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidatedByCasemixUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidatedByCasemixUserID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.VolumeBag).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<BloodBankTransactionItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.BagNo });

            entity.ToTable("BloodBankTransactionItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action10)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Action120)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Action180)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Action240)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Action30)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Action60)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ActionPost)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ActionPost2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ActionPost3)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ActionPre)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BloodBagNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BloodBagTemperature).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Bp10)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bp120)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bp180)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bp240)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bp30)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bp60)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpPost)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpPost2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpPost3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpPre)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrossMatchingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CrossMatchingByUserID");
            entity.Property(e => e.CrossmatchCompatibleAutoControl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CrossmatchCompatibleDctControl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CrossmatchCompatibleMajor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CrossmatchCompatibleMinor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CrossmatchEndDateTime).HasColumnType("datetime");
            entity.Property(e => e.CrossmatchStartDateTime).HasColumnType("datetime");
            entity.Property(e => e.ExaminerByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ExaminerByUserID");
            entity.Property(e => e.Hematocrit10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hematocrit120).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hematocrit180).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hematocrit240).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hematocrit30).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hematocrit60).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HematocritPost).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HematocritPost2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HematocritPost3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HematocritPre).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin120).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin180).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin240).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin30).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin60).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HemoglobinPost).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HemoglobinPost2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HemoglobinPost3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HemoglobinPre).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReaction10)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReaction120)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReaction180)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReaction240)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReaction30)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReaction60)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReactionPost)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReactionPost2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReactionPost3)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherReactionPre)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Platelet10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Platelet120).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Platelet180).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Platelet240).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Platelet30).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Platelet60).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PlateletPost).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PlateletPost2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PlateletPost3).HasColumnType("numeric(10, 3)");
            entity.Property(e => e.PlateletPre).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Pulse10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Pulse120).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Pulse180).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Pulse240).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Pulse30).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Pulse60).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PulsePost).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PulsePost2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PulsePost3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PulsePre).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReCheckDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReCheckOfficer)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReCheckOfficer2)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceivedTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Respiratory10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Respiratory120).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Respiratory180).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Respiratory240).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Respiratory30).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Respiratory60).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RespiratoryPost).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RespiratoryPost2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RespiratoryPost3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RespiratoryPre).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrbloodBagStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodBagStatus");
            entity.Property(e => e.SrbloodGroupReceived)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroupReceived");
            entity.Property(e => e.SrbloodSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSource");
            entity.Property(e => e.SrbloodSourceFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSourceFrom");
            entity.Property(e => e.Temperature10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Temperature120).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Temperature180).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Temperature240).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Temperature30).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Temperature60).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TemperaturePost).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TemperaturePost2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TemperaturePost3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TemperaturePre).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TransfusedOfficerEndBy)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TransfusedOfficerStartBy)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TransfusionEndDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransfusionStartDateTime).HasColumnType("datetime");
            entity.Property(e => e.UnitOfficer)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.UnitOfficerByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UnitOfficerByUserID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BloodExtermination>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("BloodExtermination");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BloodBankOfficerByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BloodBankOfficerByUserID");
            entity.Property(e => e.IncineratorOperator)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KnownBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SrreasonsForExtermination)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReasonsForExtermination");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.Weight).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<BloodExterminationItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.BagNo });

            entity.ToTable("BloodExterminationItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrbloodGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroup");
        });

        modelBuilder.Entity<BloodReceived>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("BloodReceived");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SrbloodSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSource");
            entity.Property(e => e.SrbloodSourceFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSourceFrom");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BloodReceivedItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.BagNo }).HasName("PK_BloodReceivedItem_1");

            entity.ToTable("BloodReceivedItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BloodRhesus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpiredDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrbloodGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroup");
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.VolumeBag).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<BloodTransformation>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("BloodTransformation");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BloodTransformationItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.BagNo });

            entity.ToTable("BloodTransformationItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpiredDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrbloodGroupFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroupFrom");
            entity.Property(e => e.SrbloodGroupTo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodGroupTo");
            entity.Property(e => e.VolumeBag).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<BodyDiagram>(entity =>
        {
            entity.HasKey(e => e.BodyId);

            entity.ToTable("BodyDiagram");

            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.BodyName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BodyDiagramServiceUnit>(entity =>
        {
            entity.HasKey(e => new { e.BodyId, e.ServiceUnitId });

            entity.ToTable("BodyDiagramServiceUnit");

            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<BornCertification>(entity =>
        {
            entity.HasKey(e => e.BornCertificationNumber).HasName("PK__BornCert__35B3CD8BABC8251D");

            entity.ToTable("BornCertification");

            entity.Property(e => e.BornCertificationNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Address).HasColumnType("text");
            entity.Property(e => e.BabyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BornAct)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CongenitalDisorder)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.HelpBy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IsNormal).HasDefaultValue(1);
            entity.Property(e => e.MotherName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BpjsApproval>(entity =>
        {
            entity.HasKey(e => new { e.NoKartu, e.TglSep, e.JnsPelayanan });

            entity.ToTable("BpjsApproval");

            entity.Property(e => e.NoKartu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("noKartu");
            entity.Property(e => e.TglSep)
                .HasColumnType("smalldatetime")
                .HasColumnName("tglSep");
            entity.Property(e => e.JnsPelayanan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("jnsPelayanan");
            entity.Property(e => e.JenisKelamin)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JnsPengajuan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("jnsPengajuan");
            entity.Property(e => e.Keterangan)
                .IsUnicode(false)
                .HasColumnName("keterangan");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(2550)
                .IsUnicode(false);
            entity.Property(e => e.User)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("user");
        });

        modelBuilder.Entity<BpjsCmg>(entity =>
        {
            entity.HasKey(e => new { e.NoSep, e.KodeCmg });

            entity.ToTable("BpjsCMG");

            entity.Property(e => e.NoSep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NoSEP");
            entity.Property(e => e.KodeCmg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("KodeCMG");
            entity.Property(e => e.DeskripsiCmg)
                .IsUnicode(false)
                .HasColumnName("DeskripsiCMG");
            entity.Property(e => e.IsOptionCmg).HasColumnName("IsOptionCMG");
            entity.Property(e => e.TariffCmg)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TariffCMG");
            entity.Property(e => e.TipeCmg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TipeCMG");
        });

        modelBuilder.Entity<BpjsPackage>(entity =>
        {
            entity.HasKey(e => e.PackageId);

            entity.ToTable("BpjsPackage");

            entity.Property(e => e.PackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PackageName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BpjsPackageTariff>(entity =>
        {
            entity.HasKey(e => new { e.PackageId, e.StartingDate, e.ClassId });

            entity.ToTable("BpjsPackageTariff");

            entity.Property(e => e.PackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<BpjsPesertum>(entity =>
        {
            entity.HasKey(e => e.NoKartu);

            entity.Property(e => e.NoKartu)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AsuransiKdAsuransi)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Asuransi_kdAsuransi");
            entity.Property(e => e.AsuransiNmAsuransi)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Asuransi_nmAsuransi");
            entity.Property(e => e.AsuransiNoAsuransi)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Asuransi_noAsuransi");
            entity.Property(e => e.GolDarah)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.HubunganKeluarga)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.JnsKelasKode)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JnsKelas_kode");
            entity.Property(e => e.JnsKelasNama)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JnsKelas_nama");
            entity.Property(e => e.JnsPesertaKode)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JnsPeserta_kode");
            entity.Property(e => e.JnsPesertaNama)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("JnsPeserta_nama");
            entity.Property(e => e.KdProviderGigiKdProvider)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("KdProviderGigi_kdProvider");
            entity.Property(e => e.KdProviderGigiNmProvider)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("KdProviderGigi_nmProvider");
            entity.Property(e => e.KdProviderPstKdProvider)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("KdProviderPst_kdProvider");
            entity.Property(e => e.KdProviderPstNmProvider)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("KdProviderPst_nmProvider");
            entity.Property(e => e.KetAktif)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Nama)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NoHp)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NoHP");
            entity.Property(e => e.NoKtp)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NoKTP");
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BpjsRujukan>(entity =>
        {
            entity.HasKey(e => new { e.NoSep, e.NoRujukan });

            entity.ToTable("BpjsRujukan");

            entity.Property(e => e.NoSep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("noSep");
            entity.Property(e => e.NoRujukan)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Catatan)
                .IsUnicode(false)
                .HasColumnName("catatan");
            entity.Property(e => e.DiagRujukan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("diagRujukan");
            entity.Property(e => e.JnsPelayanan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("jnsPelayanan");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NamaPoliRujukan)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("namaPoliRujukan");
            entity.Property(e => e.NamaPpkDirujuk)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("namaPpkDirujuk");
            entity.Property(e => e.PoliRujukan)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("poliRujukan");
            entity.Property(e => e.PpkDirujuk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ppkDirujuk");
            entity.Property(e => e.TglRencana)
                .HasColumnType("smalldatetime")
                .HasColumnName("tglRencana");
            entity.Property(e => e.TglRujukan)
                .HasColumnType("smalldatetime")
                .HasColumnName("tglRujukan");
            entity.Property(e => e.TipeRujukan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tipeRujukan");
            entity.Property(e => e.User)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("user");
        });

        modelBuilder.Entity<BpjsRujukanCodeBlue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BpjsRuju__3214EC0742E2AC51");

            entity.ToTable("BpjsRujukanCodeBlue");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CodeBlueNote)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreateUserId)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsProcessed).HasDefaultValue(false);
            entity.Property(e => e.KodeDokter)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.KodePoli)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NamaPoli)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoBpjsPeserta)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.NoRujukanPeserta)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.ProviderPerujukId)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ProviderPerujukName)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdateUserId)
                .HasMaxLength(32)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AspNetRoles");

            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueRoleClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AspNetRoleClaims");

            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.HasOne(d => d.Role).WithMany(p => p.BpjsRujukanCodeBlueRoleClaims)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BpjsRuju__3214EC0721B9663F");

            entity.ToTable("BpjsRujukanCodeBlueUser");

            entity.Property(e => e.Id)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(512)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueUser1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AspNetUsers");

            entity.ToTable("BpjsRujukanCodeBlueUsers");

            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "BpjsRujukanCodeBlueUserRole",
                    r => r.HasOne<BpjsRujukanCodeBlueRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId"),
                    l => l.HasOne<BpjsRujukanCodeBlueUser1>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK_AspNetUserRoles");
                        j.ToTable("BpjsRujukanCodeBlueUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueUserClaim>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AspNetUserClaims");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.BpjsRujukanCodeBlueUserClaims)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey }).HasName("PK_AspNetUserLogins");

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.BpjsRujukanCodeBlueUserLogins)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");
        });

        modelBuilder.Entity<BpjsRujukanCodeBlueUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name }).HasName("PK_AspNetUserTokens");

            entity.HasOne(d => d.User).WithMany(p => p.BpjsRujukanCodeBlueUserTokens)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");
        });

        modelBuilder.Entity<BpjsSep>(entity =>
        {
            entity.HasKey(e => e.SepId).HasName("PK_BpjsSEP_1");

            entity.ToTable("BpjsSEP");

            entity.HasIndex(e => new { e.TanggalSep, e.PoliTujuan }, "idx_BpjsSEP_001");

            entity.HasIndex(e => e.NoSep, "idx_BpjsSEP_NoSEP");

            entity.Property(e => e.SepId).HasColumnName("SepID");
            entity.Property(e => e.AssesmentPel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Catatan).IsUnicode(false);
            entity.Property(e => e.DeskripsiCbg)
                .IsUnicode(false)
                .HasColumnName("DeskripsiCBG");
            entity.Property(e => e.DetailKeanggotaan).IsUnicode(false);
            entity.Property(e => e.DiagnosaAwal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FlagProcedure)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.JenisKelamin)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JenisPelayanan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.JenisPeserta)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.JenisRujukan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KdPenunjang)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KelasRawat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KlsHak)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KlsRawatNaik)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KodeCbg)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("KodeCBG");
            entity.Property(e => e.KodeDpjp)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KodeDpjpKontrol)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KodeDpjpPelayanan)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KodeKabupaten)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KodeKecamatan)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.KodePropinsi)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LakaLantas)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LokasiLaka).IsUnicode(false);
            entity.Property(e => e.NamaCob)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NamaKelasRawat)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NamaPpkrujukan)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NamaPPKRujukan");
            entity.Property(e => e.Nik)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NIK");
            entity.Property(e => e.NoLp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NoLP");
            entity.Property(e => e.NoMr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NoMR");
            entity.Property(e => e.NoRujukan)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NoSep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NoSEP");
            entity.Property(e => e.NoSepSuplesi)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoSkdp)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoTransaksi)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NomorKartu)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Pembiayaan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PenanggungJawab)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PenjaminLaka)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PoliTujuan)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Ppkpelayanan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPKPelayanan");
            entity.Property(e => e.Ppkrujukan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPKRujukan");
            entity.Property(e => e.ProlanisPrb)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ProlanisPRB");
            entity.Property(e => e.StatusPeserta)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TanggalLahir).HasColumnType("smalldatetime");
            entity.Property(e => e.TanggalPulang).HasColumnType("smalldatetime");
            entity.Property(e => e.TanggalRujukan).HasColumnType("smalldatetime");
            entity.Property(e => e.TanggalSep)
                .HasColumnType("smalldatetime")
                .HasColumnName("TanggalSEP");
            entity.Property(e => e.TariffCbg)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TariffCBG");
            entity.Property(e => e.TglKejadian).HasColumnType("datetime");
            entity.Property(e => e.TujuanKunj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Umur)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.User)
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BpjsSuratKontrol>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorCardNo, e.NoSuratKontrol }).HasName("PK__BpjsSura__8373D7B4D3C69F41");

            entity.ToTable("BpjsSuratKontrol");

            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NoSuratKontrol)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.JsonData)
                .HasMaxLength(2048)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Bpjshfisparamedicschedule>(entity =>
        {
            entity.HasKey(e => new { e.BpjsParamedicId, e.BpjsServiceUnitId, e.BpjsDay }).HasName("PK__bpjshfis__F90EBDD9D91AC2CD");

            entity.ToTable("bpjshfisparamedicschedule");

            entity.Property(e => e.BpjsParamedicId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BpjsParamedicID");
            entity.Property(e => e.BpjsServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsServiceUnitID");
            entity.Property(e => e.BpjsDay)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BpjsDayName)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.BpjsEndHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BpjsParamedicName)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.BpjsStartHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BpjsSubSpecialityCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BpjsSubSpecialityName)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LegacyWorkingTime)
                .HasMaxLength(512)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Budgeting>(entity =>
        {
            entity.HasKey(e => e.BudgetingNo);

            entity.ToTable("Budgeting");

            entity.Property(e => e.BudgetingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CorrectionNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrbudgetingGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBudgetingGroup");
            entity.Property(e => e.SrbudgetingVerifyStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRBudgetingVerifyStatus");
            entity.Property(e => e.SumLimit).HasColumnType("money");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BudgetingDetail>(entity =>
        {
            entity.HasKey(e => new { e.BudgetingNo, e.Revision, e.ChartOfAccountId });

            entity.ToTable("BudgetingDetail");

            entity.Property(e => e.BudgetingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Limit01).HasColumnType("money");
            entity.Property(e => e.Limit02).HasColumnType("money");
            entity.Property(e => e.Limit03).HasColumnType("money");
            entity.Property(e => e.Limit04).HasColumnType("money");
            entity.Property(e => e.Limit05).HasColumnType("money");
            entity.Property(e => e.Limit06).HasColumnType("money");
            entity.Property(e => e.Limit07).HasColumnType("money");
            entity.Property(e => e.Limit08).HasColumnType("money");
            entity.Property(e => e.Limit09).HasColumnType("money");
            entity.Property(e => e.Limit10).HasColumnType("money");
            entity.Property(e => e.Limit11).HasColumnType("money");
            entity.Property(e => e.Limit12).HasColumnType("money");
        });

        modelBuilder.Entity<BudgetingDetailItem>(entity =>
        {
            entity.HasKey(e => new { e.BudgetingNo, e.Revision, e.ChartOfAccountId, e.ItemId });

            entity.ToTable("BudgetingDetailItem");

            entity.Property(e => e.BudgetingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.AssetApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssetApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.AssetRejectedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssetRejectedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ConversionFactor).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.Qty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth01).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth02).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth03).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth04).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth05).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth06).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth07).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth08).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth09).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth10).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth11).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.QtyMonth12).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.RejectNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<BudgetingDetailItemGroup>(entity =>
        {
            entity.HasKey(e => new { e.BudgetingNo, e.Revision, e.ChartOfAccountId, e.ItemGroupId }).HasName("PK__Budgetin__C52217BF82842CBB");

            entity.ToTable("BudgetingDetailItemGroup");

            entity.Property(e => e.BudgetingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Limit01).HasColumnType("money");
            entity.Property(e => e.Limit02).HasColumnType("money");
            entity.Property(e => e.Limit03).HasColumnType("money");
            entity.Property(e => e.Limit04).HasColumnType("money");
            entity.Property(e => e.Limit05).HasColumnType("money");
            entity.Property(e => e.Limit06).HasColumnType("money");
            entity.Property(e => e.Limit07).HasColumnType("money");
            entity.Property(e => e.Limit08).HasColumnType("money");
            entity.Property(e => e.Limit09).HasColumnType("money");
            entity.Property(e => e.Limit10).HasColumnType("money");
            entity.Property(e => e.Limit11).HasColumnType("money");
            entity.Property(e => e.Limit12).HasColumnType("money");
        });

        modelBuilder.Entity<BudgetingHistory>(entity =>
        {
            entity.HasKey(e => new { e.BudgetingNo, e.Revision });

            entity.ToTable("BudgetingHistory");

            entity.Property(e => e.BudgetingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CorrectionNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrbudgetingVerifyStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRBudgetingVerifyStatus");
            entity.Property(e => e.SumLimit).HasColumnType("money");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CasemixCovered>(entity =>
        {
            entity.ToTable("CasemixCovered");

            entity.Property(e => e.CasemixCoveredId).HasColumnName("CasemixCoveredID");
            entity.Property(e => e.CasemixCoveredName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
        });

        modelBuilder.Entity<CasemixCoveredDetail>(entity =>
        {
            entity.HasKey(e => new { e.CasemixCoveredDetailId, e.CasemixCoveredId });

            entity.ToTable("CasemixCoveredDetail");

            entity.Property(e => e.CasemixCoveredDetailId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CasemixCoveredDetailID");
            entity.Property(e => e.CasemixCoveredId).HasColumnName("CasemixCoveredID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<CasemixCoveredGuarantor>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.CasemixCoveredId });

            entity.ToTable("CasemixCoveredGuarantor");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.CasemixCoveredId).HasColumnName("CasemixCoveredID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CasemixCoveredRegistrationRule>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ItemId });

            entity.ToTable("CasemixCoveredRegistrationRule");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<CashManagement>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("CashManagement");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CashAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CashPayment).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClosingBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClosingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosingByUserID");
            entity.Property(e => e.ClosingDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OpeningBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OpeningDate).HasColumnType("datetime");
            entity.Property(e => e.SrcashierCounter)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCashierCounter");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CashManagementCashier>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.CashierUserId });

            entity.ToTable("CashManagementCashier");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CashierUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CashierUserID");
            entity.Property(e => e.CashierCheckinDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CashMutation>(entity =>
        {
            entity.ToTable("CashMutation");

            entity.HasIndex(e => e.BankChartOfAccountId, "_idx_BankCOAID");

            entity.HasIndex(e => e.ChartOfAccountId, "_idx_COAID");

            entity.HasIndex(e => e.TransactionId, "_idx_TransID");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNumber).HasMaxLength(75);
            entity.Property(e => e.Credit).HasColumnType("money");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyRate).HasColumnType("money");
            entity.Property(e => e.Debit).HasColumnType("money");
            entity.Property(e => e.DescriptionDetail).HasColumnName("Description_Detail");
            entity.Property(e => e.DocumentNumber).HasMaxLength(125);
            entity.Property(e => e.JournalNumber).HasMaxLength(20);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Module).HasMaxLength(5);
            entity.Property(e => e.NormalBalance)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.PaymentType).HasMaxLength(20);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
        });

        modelBuilder.Entity<CashTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId);

            entity.ToTable("CashTransaction");

            entity.HasIndex(e => e.ChartOfAccountId, "_idx_COAID");

            entity.HasIndex(e => e.DetailIdRef, "_idx_DetailIdReff");

            entity.HasIndex(e => e.TransactionDate, "_idx_TransDate");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BkuAccountId).HasColumnName("BkuAccountID");
            entity.Property(e => e.BudgetingCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNumber).HasMaxLength(75);
            entity.Property(e => e.ClearedBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClearedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyRate).HasColumnType("money");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DocumentNumber).HasMaxLength(125);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.JournalNumber).HasMaxLength(20);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Module).HasMaxLength(5);
            entity.Property(e => e.NormalBalance)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethod).HasMaxLength(20);
            entity.Property(e => e.PaymentType).HasMaxLength(20);
            entity.Property(e => e.ReceivedFromOrPaidTo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionType).HasMaxLength(10);
            entity.Property(e => e.VoidDate).HasColumnType("datetime");

            entity.HasOne(d => d.Bank).WithMany(p => p.CashTransactions)
                .HasForeignKey(d => d.BankId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CashTransaction_Bank");
        });

        modelBuilder.Entity<CashTransactionBalance>(entity =>
        {
            entity.HasKey(e => e.TxnBalanceId);

            entity.ToTable("CashTransactionBalance");

            entity.HasIndex(e => e.ChartOfAccountId, "_idx_COAID");

            entity.HasIndex(e => e.TransactionId, "_idx_TransID");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.CreditAmount).HasColumnType("money");
            entity.Property(e => e.DebitAmount).HasColumnType("money");
            entity.Property(e => e.FinalBalance).HasColumnType("money");
            entity.Property(e => e.InitialBalance).HasColumnType("money");
            entity.Property(e => e.NormalBalance)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ReconcileId).HasColumnName("ReconcileID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.CashTransactionBalances)
                .HasForeignKey(d => d.TransactionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CashTransactionBalance_CashTransaction");
        });

        modelBuilder.Entity<CashTransactionDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId);

            entity.ToTable("CashTransactionDetail");

            entity.HasIndex(e => e.ChartOfAccountId, "_idx_COAID");

            entity.HasIndex(e => e.IsParentRefference, "_idx_IsParentReff");

            entity.HasIndex(e => e.SubLedgerId, "_idx_SubLedgerID");

            entity.HasIndex(e => e.TransactionId, "_idx_TransID");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.Credit).HasColumnType("money");
            entity.Property(e => e.Debit).HasColumnType("money");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ListId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ListID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Transaction).WithMany(p => p.CashTransactionDetails)
                .HasForeignKey(d => d.TransactionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CashTransactionDetail_CashTransaction");
        });

        modelBuilder.Entity<CashTransactionList>(entity =>
        {
            entity.HasKey(e => e.ListId);

            entity.ToTable("CashTransactionList");

            entity.Property(e => e.ListId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CashType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CashTransactionListItem>(entity =>
        {
            entity.HasKey(e => e.ListItemId);

            entity.ToTable("CashTransactionListItem");

            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ListId)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Cencu>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.BedId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.BedIdinfo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("BedIDInfo");
            entity.Property(e => e.CencusDate).HasColumnType("datetime");
            entity.Property(e => e.CencusNo)
                .ValueGeneratedOnAdd()
                .HasColumnType("decimal(36, 0)");
            entity.Property(e => e.CencusStatus)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CencusTime)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClassId)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ClassIdInfo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.PatientBalance).HasDefaultValue(0);
            entity.Property(e => e.PatientDeadInLess48).HasDefaultValue(0);
            entity.Property(e => e.PatientDeadInMore48).HasDefaultValue(0);
            entity.Property(e => e.PatientIn).HasDefaultValue(0);
            entity.Property(e => e.PatientOut).HasDefaultValue(0);
            entity.Property(e => e.PatientTransferIn).HasDefaultValue(0);
            entity.Property(e => e.PatientTransferOut).HasDefaultValue(0);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.RoomIdInfo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitIdinfo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitIDInfo");
            entity.Property(e => e.TypeTransfer)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CensusBalance>(entity =>
        {
            entity.HasKey(e => new { e.CensusDate, e.ServiceUnitId, e.ClassId, e.SmfId });

            entity.ToTable("CensusBalance");

            entity.Property(e => e.CensusDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ChargeBedAutoBillMatrix>(entity =>
        {
            entity.HasKey(e => e.SequenceNo);

            entity.ToTable("ChargeBedAutoBillMatrix");

            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.MaxHour).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MinHour).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PercentageAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ValueAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ChartOfAccount>(entity =>
        {
            entity.HasIndex(e => e.ChartOfAccountCode, "_idx_CoaCode");

            entity.HasIndex(e => e.ChartOfAccountName, "_idx_CoaName");

            entity.Property(e => e.ChartOfAccountId).ValueGeneratedNever();
            entity.Property(e => e.BkuAccountId).HasColumnName("BkuAccountID");
            entity.Property(e => e.ChartOfAccountCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChartOfAccountName).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.GeneralAccount)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IsControlDocNumber).HasColumnName("isControlDocNumber");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NormalBalance)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TreeCode).HasMaxLength(255);
        });

        modelBuilder.Entity<ChartOfAccountBalance>(entity =>
        {
            entity.HasKey(e => e.BalanceId);

            entity.HasIndex(e => new { e.Year, e.Month }, "_idx_BalMonthYear");

            entity.HasIndex(e => e.ChartOfAccountId, "_idx_CoaID");

            entity.Property(e => e.CreditAmount).HasColumnType("money");
            entity.Property(e => e.DebitAmount).HasColumnType("money");
            entity.Property(e => e.FinalBalance).HasColumnType("money");
            entity.Property(e => e.InitialBalance).HasColumnType("money");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ChartOfAccount).WithMany(p => p.ChartOfAccountBalances)
                .HasForeignKey(d => d.ChartOfAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChartOfAccountBalances_ChartOfAccounts");
        });

        modelBuilder.Entity<CheckinConfirmHistory>(entity =>
        {
            entity.HasKey(e => e.CheckinConfirmId);

            entity.ToTable("CheckinConfirmHistory");

            entity.Property(e => e.CheckinConfirmId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClaimInaCbg>(entity =>
        {
            entity.HasKey(e => e.SepNo).HasName("PK__ClaimIna__7B33EA5429853DA0");

            entity.ToTable("ClaimInaCBG");

            entity.Property(e => e.SepNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Alkes).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Bmhp).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Diagnosa)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DiagnosaInaGrouper)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.GrouperCbg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.GrouperTariff).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.GrouperTariffLain).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Kamar).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Keperawatan).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.KlaimStatusCd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Konsultasi).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Laboratorium).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.NomorRm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Obat).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.ObatKemoterapi).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.ObatKronis).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.PelayananDarah).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Penunjang).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Procedure)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ProcedureInaGrouper)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ProsedurBedah).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.ProsedurNonBedah).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Radiologi).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.RawatIntensif).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.Rehabilitasi).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.SewaAlat).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.TarifRs).HasColumnType("numeric(15, 2)");
            entity.Property(e => e.TenagaAhli).HasColumnType("numeric(15, 2)");
        });

        modelBuilder.Entity<Class>(entity =>
        {
            entity.HasKey(e => e.ClassId).IsClustered(false);

            entity.ToTable("Class");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.BpjsClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsClassID");
            entity.Property(e => e.ClassName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DepositAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Margin2Percentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SirsClass)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SrclassRl)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRClassRL");
        });

        modelBuilder.Entity<ClassBridging>(entity =>
        {
            entity.HasKey(e => new { e.ClassId, e.SrbridgingType });

            entity.ToTable("ClassBridging");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.BridgingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BridgingID");
            entity.Property(e => e.BridgingName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClassMealSetMenuSetting>(entity =>
        {
            entity.HasKey(e => new { e.ClassId, e.SrmealSet });

            entity.ToTable("ClassMealSetMenuSetting");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClassMenuSetting>(entity =>
        {
            entity.HasKey(e => e.ClassId);

            entity.ToTable("ClassMenuSetting");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClinicalExamResult>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ParamedicId, e.Title });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Result).IsUnicode(false);
        });

        modelBuilder.Entity<ClinicalPathway>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PathwayId, e.PathwayItemSeqNo, e.DayNo });

            entity.ToTable("ClinicalPathway");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.InterventionItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InterventionItemID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RealizedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrtransactionCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRTransactionCode");
        });

        modelBuilder.Entity<ClosingAccounting>(entity =>
        {
            entity.HasKey(e => new { e.YearNo, e.MonthNo });

            entity.ToTable("ClosingAccounting");

            entity.Property(e => e.YearNo)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MonthNo)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClosingThrTransaction>(entity =>
        {
            entity.HasKey(e => e.PayrollPeriodId);

            entity.ToTable("ClosingThrTransaction");

            entity.Property(e => e.PayrollPeriodId)
                .ValueGeneratedNever()
                .HasColumnName("PayrollPeriodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClosingWageTransaction>(entity =>
        {
            entity.HasKey(e => e.PayrollPeriodId);

            entity.ToTable("ClosingWageTransaction");

            entity.Property(e => e.PayrollPeriodId)
                .ValueGeneratedNever()
                .HasColumnName("PayrollPeriodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CloudProvider>(entity =>
        {
            entity.Property(e => e.CloudProviderId).ValueGeneratedNever();
            entity.Property(e => e.CloudProviderName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CollectionService>(entity =>
        {
            entity.HasKey(e => e.CollectionServiceId).HasName("PK_CollectionService");

            entity.HasIndex(e => new { e.MachineName, e.InstanceName }, "IXCollectionServices").IsUnique();

            entity.Property(e => e.CollectionServiceId)
                .ValueGeneratedNever()
                .HasColumnName("CollectionServiceID");
            entity.Property(e => e.Address).HasMaxLength(256);
            entity.Property(e => e.InstanceName)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.LastHeartbeatUtc)
                .HasColumnType("datetime")
                .HasColumnName("LastHeartbeatUTC");
            entity.Property(e => e.MachineName)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.ManagementServiceId).HasColumnName("ManagementServiceID");

            entity.HasOne(d => d.ManagementService).WithMany(p => p.CollectionServices)
                .HasForeignKey(d => d.ManagementServiceId)
                .HasConstraintName("FKCollectionServicesManagementServices");
        });

        modelBuilder.Entity<CompanyEducationProfile>(entity =>
        {
            entity.ToTable("CompanyEducationProfile");

            entity.Property(e => e.CompanyEducationProfileId).HasColumnName("CompanyEducationProfileID");
            entity.Property(e => e.CompanyEducationProfileCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompanyEducationProfileName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompanyLaborProfileId).HasColumnName("CompanyLaborProfileID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CompanyFieldOfWorkProfile>(entity =>
        {
            entity.ToTable("CompanyFieldOfWorkProfile");

            entity.Property(e => e.CompanyFieldOfWorkProfileId).HasColumnName("CompanyFieldOfWorkProfileID");
            entity.Property(e => e.CompanyFieldOfWorkProfileCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyFieldOfWorkProfileName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompanyLaborProfileId).HasColumnName("CompanyLaborProfileID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CompanyLaborProfile>(entity =>
        {
            entity.ToTable("CompanyLaborProfile");

            entity.Property(e => e.CompanyLaborProfileId).HasColumnName("CompanyLaborProfileID");
            entity.Property(e => e.CompanyLaborProfileCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyLaborProfileName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ComplaintResponseTime>(entity =>
        {
            entity.HasKey(e => e.ComplaintNo);

            entity.ToTable("ComplaintResponseTime");

            entity.Property(e => e.ComplaintNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ComplaintDate).HasColumnType("datetime");
            entity.Property(e => e.ComplaintDescription).IsUnicode(false);
            entity.Property(e => e.CorrectiveAction).IsUnicode(false);
            entity.Property(e => e.CorrectiveActionBy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CorrectiveActionDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreventiveAction).IsUnicode(false);
            entity.Property(e => e.ReportReceivedMarketingBy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReportReceivedMarketingDate).HasColumnType("datetime");
            entity.Property(e => e.ReportReceivedUnitBy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReportReceivedUnitDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrcomplaintRiskGrading)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRComplaintRiskGrading");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ConditionIh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("condition_ihs");

            entity.Property(e => e.ConditionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("conditionId");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.EncounterId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("encounterId");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("registrationNo");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<ConsolidationCommitLog>(entity =>
        {
            entity.HasKey(e => e.CommitId);

            entity.ToTable("ConsolidationCommitLog");

            entity.Property(e => e.CommitId).HasColumnName("CommitID");
            entity.Property(e => e.CommitData).IsUnicode(false);
            entity.Property(e => e.CommitDateTime).HasColumnType("datetime");
            entity.Property(e => e.CommitSummary).IsUnicode(false);
            entity.Property(e => e.EndConsolidationLogId).HasColumnName("EndConsolidationLogID");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.StartConsolidationLogId).HasColumnName("StartConsolidationLogID");
        });

        modelBuilder.Entity<ConsolidationLog>(entity =>
        {
            entity.ToTable("ConsolidationLog");

            entity.Property(e => e.ConsolidationLogId)
                .ValueGeneratedNever()
                .HasColumnName("ConsolidationLogID");
            entity.Property(e => e.ConsolidationType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.LogDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrimaryKeyData)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConsolidationLogDatum>(entity =>
        {
            entity.HasKey(e => new { e.ConsolidationLogId, e.ColumnName });

            entity.Property(e => e.ConsolidationLogId).HasColumnName("ConsolidationLogID");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewValue)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OldValue)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConsolidationUpdateLog>(entity =>
        {
            entity.HasKey(e => e.UpdateId);

            entity.ToTable("ConsolidationUpdateLog");

            entity.Property(e => e.UpdateId).HasColumnName("UpdateID");
            entity.Property(e => e.EndConsolidationLogId).HasColumnName("EndConsolidationLogID");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceNote).IsUnicode(false);
            entity.Property(e => e.StartConsolidationLogId).HasColumnName("StartConsolidationLogID");
            entity.Property(e => e.SuccessUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateData).IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateSummary).IsUnicode(false);
        });

        modelBuilder.Entity<ConsumeMethod>(entity =>
        {
            entity.HasKey(e => e.SrconsumeMethod);

            entity.ToTable("ConsumeMethod");

            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.FrequencySatset).HasColumnName("frequency_satset");
            entity.Property(e => e.IterationInInterval)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PeriodUnit)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("periodUnit");
            entity.Property(e => e.SrconsumeMethodName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethodName");
            entity.Property(e => e.SygnaText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Time01)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time02)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time03)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time04)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time05)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time06)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time07)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time08)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time09)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Time10)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TimeSequence)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContributoryFactorsClassificationFramework>(entity =>
        {
            entity.HasKey(e => e.FactorId);

            entity.ToTable("ContributoryFactorsClassificationFramework");

            entity.Property(e => e.FactorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorID");
            entity.Property(e => e.FactorName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ContributoryFactorsClassificationFrameworkItem>(entity =>
        {
            entity.HasKey(e => new { e.FactorId, e.FactorItemId });

            entity.ToTable("ContributoryFactorsClassificationFrameworkItem");

            entity.Property(e => e.FactorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorID");
            entity.Property(e => e.FactorItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorItemID");
            entity.Property(e => e.FactorItemName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ContributoryFactorsClassificationFrameworkItemComponent>(entity =>
        {
            entity.HasKey(e => new { e.FactorId, e.FactorItemId, e.ComponentId });

            entity.ToTable("ContributoryFactorsClassificationFrameworkItemComponent");

            entity.Property(e => e.FactorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorID");
            entity.Property(e => e.FactorItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorItemID");
            entity.Property(e => e.ComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ComponentID");
            entity.Property(e => e.ComponentName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CooGradeParamedic>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CooGradeParamedic");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(255)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName).HasMaxLength(255);
        });

        modelBuilder.Entity<CoorporateGrade>(entity =>
        {
            entity.ToTable("CoorporateGrade");

            entity.Property(e => e.CoorporateGradeId).HasColumnName("CoorporateGradeID");
            entity.Property(e => e.CoorporateGradeCoefficient).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CoorporateGradeInterval).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoorporateGradeMax).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoorporateGradeMin).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CostCalculation>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.TransactionNo, e.SequenceNo });

            entity.ToTable("CostCalculation");

            entity.HasIndex(e => new { e.TransactionNo, e.SequenceNo }, "DPA_RECIDX_2");

            entity.HasIndex(e => e.TransactionNo, "_dta_index_CostCalculation_13_1694629080__K2_3_15");

            entity.HasIndex(e => e.IntermBillNo, "idx_CostCalculation_001");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.AdjustedDiscAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmountAdjusted).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount2).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParentNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<CostCalculationBuffer>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.GuarantorId, e.TransactionNo, e.SequenceNo });

            entity.ToTable("CostCalculationBuffer");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CostCalculationHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.RegistrationNo, e.TransactionNo, e.SequenceNo }).HasName("PK_CostCalculationHistory_1");

            entity.ToTable("CostCalculationHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParentNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<CostCalculationIntermBillTemp>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.TransactionNo, e.SequenceNo, e.IntermBillNo, e.PaymentNo });

            entity.ToTable("CostCalculationIntermBillTemp");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CostCalculationTemp>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.TransactionNo, e.SequenceNo });

            entity.ToTable("CostCalculationTemp");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount2).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParentNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<CostcalculationProratum>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.TransactionNo, e.SequenceNo });

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CounterMasterList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CounterMasterList");

            entity.Property(e => e.CounterFriendlyName).HasMaxLength(255);
            entity.Property(e => e.CounterName).HasMaxLength(255);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
        });

        modelBuilder.Entity<CredentialProcess>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("CredentialProcess");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClinicalAssignmentLetterDate).HasColumnType("datetime");
            entity.Property(e => e.CompetencyAssessmentVerificationDate).HasColumnType("datetime");
            entity.Property(e => e.CompetencyAssessmentVerificationDate2).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CredentialApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CredentialingDate).HasColumnType("datetime");
            entity.Property(e => e.DecreeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiplomaDate).HasColumnType("datetime");
            entity.Property(e => e.DiplomaNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InstitutionName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastClinicalAssignmentLetterByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastClinicalAssignmentLetterByUserID");
            entity.Property(e => e.LastClinicalAssignmentLetterDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCredentialApplicationByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCredentialApplicationByUserID");
            entity.Property(e => e.LastCredentialApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCredentialingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCredentialingByUserID");
            entity.Property(e => e.LastCredentialingDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastRecommendationLetterByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastRecommendationLetterByUserID");
            entity.Property(e => e.LastRecommendationLetterDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionnaireId).HasColumnName("QuestionnaireID");
            entity.Property(e => e.RecommendationLetterDate).HasColumnType("datetime");
            entity.Property(e => e.RecommendationLetterNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecommendationNotes).IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrclinicalAuthorityLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalAuthorityLevel");
            entity.Property(e => e.SrclinicalWorkArea)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalWorkArea");
            entity.Property(e => e.SrcredentialingStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCredentialingStatus");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.SrprofessionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionGroup");
            entity.Property(e => e.SrrecredentialReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRecredentialReason");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedByUserId2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID2");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerifiedDateTime2).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CredentialProcessDocument>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.DocumentItemId });

            entity.ToTable("CredentialProcessDocument");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DocumentItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DocumentItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CredentialProcessDocumentUpload>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PK_CredentialProcessDocumentUpload_1");

            entity.ToTable("CredentialProcessDocumentUpload");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FileAttachName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OriFileName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OriPath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SmallImage).HasColumnType("image");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CredentialProcessLicense>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SrlicenseType });

            entity.ToTable("CredentialProcessLicense");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrlicenseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLicenseType");
            entity.Property(e => e.DateOfIssue).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LicenseNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValidUntil).HasColumnType("datetime");
        });

        modelBuilder.Entity<CredentialProcessQuestion>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.QuestionFormId, e.QuestionGroupId, e.QuestionId });

            entity.ToTable("CredentialProcessQuestion");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.QuestionAnswerNum).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.QuestionAnswerPrefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionLineID");
            entity.Property(e => e.QuestionAnswerSuffix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText).IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText2).IsUnicode(false);
        });

        modelBuilder.Entity<CredentialProcessSheet>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.QuestionnaireItemId });

            entity.ToTable("CredentialProcessSheet");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionnaireItemId).HasColumnName("QuestionnaireItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SrcurrentAbility)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SRCurrentAbility");
            entity.Property(e => e.Srrecomendation)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SRRecomendation");
            entity.Property(e => e.Srreview)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SRReview");
        });

        modelBuilder.Entity<CredentialProcessTeam>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.PersonId });

            entity.ToTable("CredentialProcessTeam");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.AreasOfExpertise)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SrcredentialingTeamPosition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCredentialingTeamPosition");
        });

        modelBuilder.Entity<CredentialQuestionnaire>(entity =>
        {
            entity.HasKey(e => e.QuestionnaireId);

            entity.ToTable("CredentialQuestionnaire");

            entity.HasIndex(e => new { e.SrprofessionGroup, e.SrclinicalWorkArea, e.SrclinicalAuthorityLevel }, "IDX_CredentialQuestionnaire_SRProfessionGroup_SRClinicalWorkArea_SRClinicalAuthorityLevel");

            entity.Property(e => e.QuestionnaireId).HasColumnName("QuestionnaireID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Info1)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Info2)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Info3)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Info4)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionnaireCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionnaireName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SrclinicalAuthorityLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalAuthorityLevel");
            entity.Property(e => e.SrclinicalWorkArea)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalWorkArea");
            entity.Property(e => e.SrprofessionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionGroup");
        });

        modelBuilder.Entity<CredentialQuestionnaireItem>(entity =>
        {
            entity.HasKey(e => new { e.QuestionnaireItemId, e.QuestionnaireId });

            entity.ToTable("CredentialQuestionnaireItem");

            entity.Property(e => e.QuestionnaireItemId)
                .ValueGeneratedOnAdd()
                .HasColumnName("QuestionnaireItemID");
            entity.Property(e => e.QuestionnaireId).HasColumnName("QuestionnaireID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.QuestionNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrcredentialActionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCredentialActionType");
            entity.Property(e => e.SrcredentialQuestionLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCredentialQuestionLevel");
        });

        modelBuilder.Entity<CrmVoucher>(entity =>
        {
            entity.HasKey(e => e.VoucherNo);

            entity.ToTable("CrmVoucher");

            entity.Property(e => e.VoucherNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SSN");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Summary)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.VoidReason)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VoucherName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CssdItemDetail>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.ItemDetailId });

            entity.ToTable("CssdItemDetail");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemDetailId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemDetailID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<CssdMachine>(entity =>
        {
            entity.HasKey(e => e.MachineId);

            entity.ToTable("CssdMachine");

            entity.Property(e => e.MachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MachineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MachineName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.StartUsingDate).HasColumnType("datetime");
            entity.Property(e => e.Volume).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<CssdMachineItem>(entity =>
        {
            entity.HasKey(e => new { e.MachineId, e.SrcssdProcessType });

            entity.ToTable("CssdMachineItem");

            entity.Property(e => e.MachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MachineID");
            entity.Property(e => e.SrcssdProcessType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCssdProcessType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CssdSterileItemsReceived>(entity =>
        {
            entity.HasKey(e => e.ReceivedNo);

            entity.ToTable("CssdSterileItemsReceived");

            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProductionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedByUserID");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceivedTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SenderBy)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SenderById)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SenderByID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CssdSterileItemsReceivedItem>(entity =>
        {
            entity.HasKey(e => new { e.ReceivedNo, e.ReceivedSeqNo });

            entity.ToTable("CssdSterileItemsReceivedItem");

            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CssdItemNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExpiredDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrcssdItemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCssdItemUnit");
        });

        modelBuilder.Entity<CssdSterileItemsRequest>(entity =>
        {
            entity.HasKey(e => e.RequestNo);

            entity.ToTable("CssdSterileItemsRequest");

            entity.Property(e => e.RequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.SenderBy)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SenderById)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SenderByID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CssdSterileItemsRequestItem>(entity =>
        {
            entity.HasKey(e => new { e.RequestNo, e.RequestSeqNo });

            entity.ToTable("CssdSterileItemsRequestItem");

            entity.Property(e => e.RequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RequestSeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrcssdItemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCssdItemUnit");
        });

        modelBuilder.Entity<CssdSterileItemsReturned>(entity =>
        {
            entity.HasKey(e => e.ReturnNo);

            entity.ToTable("CssdSterileItemsReturned");

            entity.Property(e => e.ReturnNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClosedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedByUserID");
            entity.Property(e => e.ClosedDateTime).HasColumnType("datetime");
            entity.Property(e => e.HandedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("HandedByUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CssdSterileItemsReturnedItem>(entity =>
        {
            entity.HasKey(e => new { e.ReturnNo, e.ReturnSeqNo });

            entity.ToTable("CssdSterileItemsReturnedItem");

            entity.Property(e => e.ReturnNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReturnSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<CssdSterileItemsUltrasound>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("CssdSterileItemsUltrasound");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TransactionByUserID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionTime)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CssdSterileItemsUltrasoundItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.TransactionSeqNo });

            entity.ToTable("CssdSterileItemsUltrasoundItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CssdSterilizationProcess>(entity =>
        {
            entity.HasKey(e => e.ProcessNo);

            entity.ToTable("CssdSterilizationProcess");

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MachineID");
            entity.Property(e => e.OperatorByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OperatorByUserID");
            entity.Property(e => e.ProcessDate).HasColumnType("datetime");
            entity.Property(e => e.ProcessEndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProcessStartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProcessTo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrcssdProcessType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCssdProcessType");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CssdSterilizationProcessItem>(entity =>
        {
            entity.HasKey(e => new { e.ProcessNo, e.ProcessSeqNo });

            entity.ToTable("CssdSterilizationProcessItem");

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Weight).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.ToTable("Currency");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CurrencyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CurrencyRate>(entity =>
        {
            entity.HasKey(e => e.CurrencyId);

            entity.ToTable("CurrencyRate");

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CurrencyName)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.CurrencyRate1)
                .HasColumnType("money")
                .HasColumnName("CurrencyRate");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<CustomCounterDefinition>(entity =>
        {
            entity.HasKey(e => e.Metric).HasName("PKCustomCounterDefinition");

            entity.ToTable("CustomCounterDefinition");

            entity.Property(e => e.Counter).HasMaxLength(256);
            entity.Property(e => e.Instance).HasMaxLength(256);
            entity.Property(e => e.Object).HasMaxLength(256);
            entity.Property(e => e.ServerType)
                .HasMaxLength(256)
                .HasDefaultValue("Unknown");
            entity.Property(e => e.UtclastChangeDateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("UTCLastChangeDateTime");

            entity.HasMany(d => d.Tags).WithMany(p => p.Metrics)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomCounterTag",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_CustomCounterTags_Tags"),
                    l => l.HasOne<CustomCounterDefinition>().WithMany()
                        .HasForeignKey("Metric")
                        .HasConstraintName("FK_CustomCounterTags_CustomCounterDefinition"),
                    j =>
                    {
                        j.HasKey("Metric", "TagId");
                        j.ToTable("CustomCounterTags");
                    });
        });

        modelBuilder.Entity<CustomCounterStatistic>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime, e.MetricId }).HasName("PKCustomCounterStatistics");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.MetricId).HasColumnName("MetricID");
            entity.Property(e => e.DeltaValue).HasColumnType("decimal(38, 9)");
            entity.Property(e => e.ErrorMessage).HasMaxLength(255);
            entity.Property(e => e.RawValue).HasColumnType("decimal(38, 9)");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.CustomCounterStatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKCustomCounterStatisticsMonitoredSQLServers");
        });

        modelBuilder.Entity<CustomDashboard>(entity =>
        {
            entity.ToTable("CustomDashboard");

            entity.Property(e => e.CustomDashboardName).HasMaxLength(500);
            entity.Property(e => e.IsDefaultOnUi).HasColumnName("IsDefaultOnUI");
            entity.Property(e => e.RecordCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.RecordUpdateDateTimestamp).HasColumnType("datetime");
            entity.Property(e => e.Tags).IsUnicode(false);
            entity.Property(e => e.UserSid)
                .HasMaxLength(200)
                .HasColumnName("UserSID");
        });

        modelBuilder.Entity<CustomDashboardMatchType>(entity =>
        {
            entity.HasKey(e => e.MatchId).HasName("PK_dbo.CustomDashboardMatchTypes");

            entity.Property(e => e.MatchId)
                .ValueGeneratedNever()
                .HasColumnName("MatchID");
            entity.Property(e => e.MatchType).HasMaxLength(250);
        });

        modelBuilder.Entity<CustomDashboardWidget>(entity =>
        {
            entity.HasKey(e => e.WidgetId).HasName("PK_dbo.CustomDashboardWidgets");

            entity.Property(e => e.WidgetId).HasColumnName("WidgetID");
            entity.Property(e => e.DashboardId).HasColumnName("DashboardID");
            entity.Property(e => e.MetricId).HasColumnName("MetricID");
            entity.Property(e => e.RecordCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.RecordUpdateDateTimestamp).HasColumnType("datetime");
            entity.Property(e => e.WidgetName).HasMaxLength(500);
            entity.Property(e => e.WidgetTypeId).HasColumnName("WidgetTypeID");

            entity.HasOne(d => d.Dashboard).WithMany(p => p.CustomDashboardWidgets)
                .HasForeignKey(d => d.DashboardId)
                .HasConstraintName("fk_CustomDashboard");

            entity.HasOne(d => d.Match).WithMany(p => p.CustomDashboardWidgets)
                .HasForeignKey(d => d.MatchId)
                .HasConstraintName("fk_Match");

            entity.HasOne(d => d.Metric).WithMany(p => p.CustomDashboardWidgets)
                .HasForeignKey(d => d.MetricId)
                .HasConstraintName("fk_Metric");

            entity.HasOne(d => d.WidgetType).WithMany(p => p.CustomDashboardWidgets)
                .HasForeignKey(d => d.WidgetTypeId)
                .HasConstraintName("fk_WidgetType");

            entity.HasMany(d => d.SourceServers).WithMany(p => p.Widgets)
                .UsingEntity<Dictionary<string, object>>(
                    "WidgetSourceMapping",
                    r => r.HasOne<MonitoredSqlserver>().WithMany()
                        .HasForeignKey("SourceServerId")
                        .HasConstraintName("fk_Source"),
                    l => l.HasOne<CustomDashboardWidget>().WithMany()
                        .HasForeignKey("WidgetId")
                        .HasConstraintName("fk_Widget"),
                    j =>
                    {
                        j.HasKey("WidgetId", "SourceServerId");
                        j.ToTable("WidgetSourceMapping");
                        j.IndexerProperty<long>("WidgetId").HasColumnName("WidgetID");
                        j.IndexerProperty<int>("SourceServerId").HasColumnName("SourceServerID");
                    });

            entity.HasMany(d => d.Tags).WithMany(p => p.Widgets)
                .UsingEntity<Dictionary<string, object>>(
                    "WidgetTagMapping",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_TagWidget"),
                    l => l.HasOne<CustomDashboardWidget>().WithMany()
                        .HasForeignKey("WidgetId")
                        .HasConstraintName("fk_WidgetTag"),
                    j =>
                    {
                        j.HasKey("WidgetId", "TagId");
                        j.ToTable("WidgetTagMapping");
                        j.IndexerProperty<long>("WidgetId").HasColumnName("WidgetID");
                    });
        });

        modelBuilder.Entity<CustomDashboardWidgetType>(entity =>
        {
            entity.HasKey(e => e.WidgetTypeId).HasName("PK_dbo.CustomDashboardWidgetTypes");

            entity.Property(e => e.WidgetTypeId)
                .ValueGeneratedNever()
                .HasColumnName("WidgetTypeID");
            entity.Property(e => e.WidgetType).HasMaxLength(250);
        });

        modelBuilder.Entity<CustomReport>(entity =>
        {
            entity.HasIndex(e => new { e.Id, e.ReportName }, "IX_CustomReports").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ReportName)
                .HasMaxLength(255)
                .HasColumnName("reportName");
            entity.Property(e => e.ReportShortDescription)
                .HasMaxLength(255)
                .HasColumnName("reportShortDescription");
            entity.Property(e => e.ReportText)
                .HasColumnType("ntext")
                .HasColumnName("reportText");
            entity.Property(e => e.ShowTopServers).HasDefaultValue(false);
        });

        modelBuilder.Entity<CustomReportsCounter>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.GraphNumber });

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CounterName).HasMaxLength(255);
            entity.Property(e => e.CounterShortDescription).HasMaxLength(255);

            entity.HasOne(d => d.IdNavigation).WithMany(p => p.CustomReportsCounters)
                .HasForeignKey(d => d.Id)
                .HasConstraintName("FK_CustomReportsCounters_CustomReports");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("Customer");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.ChartOfAccountIdAr).HasColumnName("ChartOfAccountIdAR");
            entity.Property(e => e.ChartOfAccountIdArtemporary).HasColumnName("ChartOfAccountIdARTemporary");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesMarginPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SubledgerIdAr).HasColumnName("SubledgerIdAR");
            entity.Property(e => e.SubledgerIdArtemporary).HasColumnName("SubledgerIdARTemporary");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DashboardDefault>(entity =>
        {
            entity.HasKey(e => e.DashboardDefaultId).HasName("PKDashboardDefaults");

            entity.HasIndex(e => new { e.LoginName, e.SqlserverId, e.DashboardLayoutId }, "IXDashboardDefaults");

            entity.Property(e => e.DashboardDefaultId).HasColumnName("DashboardDefaultID");
            entity.Property(e => e.DashboardLayoutId).HasColumnName("DashboardLayoutID");
            entity.Property(e => e.LoginName).HasMaxLength(256);
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
        });

        modelBuilder.Entity<DashboardLayout>(entity =>
        {
            entity.HasKey(e => e.DashboardLayoutId).HasName("PKDashboardLayouts");

            entity.HasIndex(e => new { e.LoginName, e.Name }, "IXDashboardLayouts");

            entity.Property(e => e.DashboardLayoutId).HasColumnName("DashboardLayoutID");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LastViewed).HasColumnType("datetime");
            entity.Property(e => e.LoginName).HasMaxLength(256);
            entity.Property(e => e.Name).HasMaxLength(128);
        });

        modelBuilder.Entity<DataDtd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DataDTD");

            entity.Property(e => e.KdDtd)
                .HasMaxLength(255)
                .HasColumnName("KdDTD");
            entity.Property(e => e.KetIcd)
                .HasMaxLength(255)
                .HasColumnName("KetICD");
            entity.Property(e => e.KetSurvLokal).HasMaxLength(255);
            entity.Property(e => e.KetSurveilans).HasMaxLength(255);
            entity.Property(e => e.NmDtd)
                .HasMaxLength(255)
                .HasColumnName("NmDTD");
        });

        modelBuilder.Entity<DataIcd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DataICD");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.KdIcd)
                .HasMaxLength(255)
                .HasColumnName("KdICD");
            entity.Property(e => e.MemoDesc).HasMaxLength(255);
        });

        modelBuilder.Entity<DataKaryawan>(entity =>
        {
            entity.Property(e => e.Dob).HasColumnType("smalldatetime");
            entity.Property(e => e.Nama).HasMaxLength(250);
            entity.Property(e => e.Nik)
                .HasMaxLength(250)
                .HasColumnName("NIK");
        });

        modelBuilder.Entity<DataMatrikDtd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DataMatrikDTD");

            entity.Property(e => e.KdDtd)
                .HasMaxLength(255)
                .HasColumnName("KdDTD");
            entity.Property(e => e.KdIcd)
                .HasMaxLength(255)
                .HasColumnName("KdICD");
        });

        modelBuilder.Entity<DataRptItem>(entity =>
        {
            entity.HasKey(e => new { e.SrdataRpt, e.ItemId, e.TransactionDate });

            entity.ToTable("DataRptItem");

            entity.Property(e => e.SrdataRpt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDataRpt");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TransactionDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DataRptMaster>(entity =>
        {
            entity.HasKey(e => new { e.SrdataRpt, e.ItemId });

            entity.ToTable("DataRptMaster");

            entity.Property(e => e.SrdataRpt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDataRpt");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DatabaseFile>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("PKDatabaseFiles");

            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.DriveName).HasMaxLength(256);
            entity.Property(e => e.FileGroupName).HasMaxLength(4000);
            entity.Property(e => e.FileName).HasMaxLength(255);

            entity.HasOne(d => d.Database).WithMany(p => p.DatabaseFiles)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKDatabaseFilesSQLServerDatabaseNames");
        });

        modelBuilder.Entity<DatabaseFileActivity>(entity =>
        {
            entity.HasKey(e => new { e.UtccollectionDateTime, e.FileId }).HasName("PKDatabaseFileActivity");

            entity.ToTable("DatabaseFileActivity");

            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.FileId).HasColumnName("FileID");

            entity.HasOne(d => d.File).WithMany(p => p.DatabaseFileActivities)
                .HasForeignKey(d => d.FileId)
                .HasConstraintName("FKDatabaseFileActivityDatabaseFiles");
        });

        modelBuilder.Entity<DatabaseFileStatistic>(entity =>
        {
            entity.HasKey(e => e.FileStatisticsId).HasName("PK_DatabaseFileStatistics_ID");

            entity.Property(e => e.FileStatisticsId).HasColumnName("FileStatisticsID");
            entity.Property(e => e.AvailableSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DriveName).HasMaxLength(256);
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FreeDiskSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.InitialSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UsedSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");

            entity.HasOne(d => d.File).WithMany(p => p.DatabaseFileStatistics)
                .HasForeignKey(d => d.FileId)
                .HasConstraintName("FK_DatabaseFileStatistics_FileID");
        });

        modelBuilder.Entity<DatabaseFileStatisticsAggregation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DatabaseFileStatisticsAggregation");

            entity.Property(e => e.AggregatedFileStatisticsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AggregatedFileStatisticsID");
            entity.Property(e => e.DriveName).HasMaxLength(256);
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.MaxAvailableSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxFreeDiskSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxInitialSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxMaxSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxUsedSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MaxUTCCollectionDateTime");
            entity.Property(e => e.MinAvailableSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinFreeDiskSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinInitialSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinMaxSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinUsedSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MinUTCCollectionDateTime");
            entity.Property(e => e.TotalAvailableSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalFreeDiskSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalInitialSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalMaxSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalUsedSpace).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<DatabaseSize>(entity =>
        {
            entity.HasKey(e => new { e.DatabaseId, e.UtccollectionDateTime })
                .HasName("PKDatabaseSize")
                .IsClustered(false);

            entity.ToTable("DatabaseSize");

            entity.HasIndex(e => e.UtccollectionDateTime, "IXDatabaseSizeUTCCollectionDateTime");

            entity.HasIndex(e => e.DatabaseSizeId, "UQ__Database__BA00CBC6156E6E3B")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.DataExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DataFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DataSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DatabaseSizeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DatabaseSizeID");
            entity.Property(e => e.DatabaseStatisticsTime).HasColumnType("datetime");
            entity.Property(e => e.IndexSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LogExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LogFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LogSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TextSizeInKilobytes).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Database).WithMany(p => p.DatabaseSizes)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKDatabaseSizeSQLServerDatabaseNames");
        });

        modelBuilder.Entity<DatabaseSizeAggregation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DatabaseSizeAggregation");

            entity.Property(e => e.AggregatedDatabaseSizeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AggregatedDatabaseSizeID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.MaxDataExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxDataFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxDataSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxDatabaseStatisticsTime).HasColumnType("datetime");
            entity.Property(e => e.MaxIndexSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxLogExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxLogFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxLogSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxPercentDataSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxPercentLogSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxTextSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MaxUTCCollectionDateTime");
            entity.Property(e => e.MinDataExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinDataFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinDataSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinDatabaseStatisticsTime).HasColumnType("datetime");
            entity.Property(e => e.MinIndexSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinLogExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinLogFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinLogSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinPercentDataSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinPercentLogSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinTextSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MinUTCCollectionDateTime");
            entity.Property(e => e.TotalDataExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalDataFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalDataSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalIndexSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalLogExpansionInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalLogFileSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalLogSizeInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalPercentDataSize).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalPercentLogSpace).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalTextSizeInKilobytes).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<DatabaseSizeDateTime>(entity =>
        {
            entity.HasKey(e => new { e.DatabaseId, e.UtccollectionDateTime })
                .HasName("PKDatabaseSizeTime")
                .IsClustered(false);

            entity.ToTable("DatabaseSizeDateTime");

            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");

            entity.HasOne(d => d.Database).WithMany(p => p.DatabaseSizeDateTimes)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKDatabaseSizeTimeSQLServerDatabaseNames");
        });

        modelBuilder.Entity<DatabaseSizeDateTimeAggregation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DatabaseSizeDateTimeAggregation");

            entity.Property(e => e.AggregatedDatabaseId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AggregatedDatabaseID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.MaxUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MaxUTCCollectionDateTime");
            entity.Property(e => e.MinUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MinUTCCollectionDateTime");
        });

        modelBuilder.Entity<DatabaseStatistic>(entity =>
        {
            entity.HasKey(e => new { e.DatabaseId, e.UtccollectionDateTime })
                .HasName("PKDatabaseStatistics")
                .IsClustered(false);

            entity.HasIndex(e => e.DatabaseStatisticsId, "UQ__Database__44C0A85861C0CD9C")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.AgverageMemoryUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AverageDataIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AverageDataIO");
            entity.Property(e => e.AverageLogIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AverageLogIO");
            entity.Property(e => e.AvgCpuPercent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AvgDataIoPercent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AvgLogWritePercent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AzureCloudAllocatedMemory).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AzureCloudStorageLimit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AzureCloudUsedMemory).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.BytesRead).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.BytesWritten).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DatabaseAverageMemoryUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.DatabaseStatisticsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("DatabaseStatisticsID");
            entity.Property(e => e.ElasticPool).HasMaxLength(255);
            entity.Property(e => e.InMemoryStorageUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IoStallMs)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IoStallMS");
            entity.Property(e => e.LastBackupDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxSession).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxWorker).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberReads).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.NumberWrites).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Database).WithMany(p => p.DatabaseStatistics)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKDatabaseStatisticsSQLServerDatabaseNames");
        });

        modelBuilder.Entity<DatabaseStatisticsAggregation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DatabaseStatisticsAggregation");

            entity.Property(e => e.AggregatedDatabaseStatisticsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AggregatedDatabaseStatisticsID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.ElasticPool)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MaxAverageDataIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MaxAverageDataIO");
            entity.Property(e => e.MaxAverageLogIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MaxAverageLogIO");
            entity.Property(e => e.MaxAvgCpuPercent).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxAvgDataIoPercent).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxAvgLogWritePercent).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxAzureCloudAllocatedMemory).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxAzureCloudStorageLimit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxAzureCloudUsedMemory).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxBytesRead).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxBytesWritten).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxDatabaseAverageMemoryUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxDatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.MaxInMemoryStorageUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxIoStallMs)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MaxIoStallMS");
            entity.Property(e => e.MaxLastBackupDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxMaxSession).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxMaxWorker).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxNumberReads).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxNumberWrites).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MaxUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MaxUTCCollectionDateTime");
            entity.Property(e => e.MinAverageDataIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MinAverageDataIO");
            entity.Property(e => e.MinAverageLogIminO)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MinAverageLogIMinO");
            entity.Property(e => e.MinAvgCpuPercent).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinAvgDataIoPercent).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinAvgLogWritePercent).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinAzureCloudAllocatedMemory).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinAzureCloudStorageLimit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinAzureCloudUsedMemory).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinBytesRead).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinBytesWritten).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinDatabaseAverageMemoryUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinDatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.MinInMemoryStorageUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinIoStallMs)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MinIoStallMS");
            entity.Property(e => e.MinLastBackupDateTime).HasColumnType("datetime");
            entity.Property(e => e.MinMaxSession).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinMaxWorker).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinNumberReads).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinNumberWrites).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MinUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MinUTCCollectionDateTime");
            entity.Property(e => e.TotalBytesRead).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalBytesWritten).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalIoStallMs)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("TotalIoStallMS");
            entity.Property(e => e.TotalNumberReads).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalNumberWrites).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<Dbmetric>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DBMetrics");

            entity.Property(e => e.MetricId).HasColumnName("MetricID");
        });

        modelBuilder.Entity<Deadlock>(entity =>
        {
            entity.HasKey(e => e.DeadlockId).HasName("PKDeadlocks");

            entity.HasIndex(e => new { e.SqlserverId, e.UtccollectionDateTime }, "IXDeadlocks");

            entity.Property(e => e.DeadlockId)
                .ValueGeneratedNever()
                .HasColumnName("DeadlockID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.Xdldata).HasColumnName("XDLData");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.Deadlocks)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKSDeadlocksMonitoredSQLServers");
        });

        modelBuilder.Entity<DeadlockProcess>(entity =>
        {
            entity.HasKey(e => e.DeadlockProcessId).HasName("PKDeadlockProcesses");

            entity.HasIndex(e => e.DeadlockId, "DeadlockProcessDeadlockID");

            entity.Property(e => e.DeadlockProcessId).HasColumnName("DeadlockProcessID");
            entity.Property(e => e.ApplicationNameId).HasColumnName("ApplicationNameID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.DeadlockId).HasColumnName("DeadlockID");
            entity.Property(e => e.HostNameId).HasColumnName("HostNameID");
            entity.Property(e => e.LocalOccurrenceDateTime).HasColumnType("datetime");
            entity.Property(e => e.LoginNameId).HasColumnName("LoginNameID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.UtcoccurrenceDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCOccurrenceDateTime");

            entity.HasOne(d => d.ApplicationName).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.ApplicationNameId)
                .HasConstraintName("FKDeadlockProcessesApplicationNames");

            entity.HasOne(d => d.Database).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKDeadlockProcessesSQLServerDatabaseNames");

            entity.HasOne(d => d.Deadlock).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.DeadlockId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKDeadlockProcessesDeadlocks");

            entity.HasOne(d => d.HostName).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.HostNameId)
                .HasConstraintName("FKDeadlockProcessesHostNames");

            entity.HasOne(d => d.LoginName).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.LoginNameId)
                .HasConstraintName("FKDeadlockProcessesLoginNames");

            entity.HasOne(d => d.Sqlsignature).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.SqlsignatureId)
                .HasConstraintName("FKDeadlockProcessesSQLSignatures");

            entity.HasOne(d => d.Sqlstatement).WithMany(p => p.DeadlockProcesses)
                .HasForeignKey(d => d.SqlstatementId)
                .HasConstraintName("FKDeadlockProcessesSQLStatements");
        });

        modelBuilder.Entity<DefaultMetricThreshold>(entity =>
        {
            entity.HasKey(e => new { e.UserViewId, e.Metric, e.ThresholdInstanceId }).HasName("PKDefaultMetricThresholds");

            entity.Property(e => e.UserViewId).HasColumnName("UserViewID");
            entity.Property(e => e.ThresholdInstanceId)
                .HasDefaultValue(-1)
                .HasColumnName("ThresholdInstanceID");
            entity.Property(e => e.BaselineCriticalThreshold).HasMaxLength(2048);
            entity.Property(e => e.BaselineInfoThreshold).HasMaxLength(2048);
            entity.Property(e => e.BaselineWarningThreshold).HasMaxLength(2048);
            entity.Property(e => e.CriticalThreshold).HasMaxLength(2048);
            entity.Property(e => e.InfoThreshold).HasMaxLength(2048);
            entity.Property(e => e.ThresholdEnabled).HasDefaultValue(true);
            entity.Property(e => e.WarningThreshold).HasMaxLength(2048);

            entity.HasOne(d => d.UserView).WithMany(p => p.DefaultMetricThresholds)
                .HasForeignKey(d => d.UserViewId)
                .HasConstraintName("FKDefaultMetricThresholdsAlertTemplateLookup");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).IsClustered(false);

            entity.ToTable("Department");

            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentManager)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DepartmentName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Initial)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<DhfPatientLaboratoryResult>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hematokrit).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Hemoglobin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Leukosit).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Trombosit).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<Diagnose>(entity =>
        {
            entity.HasKey(e => e.DiagnoseId).IsClustered(false);

            entity.ToTable("Diagnose");

            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnoseName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DtdNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDisease).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Synonym)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.DtdNoNavigation).WithMany(p => p.Diagnoses)
                .HasForeignKey(d => d.DtdNo)
                .HasConstraintName("RefDtd110");
        });

        modelBuilder.Entity<DiagnoseInaGroupper>(entity =>
        {
            entity.HasKey(e => e.DiagnoseId).IsClustered(false);

            entity.ToTable("DiagnoseInaGroupper");

            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnoseName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DtdNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Synonym)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Diet>(entity =>
        {
            entity.ToTable("Diet");

            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.Calorie).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CalorieInterval).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CalorieMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CalorieMin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Carbohydrate).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CarbohydrateInterval).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CarbohydrateMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CarbohydrateMin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.DietName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Fat).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FatInterval).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FatMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FatMin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Fiber).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FiberInterval).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FiberMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FiberMin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Protein).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ProteinInterval).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ProteinMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ProteinMin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Salt).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SaltInterval).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SaltMax).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SaltMin).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrdietType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDietType");
        });

        modelBuilder.Entity<DietComplication>(entity =>
        {
            entity.HasKey(e => new { e.DietId, e.DietComplicationId });

            entity.ToTable("DietComplication");

            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.DietComplicationId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietComplicationID");
        });

        modelBuilder.Entity<DietComplicationPatient>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.DietId, e.DietComplicationId });

            entity.ToTable("DietComplicationPatient");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.DietComplicationId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietComplicationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DietLiquidPatient>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("DietLiquidPatient");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.EffectiveStartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DietLiquidPatientItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.DietTime, e.ItemId });

            entity.ToTable("DietLiquidPatientItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DietTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<DietLiquidPatientTime>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.DietTime });

            entity.ToTable("DietLiquidPatientTime");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DietTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AmountOfWater).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Etc)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Measure)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Total).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<DietMenu>(entity =>
        {
            entity.HasKey(e => new { e.DietId, e.FormOfFood });

            entity.ToTable("DietMenu");

            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.FormOfFood)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
        });

        modelBuilder.Entity<DietPatient>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("DietPatient");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BodyMassIndex).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.Diagnose)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveEndDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveEndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveStartDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveStartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.FormOfFood)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Height).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Muac).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Ulna).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.Weight).HasColumnType("numeric(6, 2)");
        });

        modelBuilder.Entity<DietPatientItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.DietId });

            entity.ToTable("DietPatientItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.Calorie).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Carbohydrate).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Fat).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Fiber).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LiquidTime)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Protein).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Salt).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<DisciplinarySanction>(entity =>
        {
            entity.HasKey(e => e.DisciplinarySanctionsId);

            entity.Property(e => e.DisciplinarySanctionsId).HasColumnName("DisciplinarySanctionsID");
            entity.Property(e => e.CutPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.ValidFromDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DiskDrife>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime, e.DriveName }).HasName("PKDiskDrives");

            entity.HasIndex(e => e.DatabaseSizeTime, "IXDiskDrivesDatabaseSizeTime");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.DriveName).HasMaxLength(256);
            entity.Property(e => e.DatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.TotalSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("TotalSizeKB");
            entity.Property(e => e.UnusedSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UnusedSizeKB");
        });

        modelBuilder.Entity<DiskDriveStatistic>(entity =>
        {
            entity.HasKey(e => e.DiskDriveStatisticsId);

            entity.Property(e => e.DiskDriveStatisticsId).HasColumnName("DiskDriveStatisticsID");
            entity.Property(e => e.DatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.DriveName).HasMaxLength(256);
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.TotalSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("TotalSizeKB");
            entity.Property(e => e.UnusedSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UnusedSizeKB");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
        });

        modelBuilder.Entity<DiskDriveStatisticsAggregation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DiskDriveStatisticsAggregation");

            entity.Property(e => e.AggregatedDiskDriveStatisticsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AggregatedDiskDriveStatisticsID");
            entity.Property(e => e.DriveName).HasMaxLength(256);
            entity.Property(e => e.MaxDatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.MaxTotalSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MaxTotalSizeKB");
            entity.Property(e => e.MaxUnusedSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MaxUnusedSizeKB");
            entity.Property(e => e.MaxUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MaxUTCCollectionDateTime");
            entity.Property(e => e.MinDatabaseSizeTime).HasColumnType("datetime");
            entity.Property(e => e.MinTotalzSieKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MinTotalzSieKB");
            entity.Property(e => e.MinUnusedSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MinUnusedSizeKB");
            entity.Property(e => e.MinUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MinUTCCollectionDateTime");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.TotalSizeKbperDay)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("TotalSizeKBPerDay");
            entity.Property(e => e.TotalUnusedSizeKb)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("TotalUnusedSizeKB");
        });

        modelBuilder.Entity<DistributionPortion>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.SrmealSet });

            entity.ToTable("DistributionPortion");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.CheckedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CheckedByUserID");
            entity.Property(e => e.CheckedDateTime).HasColumnType("datetime");
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrinvalidReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInvalidReason");
        });

        modelBuilder.Entity<DocumentChecklistDefinition>(entity =>
        {
            entity.HasKey(e => new { e.SrdocumentChecklist, e.DocumentFilesId });

            entity.ToTable("DocumentChecklistDefinition");

            entity.Property(e => e.SrdocumentChecklist)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDocumentChecklist");
            entity.Property(e => e.DocumentFilesId).HasColumnName("DocumentFilesID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DocumentDefinition>(entity =>
        {
            entity.ToTable("DocumentDefinition");

            entity.Property(e => e.DocumentDefinitionId).HasColumnName("DocumentDefinitionID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrfilesAnalysis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFilesAnalysis");
        });

        modelBuilder.Entity<DocumentDefinitionItem>(entity =>
        {
            entity.HasKey(e => new { e.DocumentDefinitionId, e.DocumentFilesId });

            entity.ToTable("DocumentDefinitionItem");

            entity.Property(e => e.DocumentDefinitionId).HasColumnName("DocumentDefinitionID");
            entity.Property(e => e.DocumentFilesId).HasColumnName("DocumentFilesID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DocumentFile>(entity =>
        {
            entity.HasKey(e => e.DocumentFilesId).HasName("PK__DocumentFiles");

            entity.Property(e => e.DocumentFilesId).HasColumnName("DocumentFilesID");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FileTemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
        });

        modelBuilder.Entity<DocumentSignature>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("DocumentSignature");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SrtransactionCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTransactionCode");
        });

        modelBuilder.Entity<DocumentSignatureItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.MinAmount }).HasName("PK_DocumentSignatureItem_1");

            entity.ToTable("DocumentSignatureItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MinAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PositionAs1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PositionAs2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PositionAs3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PositionAs4)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignerBy1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignerBy2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignerBy3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SignerBy4)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Donator>(entity =>
        {
            entity.ToTable("Donator");

            entity.Property(e => e.DonatorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DonatorID");
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DonatorName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.DonatorNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ShortName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dtd>(entity =>
        {
            entity.HasKey(e => e.DtdNo).IsClustered(false);

            entity.ToTable("Dtd");

            entity.Property(e => e.DtdNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DtdLabel)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DtdName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrchronicDisease)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRChronicDisease");
        });

        modelBuilder.Entity<Edcmachine>(entity =>
        {
            entity.HasKey(e => e.EdcmachineId).IsClustered(false);

            entity.ToTable("EDCMachine");

            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.EdcmachineName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("EDCMachineName");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Lippo, BCA, BNI")
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SubledgerId).HasColumnName("SubledgerID");
        });

        modelBuilder.Entity<EdcmachineTariff>(entity =>
        {
            entity.HasKey(e => new { e.SrcardType, e.EdcmachineId })
                .HasName("PK_CreditCard")
                .IsClustered(false);

            entity.ToTable("EDCMachineTariff");

            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasComment("Visa, master, diner")
                .HasColumnName("SRCardType");
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.EdcmachineTariff1)
                .HasColumnType("numeric(5, 2)")
                .HasColumnName("EDCMachineTariff");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SubledgerId).HasColumnName("SubledgerID");

            entity.HasOne(d => d.Edcmachine).WithMany(p => p.EdcmachineTariffs)
                .HasForeignKey(d => d.EdcmachineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefEDCMachineToCreditCard");
        });

        modelBuilder.Entity<Embalace>(entity =>
        {
            entity.ToTable("Embalace");

            entity.Property(e => e.EmbalaceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("EmbalaceID");
            entity.Property(e => e.EmbalaceFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmbalaceLabel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmbalaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmergencyContact>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).IsClustered(false);

            entity.ToTable("EmergencyContact");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.Srrelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRRelationship");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.RegistrationNoNavigation).WithOne(p => p.EmergencyContact)
                .HasForeignKey<EmergencyContact>(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefEmergencyContactToRegistration");
        });

        modelBuilder.Entity<EmergencyDiagnose>(entity =>
        {
            entity.HasKey(e => e.EmrDiagnoseId);

            entity.ToTable("EmergencyDiagnose");

            entity.Property(e => e.EmrDiagnoseId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmrDiagnoseID");
            entity.Property(e => e.EmrDiagnoseName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SremrDiagnoseGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmrDiagnoseGroupID");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.ToTable("Employee");

            entity.Property(e => e.EmployeeId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.BornDate).HasColumnType("datetime");
            entity.Property(e => e.BornPlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContractEndDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNumber)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContractStartDate).HasColumnType("datetime");
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.JamsostekNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PermanentDate).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.ResignDate).HasColumnType("datetime");
            entity.Property(e => e.ShortName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TaxRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeAccidentReport>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ActionPlan)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.AspectsOfTheCause)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Authority)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ChronologicalEvents)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentLocation)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.InjuredLocation)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PersonalIndirectCause)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PlaceOfTreatment)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.ReportingDateTime).HasColumnType("datetime");
            entity.Property(e => e.SremployeeAccidentReportStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeAccidentReportStatus");
            entity.Property(e => e.SremployeeIncidentStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeIncidentStatus");
            entity.Property(e => e.SremployeeIncidentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeIncidentType");
            entity.Property(e => e.SremployeeInjuryCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeInjuryCategory");
            entity.Property(e => e.SrneedleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNeedleType");
            entity.Property(e => e.SupervisorId).HasColumnName("SupervisorID");
            entity.Property(e => e.Target)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.UnsafeAct)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.UnsafeCondition)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.WorkingIndirectCause)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeAchievement>(entity =>
        {
            entity.ToTable("EmployeeAchievement");

            entity.Property(e => e.EmployeeAchievementId).HasColumnName("EmployeeAchievementID");
            entity.Property(e => e.Achievement)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AwardDate).HasColumnType("datetime");
            entity.Property(e => e.AwardId).HasColumnName("AwardID");
            entity.Property(e => e.FinancialValue).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
        });

        modelBuilder.Entity<EmployeeAppraisalQuestion>(entity =>
        {
            entity.HasKey(e => e.EmployeeAppraisalQuestionerId);

            entity.ToTable("EmployeeAppraisalQuestion");

            entity.Property(e => e.EmployeeAppraisalQuestionerId).HasColumnName("EmployeeAppraisalQuestionerID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.QuestionerId).HasColumnName("QuestionerID");
        });

        modelBuilder.Entity<EmployeeClinicalPrivilege>(entity =>
        {
            entity.ToTable("EmployeeClinicalPrivilege");

            entity.Property(e => e.EmployeeClinicalPrivilegeId).HasColumnName("EmployeeClinicalPrivilegeID");
            entity.Property(e => e.DecreeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrclinicalAuthorityLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalAuthorityLevel");
            entity.Property(e => e.SrclinicalWorkArea)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalWorkArea");
            entity.Property(e => e.SrprofessionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionGroup");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeDisciplinary>(entity =>
        {
            entity.ToTable("EmployeeDisciplinary");

            entity.Property(e => e.EmployeeDisciplinaryId).HasColumnName("EmployeeDisciplinaryID");
            entity.Property(e => e.AdviceGiven)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.DateIssue).HasColumnType("datetime");
            entity.Property(e => e.EffectViolation)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.IncidentDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SanctionGiven)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SrviolationDegree)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRViolationDegree");
            entity.Property(e => e.SrviolationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRViolationType");
            entity.Property(e => e.SrwarningLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWarningLevel");
            entity.Property(e => e.ValidUntil).HasColumnType("datetime");
            entity.Property(e => e.Violation)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeEducation>(entity =>
        {
            entity.ToTable("EmployeeEducation");

            entity.Property(e => e.EmployeeEducationId).HasColumnName("EmployeeEducationID");
            entity.Property(e => e.AssistanceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DurationOfService)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndServiceDate).HasColumnType("datetime");
            entity.Property(e => e.EndYearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.InstitutionName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SreducationFinancingSources)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationFinancingSources");
            entity.Property(e => e.SreducationStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationStatus");
            entity.Property(e => e.SrstudyPeriodStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRStudyPeriodStatus");
            entity.Property(e => e.StartServiceDate).HasColumnType("datetime");
            entity.Property(e => e.StartYearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.StudyProgram)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeEducationLevel>(entity =>
        {
            entity.ToTable("EmployeeEducationLevel");

            entity.Property(e => e.EmployeeEducationLevelId).HasColumnName("EmployeeEducationLevelID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeEmploymentPeriod>(entity =>
        {
            entity.ToTable("EmployeeEmploymentPeriod");

            entity.HasIndex(e => new { e.PersonId, e.SremploymentType }, "IDX_EmployeeEmploymentPeriod_PersonID_SREmploymentType");

            entity.Property(e => e.EmployeeEmploymentPeriodId).HasColumnName("EmployeeEmploymentPeriodID");
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RecruitmentPlanId).HasColumnName("RecruitmentPlanID");
            entity.Property(e => e.SremploymentCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentCategory");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeForm>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("EmployeeForm");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Result).IsUnicode(false);
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeFormTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("EmployeeFormTemplate");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Result).IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeGrade>(entity =>
        {
            entity.ToTable("EmployeeGrade");

            entity.Property(e => e.EmployeeGradeId).HasColumnName("EmployeeGradeID");
            entity.Property(e => e.EmployeeGradeMasterId).HasColumnName("EmployeeGradeMasterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeGradeMaster>(entity =>
        {
            entity.ToTable("EmployeeGradeMaster");

            entity.Property(e => e.EmployeeGradeMasterId).HasColumnName("EmployeeGradeMasterID");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeGradeCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmployeeGradeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeHealthAndSafety>(entity =>
        {
            entity.HasKey(e => e.EmployeeHealthAndSafetyNo).HasName("PK__Employee__8AE81964C66A6168");

            entity.ToTable("EmployeeHealthAndSafety");

            entity.Property(e => e.EmployeeHealthAndSafetyNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdditionalInformation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ArriveInHospitalDateTime).HasColumnType("datetime");
            entity.Property(e => e.BirthPlace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Chronology)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChronologyEnvironmentInvolved)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ConditionAfterFirstAid)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.EnvironmentCost)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentPlace)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InjuryDetail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LeaveHospitalDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SremployeeOutpatientTreatment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeOutpatientTreatment");
            entity.Property(e => e.SremployeeTreatment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTreatment");
            entity.Property(e => e.SremployerStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployerStatus");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrincidentImpact)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentImpact");
            entity.Property(e => e.Telp)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeHealthTestResult>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).HasName("PK_EmployeeHealthTestResult_1");

            entity.ToTable("EmployeeHealthTestResult");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmployeeServiceUnitID");
            entity.Property(e => e.Examination)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.K3rsRecomendation)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhysicianRecomendation)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Result)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ResultDate).HasColumnType("datetime");
            entity.Property(e => e.SrhealthDegreeConclusion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRHealthDegreeConclusion");
        });

        modelBuilder.Entity<EmployeeIncentivePosition>(entity =>
        {
            entity.HasKey(e => e.IncentivePositionId);

            entity.ToTable("EmployeeIncentivePosition");

            entity.Property(e => e.IncentivePositionId).HasColumnName("IncentivePositionID");
            entity.Property(e => e.IncentivePositionPoints).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrincentivePosition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentivePosition");
            entity.Property(e => e.SrincentivePositionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentivePositionGroup");
            entity.Property(e => e.SrincentiveServiceUnitGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentiveServiceUnitGroup");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeIncentiveProcess>(entity =>
        {
            entity.ToTable("EmployeeIncentiveProcess");

            entity.Property(e => e.EmployeeIncentiveProcessId).HasColumnName("EmployeeIncentiveProcessID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeIncentiveProcessItem>(entity =>
        {
            entity.HasKey(e => new { e.EmployeeIncentiveProcessId, e.SrincentiveServiceUnitGroup }).HasName("PK_EmployeeIncentiveProcessItem_1");

            entity.ToTable("EmployeeIncentiveProcessItem");

            entity.Property(e => e.EmployeeIncentiveProcessId).HasColumnName("EmployeeIncentiveProcessID");
            entity.Property(e => e.SrincentiveServiceUnitGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentiveServiceUnitGroup");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Nominal).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NominalPerPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TotalPoint).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<EmployeeIncentiveProcessItemDetail>(entity =>
        {
            entity.HasKey(e => new { e.EmployeeIncentiveProcessId, e.SrincentiveServiceUnitGroup, e.PersonId });

            entity.ToTable("EmployeeIncentiveProcessItemDetail");

            entity.Property(e => e.EmployeeIncentiveProcessId).HasColumnName("EmployeeIncentiveProcessID");
            entity.Property(e => e.SrincentiveServiceUnitGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentiveServiceUnitGroup");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Points).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<EmployeeLanguageProficiency>(entity =>
        {
            entity.ToTable("EmployeeLanguageProficiency");

            entity.Property(e => e.EmployeeLanguageProficiencyId).HasColumnName("EmployeeLanguageProficiencyID");
            entity.Property(e => e.EvaluationDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Srconversation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConversation");
            entity.Property(e => e.Srlanguage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLanguage");
            entity.Property(e => e.Srtranslation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTranslation");
        });

        modelBuilder.Entity<EmployeeLeave>(entity =>
        {
            entity.ToTable("EmployeeLeave");

            entity.Property(e => e.EmployeeLeaveId).HasColumnName("EmployeeLeaveID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SremployeeLeaveType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeLeaveType");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeLeaveCashable>(entity =>
        {
            entity.ToTable("EmployeeLeaveCashable");

            entity.Property(e => e.EmployeeLeaveCashableId).HasColumnName("EmployeeLeaveCashableID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LetterNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
        });

        modelBuilder.Entity<EmployeeLeaveRequest>(entity =>
        {
            entity.HasKey(e => e.LeaveRequestId);

            entity.ToTable("EmployeeLeaveRequest");

            entity.Property(e => e.LeaveRequestId).HasColumnName("LeaveRequestID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ApprovedLeaveDateFrom).HasColumnType("datetime");
            entity.Property(e => e.ApprovedLeaveDateTo).HasColumnType("datetime");
            entity.Property(e => e.ApprovedWorkingDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EmployeeLeaveId).HasColumnName("EmployeeLeaveID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RejectedReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReplacementPersonId).HasColumnName("ReplacementPersonID");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestLeaveDateFrom).HasColumnType("datetime");
            entity.Property(e => e.RequestLeaveDateTo).HasColumnType("datetime");
            entity.Property(e => e.RequestWorkingDate).HasColumnType("datetime");
            entity.Property(e => e.SrworkingDay)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkingDay");
            entity.Property(e => e.Validated2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Validated2ByUserID");
            entity.Property(e => e.Validated2DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidatedByUserID");
            entity.Property(e => e.ValidatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeLoan>(entity =>
        {
            entity.ToTable("EmployeeLoan");

            entity.Property(e => e.EmployeeLoanId).HasColumnName("EmployeeLoanID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.AmountOfInstallment).HasColumnType("money");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CompanyLaborProfileId).HasColumnName("CompanyLaborProfileID");
            entity.Property(e => e.CoverageAmount).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LoanAmountWithInterest).HasColumnType("money");
            entity.Property(e => e.LoanDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PercentRateOfInterest).HasColumnType("numeric(3, 2)");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrhrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRHRPaymentMethod");
            entity.Property(e => e.SrpurposeOfLoan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPurposeOfLoan");
        });

        modelBuilder.Entity<EmployeeLoanDetail>(entity =>
        {
            entity.ToTable("EmployeeLoanDetail");

            entity.Property(e => e.EmployeeLoanDetailId).HasColumnName("EmployeeLoanDetailID");
            entity.Property(e => e.ActualAmount).HasColumnType("money");
            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeLoanId).HasColumnName("EmployeeLoanID");
            entity.Property(e => e.InterestPayment).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MainPayment).HasColumnType("money");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PlanAmount).HasColumnType("money");
            entity.Property(e => e.PlanDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeLoanItem>(entity =>
        {
            entity.HasKey(e => e.EmployeeLoanDetailId);

            entity.ToTable("EmployeeLoanItem");

            entity.Property(e => e.EmployeeLoanDetailId).HasColumnName("EmployeeLoanDetailID");
            entity.Property(e => e.ActualAmount).HasColumnType("money");
            entity.Property(e => e.ActualDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeLoanId).HasColumnName("EmployeeLoanID");
            entity.Property(e => e.InterestPayment).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MainPayment).HasColumnType("money");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PlanAmount).HasColumnType("money");
            entity.Property(e => e.PlanDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeMedicalAdjustment>(entity =>
        {
            entity.ToTable("EmployeeMedicalAdjustment");

            entity.Property(e => e.EmployeeMedicalAdjustmentId).HasColumnName("EmployeeMedicalAdjustmentID");
            entity.Property(e => e.AdjustmentAmount).HasColumnType("money");
            entity.Property(e => e.AdjustmentDate).HasColumnType("datetime");
            entity.Property(e => e.DependentAdjustmentAmount).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalBenefitInfoId).HasColumnName("MedicalBenefitInfoID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.YearPeriodId).HasColumnName("YearPeriodID");
        });

        modelBuilder.Entity<EmployeeMedicalBenefit>(entity =>
        {
            entity.ToTable("EmployeeMedicalBenefit");

            entity.Property(e => e.EmployeeMedicalBenefitId).HasColumnName("EmployeeMedicalBenefitID");
            entity.Property(e => e.DependentAdjustmentAmount).HasColumnType("money");
            entity.Property(e => e.DependentBenefit).HasColumnType("money");
            entity.Property(e => e.DependentGuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DependentGuarantorID");
            entity.Property(e => e.DependentUnusedAmount).HasColumnType("money");
            entity.Property(e => e.DependentUsedAmount).HasColumnType("money");
            entity.Property(e => e.EmployeeAdjustmentAmount).HasColumnType("money");
            entity.Property(e => e.EmployeeBenefit).HasColumnType("money");
            entity.Property(e => e.EmployeeUnusedAmount).HasColumnType("money");
            entity.Property(e => e.EmployeeUsedAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalBenefitInfoId).HasColumnName("MedicalBenefitInfoID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrmedicalPaidRules)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalPaidRules");
            entity.Property(e => e.TotalAdjustmentAmount).HasColumnType("money");
            entity.Property(e => e.TotalBenefit).HasColumnType("money");
            entity.Property(e => e.TotalUnusedAmount).HasColumnType("money");
            entity.Property(e => e.TotalUsedAmount).HasColumnType("money");
            entity.Property(e => e.YearPeriodId).HasColumnName("YearPeriodID");
        });

        modelBuilder.Entity<EmployeeMedicalInsurance>(entity =>
        {
            entity.HasKey(e => e.MedicalInsuranceNo);

            entity.ToTable("EmployeeMedicalInsurance");

            entity.Property(e => e.MedicalInsuranceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ForTreatmentDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PersonalFamilyId).HasColumnName("PersonalFamilyID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrmedicalInsuranceType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalInsuranceType");
        });

        modelBuilder.Entity<EmployeeMiscellaneousBenefit>(entity =>
        {
            entity.ToTable("EmployeeMiscellaneousBenefit");

            entity.Property(e => e.EmployeeMiscellaneousBenefitId).HasColumnName("EmployeeMiscellaneousBenefitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrmiscellaneousBenefit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMiscellaneousBenefit");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeNeedleStickInjury>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("EmployeeNeedleStickInjury");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Chronology)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Diagnose)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExposedArea)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpDate).HasColumnType("datetime");
            entity.Property(e => e.FollowUpNotes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.KnownBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OfficerImunizationHistory)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientImunizationHistory)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Recomendation)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeOrganization>(entity =>
        {
            entity.ToTable("EmployeeOrganization");

            entity.Property(e => e.EmployeeOrganizationId).HasColumnName("EmployeeOrganizationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrorganizationLevelType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROrganizationLevelType");
            entity.Property(e => e.SubDivisonId).HasColumnName("SubDivisonID");
            entity.Property(e => e.SubOrganizationId).HasColumnName("SubOrganizationID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeOrientation>(entity =>
        {
            entity.ToTable("EmployeeOrientation");

            entity.Property(e => e.EmployeeOrientationId).HasColumnName("EmployeeOrientationID");
            entity.Property(e => e.DurationHour).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.DurationMinutes).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeOvertime>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("EmployeeOvertime");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.SupervisorId).HasColumnName("SupervisorID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.ValidatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidatedByUserID");
            entity.Property(e => e.ValidatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeOvertimeItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.PersonId, e.SalaryComponentId });

            entity.ToTable("EmployeeOvertimeItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.Amount).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.WorkingHourId).HasColumnName("WorkingHourID");
        });

        modelBuilder.Entity<EmployeePerformanceAppraisal>(entity =>
        {
            entity.HasKey(e => e.PerformanceAppraisalId);

            entity.ToTable("EmployeePerformanceAppraisal");

            entity.Property(e => e.PerformanceAppraisalId).HasColumnName("PerformanceAppraisalID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParticipantItemId).HasColumnName("ParticipantItemID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Score).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ScoreText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrquarterPeriod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRQuarterPeriod");
            entity.Property(e => e.YearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeePeriodicSalary>(entity =>
        {
            entity.ToTable("EmployeePeriodicSalary");

            entity.Property(e => e.EmployeePeriodicSalaryId).HasColumnName("EmployeePeriodicSalaryID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.FromBasicSalaryAmount).HasColumnType("money");
            entity.Property(e => e.FromPositionGradeId).HasColumnName("FromPositionGradeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OvertimeAmount).HasColumnType("money");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.SrprocessType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcessType");
            entity.Property(e => e.ToPositionGradeId).HasColumnName("ToPositionGradeID");
            entity.Property(e => e.TransactionDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<EmployeePeriodicStructuralBenefit>(entity =>
        {
            entity.HasKey(e => e.CounterId);

            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NumberOfDays).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.SrstructuralBenefitsType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRStructuralBenefitsType");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeePermission>(entity =>
        {
            entity.HasKey(e => e.PermissionId);

            entity.ToTable("EmployeePermission");

            entity.Property(e => e.PermissionId).HasColumnName("PermissionID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PermissionDate).HasColumnType("datetime");
            entity.Property(e => e.PermissionDateFrom).HasColumnType("datetime");
            entity.Property(e => e.PermissionDateTo).HasColumnType("datetime");
            entity.Property(e => e.PermissionTimeFrom)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PermissionTimeTo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrpermissionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPermissionType");
            entity.Property(e => e.SupervisorId).HasColumnName("SupervisorID");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeePosition>(entity =>
        {
            entity.ToTable("EmployeePosition");

            entity.Property(e => e.EmployeePositionId).HasColumnName("EmployeePositionID");
            entity.Property(e => e.AssignmentNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoorporateGradeId).HasColumnName("CoorporateGradeID");
            entity.Property(e => e.CoorporateGradeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.ResignmentNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SrpositionLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPositionLevel");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeePositionGrade>(entity =>
        {
            entity.ToTable("EmployeePositionGrade");

            entity.Property(e => e.EmployeePositionGradeId).HasColumnName("EmployeePositionGradeID");
            entity.Property(e => e.DecreeNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NextPositionGradeId).HasColumnName("NextPositionGradeID");
            entity.Property(e => e.NextPositionName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NextProposalDate).HasColumnType("datetime");
            entity.Property(e => e.NextSalaryScaleId).HasColumnName("NextSalaryScaleID");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalaryScaleId).HasColumnName("SalaryScaleID");
            entity.Property(e => e.SrdecreeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDecreeType");
            entity.Property(e => e.SrdecreeTypeNext)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDecreeTypeNext");
            entity.Property(e => e.Srdp3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDp3");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeRemun>(entity =>
        {
            entity.HasKey(e => e.RemunId).HasName("PK_EmployeeRemum_ID");

            entity.ToTable("EmployeeRemun");

            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FundAllocInsetif).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FundAllocPosition).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FundAllocProcedure).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.KursInsentif).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.KursPosition).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RemunNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeRemunDetail>(entity =>
        {
            entity.HasKey(e => e.RemunDetailId).HasName("PK_RemunDetailID");

            entity.ToTable("EmployeeRemunDetail");

            entity.Property(e => e.RemunDetailId).HasColumnName("RemunDetailID");
            entity.Property(e => e.CoorporateGradeCoefficient).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.InsentifFeeGrossValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InsentifFeeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionFeeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.RenkinIndex).HasColumnType("decimal(10, 6)");
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
        });

        modelBuilder.Entity<EmployeeRl4>(entity =>
        {
            entity.ToTable("EmployeeRL4");

            entity.Property(e => e.EmployeeRl4id).HasColumnName("EmployeeRL4ID");
            entity.Property(e => e.CompanyEducationProfileId).HasColumnName("CompanyEducationProfileID");
            entity.Property(e => e.CompanyFieldOfWorkProfileId).HasColumnName("CompanyFieldOfWorkProfileID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Rl4educationId).HasColumnName("RL4EducationID");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SrmedisType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedisType");
            entity.Property(e => e.Srrl4educationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRL4EducationLevel");
            entity.Property(e => e.Srrl4educationMajor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRL4EducationMajor");
            entity.Property(e => e.Srrl4professionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRL4ProfessionType");
            entity.Property(e => e.Srrl4status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRL4Status");
            entity.Property(e => e.Srrl4type)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRL4Type");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeSalaryInfo>(entity =>
        {
            entity.HasKey(e => e.PersonId);

            entity.ToTable("EmployeeSalaryInfo");

            entity.Property(e => e.PersonId)
                .ValueGeneratedNever()
                .HasColumnName("PersonID");
            entity.Property(e => e.BankAccountName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.IncentivePositionPoints).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.JamsostekNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Npwp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SremployeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeType");
            entity.Property(e => e.SrincentivePositionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentivePositionGroup");
            entity.Property(e => e.SrincentiveServiceUnitGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentiveServiceUnitGroup");
            entity.Property(e => e.SrpaymentFrequency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentFrequency");
            entity.Property(e => e.SrremunerationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRemunerationType");
            entity.Property(e => e.SrtaxStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTaxStatus");
        });

        modelBuilder.Entity<EmployeeSalaryMatrix>(entity =>
        {
            entity.ToTable("EmployeeSalaryMatrix");

            entity.Property(e => e.EmployeeSalaryMatrixId).HasColumnName("EmployeeSalaryMatrixID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NominalAmount).HasColumnType("money");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.SrcurrencyCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCurrencyCode");
        });

        modelBuilder.Entity<EmployeeTaxStatus>(entity =>
        {
            entity.HasKey(e => new { e.PersonId, e.Sptyear });

            entity.ToTable("EmployeeTaxStatus");

            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Sptyear).HasColumnName("SPTYear");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrtaxStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTaxStatus");
        });

        modelBuilder.Entity<EmployeeThrMatrix>(entity =>
        {
            entity.ToTable("EmployeeThrMatrix");

            entity.Property(e => e.EmployeeThrMatrixId).HasColumnName("EmployeeThrMatrixID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NominalAmount).HasColumnType("money");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.SrcurrencyCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCurrencyCode");
        });

        modelBuilder.Entity<EmployeeTraining>(entity =>
        {
            entity.ToTable("EmployeeTraining");

            entity.Property(e => e.EmployeeTrainingId).HasColumnName("EmployeeTrainingID");
            entity.Property(e => e.CertificateValidityPeriod).HasColumnType("datetime");
            entity.Property(e => e.CreditPoint).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DurationHour).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.DurationMinutes).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EmployeeTrainingName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EndServiceDate).HasColumnType("datetime");
            entity.Property(e => e.EvaluationDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.PlanningCosts).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.SponsorFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SractivitySubType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRActivitySubType");
            entity.Property(e => e.SractivityType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRActivityType");
            entity.Property(e => e.SremployeeTrainingDateSeparator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTrainingDateSeparator");
            entity.Property(e => e.SremployeeTrainingPointType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTrainingPointType");
            entity.Property(e => e.SrtrainingFinancingSources)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTrainingFinancingSources");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StartServiceDate).HasColumnType("datetime");
            entity.Property(e => e.TrainingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrainingOrganizer)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeTrainingAssessmentAspect>(entity =>
        {
            entity.HasKey(e => e.AssessmentAspectId);

            entity.ToTable("EmployeeTrainingAssessmentAspect");

            entity.Property(e => e.AssessmentAspectId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssessmentAspectID");
            entity.Property(e => e.AssessmentAspectName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxValue).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.MinValue).HasColumnType("numeric(6, 2)");
        });

        modelBuilder.Entity<EmployeeTrainingAssessmentCriterion>(entity =>
        {
            entity.HasKey(e => e.AssessmentCriteriaId);

            entity.Property(e => e.AssessmentCriteriaId).HasColumnName("AssessmentCriteriaID");
            entity.Property(e => e.AssessmentCriteriaName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxValue).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.MinValue).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.Recommendation)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeTrainingEvaluation>(entity =>
        {
            entity.HasKey(e => new { e.EmployeeTrainingHistoryId, e.AssessmentAspectId });

            entity.ToTable("EmployeeTrainingEvaluation");

            entity.Property(e => e.EmployeeTrainingHistoryId).HasColumnName("EmployeeTrainingHistoryID");
            entity.Property(e => e.AssessmentAspectId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssessmentAspectID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RatingResult).HasColumnType("numeric(6, 2)");
        });

        modelBuilder.Entity<EmployeeTrainingExternalTrainer>(entity =>
        {
            entity.HasKey(e => new { e.EmployeeTrainingId, e.ExternalTrainerSeqNo }).HasName("PK_EmployeeTrainingExternalTrainer_1");

            entity.ToTable("EmployeeTrainingExternalTrainer");

            entity.Property(e => e.EmployeeTrainingId).HasColumnName("EmployeeTrainingID");
            entity.Property(e => e.ExternalTrainerSeqNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExternalTrainerName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PositionAs)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeTrainingHistory>(entity =>
        {
            entity.ToTable("EmployeeTrainingHistory");

            entity.Property(e => e.EmployeeTrainingHistoryId).HasColumnName("EmployeeTrainingHistoryID");
            entity.Property(e => e.CertificateValidityPeriod).HasColumnType("datetime");
            entity.Property(e => e.CreditPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DurationHour).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.DurationMinutes).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EmployeeTrainingId).HasColumnName("EmployeeTrainingID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EndServiceDate).HasColumnType("datetime");
            entity.Property(e => e.EvaluationDate).HasColumnType("datetime");
            entity.Property(e => e.EvaluationNote).IsUnicode(false);
            entity.Property(e => e.EvaluationNoteDateTime).HasColumnType("datetime");
            entity.Property(e => e.EvaluationScore).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.EventName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Fee).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PlanningCosts).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Recommendation)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SponsorFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SractivitySubType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRActivitySubType");
            entity.Property(e => e.SractivityType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRActivityType");
            entity.Property(e => e.SremployeeTrainingDateSeparator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTrainingDateSeparator");
            entity.Property(e => e.SremployeeTrainingPointType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTrainingPointType");
            entity.Property(e => e.SremployeeTrainingRole)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTrainingRole");
            entity.Property(e => e.SrtrainingFinancingSources)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTrainingFinancingSources");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StartServiceDate).HasColumnType("datetime");
            entity.Property(e => e.SupervisorEvaluationDateTime).HasColumnType("datetime");
            entity.Property(e => e.SupervisorEvaluationNote).IsUnicode(false);
            entity.Property(e => e.SupervisorEvaluationNoteByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SupervisorEvaluationNoteByUserID");
            entity.Property(e => e.TrainingInstitution)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeWageStructureAndScale>(entity =>
        {
            entity.ToTable("EmployeeWageStructureAndScale");

            entity.HasIndex(e => e.PersonId, "IDX_EmployeeWageStructureAndScale_PersonID");

            entity.Property(e => e.EmployeeWageStructureAndScaleId).HasColumnName("EmployeeWageStructureAndScaleID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Points).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.WageStructureAndScalePositionId).HasColumnName("WageStructureAndScalePositionID");
        });

        modelBuilder.Entity<EmployeeWageStructureAndScalePosition>(entity =>
        {
            entity.HasKey(e => e.WageStructureAndScalePositionId);

            entity.ToTable("EmployeeWageStructureAndScalePosition");

            entity.Property(e => e.WageStructureAndScalePositionId).HasColumnName("WageStructureAndScalePositionID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BasePoint).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Points).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.SremployeeJobPosition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeJobPosition");
            entity.Property(e => e.SremployeeWorkGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeWorkGroup");
            entity.Property(e => e.SremployeeWorkSubGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeWorkSubGroup");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeWageStructureAndScalePositionItem>(entity =>
        {
            entity.HasKey(e => e.WageStructureAndScalePositionItemId);

            entity.ToTable("EmployeeWageStructureAndScalePositionItem");

            entity.Property(e => e.WageStructureAndScalePositionItemId).HasColumnName("WageStructureAndScalePositionItemID");
            entity.Property(e => e.BasePoint).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LoadPoint).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Points).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrwageStructureAndScaleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWageStructureAndScaleType");
            entity.Property(e => e.WageStructureAndScaleId).HasColumnName("WageStructureAndScaleID");
            entity.Property(e => e.WageStructureAndScaleItemId).HasColumnName("WageStructureAndScaleItemID");
            entity.Property(e => e.WageStructureAndScalePositionId).HasColumnName("WageStructureAndScalePositionID");
        });

        modelBuilder.Entity<EmployeeWorkingInfo>(entity =>
        {
            entity.HasKey(e => e.PersonId);

            entity.ToTable("EmployeeWorkingInfo");

            entity.Property(e => e.PersonId)
                .ValueGeneratedNever()
                .HasColumnName("PersonID");
            entity.Property(e => e.AbsenceCardNo)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeRegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GradeYear).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsKwi).HasColumnName("IsKWI");
            entity.Property(e => e.JoinDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ManagerId).HasColumnName("ManagerID");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.ResignDate).HasColumnType("datetime");
            entity.Property(e => e.SrclinicalAuthorityLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalAuthorityLevel");
            entity.Property(e => e.SrclinicalWorkArea)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalWorkArea");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SremployeeScheduleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeScheduleType");
            entity.Property(e => e.SremployeeShiftType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeShiftType");
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
            entity.Property(e => e.SremployeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeType");
            entity.Property(e => e.SrprofessionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionType");
            entity.Property(e => e.SrremunerationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRemunerationType");
            entity.Property(e => e.SrresignReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResignReason");
        });

        modelBuilder.Entity<EncounterIh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("encounter_ihs");

            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.IdIhspatient)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("IdIHSPatient");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<EpisodeBodyDiagram>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("EpisodeBodyDiagram");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.EpisodeBodyDiagrams)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefEpisodeBodyDiagramToRegistration");
        });

        modelBuilder.Entity<EpisodeDiagnose>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("EpisodeDiagnose");

            entity.HasIndex(e => new { e.RegistrationNo, e.SrdiagnoseType }, "_dta_index_EpisodeDiagnose_DiagnoseType").IsClustered();

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnosisText)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ExternalCauseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExternalCauseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MorphologyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MorphologyID");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrdiagnoseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDiagnoseType");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.EpisodeDiagnoses)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistration133");
        });

        modelBuilder.Entity<EpisodeDiagnoseInaGroupper>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("EpisodeDiagnoseInaGroupper");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnosisText)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ExternalCauseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExternalCauseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MorphologyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MorphologyID");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrdiagnoseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiagnoseType");
        });

        modelBuilder.Entity<EpisodeProcedure>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("EpisodeProcedure");

            entity.HasIndex(e => new { e.IsVoid, e.BookingNo, e.OpNotesSeqNo }, "IX_EpisodeProcedure_IsVoid_BookingNo_OpNotesSeqNo");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.AnestesyNotes).IsUnicode(false);
            entity.Property(e => e.AssistantId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID1");
            entity.Property(e => e.AssistantId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID2");
            entity.Property(e => e.AssistantIdanestesi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDAnestesi");
            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncisionDateTime).HasColumnType("datetime");
            entity.Property(e => e.InstrumentatorId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InstrumentatorID1");
            entity.Property(e => e.InstrumentatorId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InstrumentatorID2");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OpNotesSeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingNotes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicId2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ParamedicID2");
            entity.Property(e => e.ParamedicId2a)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID2a");
            entity.Property(e => e.ParamedicId3a)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID3a");
            entity.Property(e => e.ParamedicId4a)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID4a");
            entity.Property(e => e.ParamedicIdanestesi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicIDAnestesi");
            entity.Property(e => e.ProcedureDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ProcedureDate2).HasColumnType("smalldatetime");
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ProcedureID");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProcedureTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.ProcedureTime2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.Sranestesi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAnestesi");
            entity.Property(e => e.SrprocedureCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureCategory");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.EpisodeProcedures)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistration132");
        });

        modelBuilder.Entity<EpisodeProcedureInaGroupper>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("EpisodeProcedureInaGroupper");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AnestesyNotes).IsUnicode(false);
            entity.Property(e => e.AssistantId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID1");
            entity.Property(e => e.AssistantId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID2");
            entity.Property(e => e.AssistantIdanestesi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDAnestesi");
            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.InstrumentatorId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InstrumentatorID1");
            entity.Property(e => e.InstrumentatorId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InstrumentatorID2");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OpNotesSeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperatingNotes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicId2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ParamedicID2");
            entity.Property(e => e.ParamedicId2a)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID2a");
            entity.Property(e => e.ParamedicId3a)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID3a");
            entity.Property(e => e.ParamedicId4a)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID4a");
            entity.Property(e => e.ParamedicIdanestesi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicIDAnestesi");
            entity.Property(e => e.ProcedureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ProcedureDate2).HasColumnType("smalldatetime");
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProcedureTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcedureTime2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.Sranestesi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAnestesi");
            entity.Property(e => e.SrprocedureCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureCategory");
        });

        modelBuilder.Entity<EpisodeSoape>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("EpisodeSOAPE");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.Assesment)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AttendingNotes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.Evaluation)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ImportedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Objective)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Planning)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.Soapedate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime")
                .HasColumnName("SOAPEDate");
            entity.Property(e => e.Soapetime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength()
                .HasColumnName("SOAPETime");
            entity.Property(e => e.Subjective)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ToRegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToRegistrationInfoMedicID");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.EpisodeSoapes)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistration134");
        });

        modelBuilder.Entity<EsignLog>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("EsignLog");

            entity.HasIndex(e => new { e.ProgramId, e.RegistrationNo }, "IX_EsignLog_ProgramID_RegistrationNo");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.ApiUrl)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Nik)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ProgramID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SignedFilePath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EsignLogHist>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("EsignLogHist");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.ApiUrl)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Nik)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SignedFilePath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EsxconfigDatum>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKESXConfigData");

            entity.ToTable("ESXConfigData");

            entity.HasIndex(e => e.UtccollectionDateTime, "IX_ESXConfigData_UTCCollectionDateTime");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.BootTime).HasColumnType("datetime");
            entity.Property(e => e.Cpumhz).HasColumnName("CPUMHz");
            entity.Property(e => e.DomainName).HasMaxLength(256);
            entity.Property(e => e.HostName).HasMaxLength(256);
            entity.Property(e => e.NumCpucores).HasColumnName("NumCPUCores");
            entity.Property(e => e.NumCpupkgs).HasColumnName("NumCPUPkgs");
            entity.Property(e => e.NumCputhreads).HasColumnName("NumCPUThreads");
            entity.Property(e => e.NumNics).HasColumnName("NumNICs");
            entity.Property(e => e.Uuid)
                .HasMaxLength(128)
                .HasColumnName("UUID");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.EsxconfigData)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKESXConfigDataMonitoredSQLServers");
        });

        modelBuilder.Entity<Esxstatistic>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKESXStatistics");

            entity.ToTable("ESXStatistics");

            entity.HasIndex(e => e.UtccollectionDateTime, "IX_ESXStatistics_UTCCollectionDateTime");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.Cpuusage).HasColumnName("CPUUsage");
            entity.Property(e => e.CpuusageMhz).HasColumnName("CPUUsageMHz");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.Esxstatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKESXStatisticsMonitoredSQLServers");
        });

        modelBuilder.Entity<EventMealOrder>(entity =>
        {
            entity.HasKey(e => e.OrderNo);

            entity.ToTable("EventMealOrder");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.EventName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EventTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.Pic)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EventMealOrderItem>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.FoodId });

            entity.ToTable("EventMealOrderItem");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExamSummary>(entity =>
        {
            entity.ToTable("ExamSummary");

            entity.Property(e => e.ExamSummaryId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ExamSummaryID");
            entity.Property(e => e.ExamSummaryName).IsUnicode(false);
            entity.Property(e => e.ExamSummaryNameEng).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrexamSummaryType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRExamSummaryType");
        });

        modelBuilder.Entity<ExamSummaryResult>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("ExamSummaryResult");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrexamSummaryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRExamSummaryType");
        });

        modelBuilder.Entity<Fabric>(entity =>
        {
            entity.HasKey(e => e.FabricId).IsClustered(false);

            entity.ToTable("Fabric");

            entity.Property(e => e.FabricId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FabricID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContractEnd)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ContractNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContractStart)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ContractSummary)
                .HasDefaultValue("")
                .HasColumnType("text");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FabricName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsPkp).HasColumnName("IsPKP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaxRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<FamilyMedicalHistory>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.SrmedicalDisease });

            entity.ToTable("FamilyMedicalHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.SrmedicalDisease)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalDisease");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.ToTable("Food");

            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.FoodName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.QtyPortion).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrfoodGroup1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFoodGroup1");
            entity.Property(e => e.SrfoodGroup2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFoodGroup2");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.Weight).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<FoodItem>(entity =>
        {
            entity.HasKey(e => new { e.FoodId, e.ItemId });

            entity.ToTable("FoodItem");

            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<FoodPackage>(entity =>
        {
            entity.HasKey(e => new { e.FoodId, e.FoodDetailId });

            entity.ToTable("FoodPackage");

            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.FoodDetailId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodDetailID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GabunganUlang>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_GabunganUlang");

            entity.Property(e => e.EklaimTariff).HasMaxLength(255);
            entity.Property(e => e.GroupId)
                .HasMaxLength(255)
                .HasColumnName("GroupID");
            entity.Property(e => e.ItemType).HasMaxLength(255);
            entity.Property(e => e.Kls1JasaDokter).HasColumnName("kls1_JasaDokter");
            entity.Property(e => e.Kls1JasaDokterAnak).HasColumnName("kls1_JasaDokterAnak");
            entity.Property(e => e.Kls1JasaDokterAnastesi).HasColumnName("kls1_JasaDokterAnastesi");
            entity.Property(e => e.Kls1Sarana).HasColumnName("kls1_Sarana");
            entity.Property(e => e.Kls1Total).HasColumnName("kls1_Total");
            entity.Property(e => e.Kls2JasaDokter).HasColumnName("kls2_JasaDokter");
            entity.Property(e => e.Kls2JasaDokterAnak).HasColumnName("kls2_JasaDokterAnak");
            entity.Property(e => e.Kls2JasaDokterAnastesi).HasColumnName("kls2_JasaDokterAnastesi");
            entity.Property(e => e.Kls2Sarana).HasColumnName("kls2_Sarana");
            entity.Property(e => e.Kls2Total).HasColumnName("kls2_Total");
            entity.Property(e => e.Kls3JasaDokter).HasColumnName("kls3_JasaDokter");
            entity.Property(e => e.Kls3JasaDokterAnak).HasColumnName("kls3_JasaDokterAnak");
            entity.Property(e => e.Kls3JasaDokterAnastesi).HasColumnName("kls3_JasaDokterAnastesi");
            entity.Property(e => e.Kls3Sarana).HasColumnName("kls3_Sarana");
            entity.Property(e => e.Kls3Total).HasColumnName("kls3_Total");
            entity.Property(e => e.KodeEklaim).HasMaxLength(255);
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.VipJasaDokter).HasColumnName("vip_JasaDokter");
            entity.Property(e => e.VipJasaDokterAnak).HasColumnName("vip_JasaDokterAnak");
            entity.Property(e => e.VipJasaDokterAnastesi).HasColumnName("vip_JasaDokterAnastesi");
            entity.Property(e => e.VipSarana).HasColumnName("vip_Sarana");
            entity.Property(e => e.VipTotal).HasColumnName("vip_Total");
            entity.Property(e => e.VvipJasaDokter).HasColumnName("vvip_JasaDokter");
            entity.Property(e => e.VvipJasaDokterAnak).HasColumnName("vvip_JasaDokterAnak");
            entity.Property(e => e.VvipJasaDokterAnastesi).HasColumnName("vvip_JasaDokterAnastesi");
            entity.Property(e => e.VvipSarana).HasColumnName("vvip_Sarana");
            entity.Property(e => e.VvipTotal).HasColumnName("vvip_Total");
        });

        modelBuilder.Entity<GroomingLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GroomingLog");

            entity.HasIndex(e => e.UtcactionEndDateTime, "GroomingLogCL").IsClustered();

            entity.Property(e => e.Action).HasMaxLength(256);
            entity.Property(e => e.InstanceName).HasMaxLength(256);
            entity.Property(e => e.RunId).HasColumnName("RunID");
            entity.Property(e => e.UtcactionEndDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCActionEndDateTime");
        });

        modelBuilder.Entity<Guarantor>(entity =>
        {
            entity.HasKey(e => e.GuarantorId).IsClustered(false);

            entity.ToTable("Guarantor");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GuarantorID");
            entity.Property(e => e.AdminAmountLimit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AdminAmountLimitOp).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AdminPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.AdminPercentageOp).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.AdminValueMinimum).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AdminValueMinimumOp).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ChartOfAccountIdIpr).HasColumnName("ChartOfAccountIdIPR");
            entity.Property(e => e.ChartOfAccountIdTemporaryIpr).HasColumnName("ChartOfAccountIdTemporaryIPR");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContractEnd)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ContractNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContractStart)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ContractSummary)
                .HasDefaultValue("")
                .HasColumnType("text");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreditAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreditLimit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmergencyAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.GuarantorHeaderId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorHeaderID");
            entity.Property(e => e.GuarantorName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ItemMedicMarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemMedicMarginID");
            entity.Property(e => e.ItemMedicMarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ItemNonMedicMarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemNonMedicMarginID");
            entity.Property(e => e.ItemNonMedicMarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.NoteCompanyList)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.OutpatientAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PrescriptionLocationIdEmr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrescriptionLocationIdEMR");
            entity.Property(e => e.PrescriptionLocationIdIpr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrescriptionLocationIdIPR");
            entity.Property(e => e.PrescriptionLocationIdOpr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrescriptionLocationIdOPR");
            entity.Property(e => e.PrescriptionServiceUnitIdEmr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrescriptionServiceUnitIdEMR");
            entity.Property(e => e.PrescriptionServiceUnitIdIpr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrescriptionServiceUnitIdIPR");
            entity.Property(e => e.PrescriptionServiceUnitIdOpr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrescriptionServiceUnitIdOPR");
            entity.Property(e => e.ReportRlid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReportRLID");
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.RoundingTransaction).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SrbusinessMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRBusinessMethod");
            entity.Property(e => e.SrguarantorIncomeGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorIncomeGroup");
            entity.Property(e => e.SrguarantorRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorRuleType");
            entity.Property(e => e.SrguarantorType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRGuarantorType");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
            entity.Property(e => e.SrphysicianFeeCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianFeeCategory");
            entity.Property(e => e.SrphysicianFeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianFeeType");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTariffType");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SubLedgerIdIpr).HasColumnName("SubLedgerIdIPR");
            entity.Property(e => e.SubledgerIdTemporaryIpr).HasColumnName("SubledgerIdTemporaryIPR");
            entity.Property(e => e.VirtualAccountBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VirtualAccountName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.VirtualAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GuarantorBridging>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.SrbridgingType, e.BridgingId });

            entity.ToTable("GuarantorBridging");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.BridgingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BridgingID");
            entity.Property(e => e.BridgingCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<GuarantorDeposit>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("GuarantorDeposit");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CardHolderName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardType");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorDepositBalance>(entity =>
        {
            entity.HasKey(e => e.GuarantorId);

            entity.ToTable("GuarantorDepositBalance");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.BalanceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorDepositMovement>(entity =>
        {
            entity.HasKey(e => e.MovementId);

            entity.ToTable("GuarantorDepositMovement");

            entity.Property(e => e.MovementId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MovementID");
            entity.Property(e => e.Credit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Debet).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.InitialBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MovementDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GuarantorDocumentChecklist>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.SrregistrationType });

            entity.ToTable("GuarantorDocumentChecklist");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrdocumentChecklist)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDocumentChecklist");
        });

        modelBuilder.Entity<GuarantorInfo>(entity =>
        {
            entity.ToTable("GuarantorInfo");

            entity.Property(e => e.GuarantorInfoId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GuarantorInfoID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Information).HasColumnType("text");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorInfoSummary>(entity =>
        {
            entity.HasKey(e => e.GuarantorId);

            entity.ToTable("GuarantorInfoSummary");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorItemGroupProductMargin>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.ItemGroupId });

            entity.ToTable("GuarantorItemGroupProductMargin");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MarginID");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
        });

        modelBuilder.Entity<GuarantorItemPrescriptionByTherapyRule>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.SrtherapyGroup });

            entity.ToTable("GuarantorItemPrescriptionByTherapyRule");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.SrtherapyGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTherapyGroup");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmergencyAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OutpatientAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrguarantorRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorRuleType");
        });

        modelBuilder.Entity<GuarantorItemPrescriptionRule>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.ItemId });

            entity.ToTable("GuarantorItemPrescriptionRule");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmergencyAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OutpatientAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrguarantorRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorRuleType");
        });

        modelBuilder.Entity<GuarantorItemRestriction>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.ItemId });

            entity.HasIndex(e => e.ItemId, "IDX_GuarantorItemRestrictions_ItemID");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorItemRule>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.ItemId })
                .HasName("PK_RegistrationItemRule_1")
                .IsClustered(false);

            entity.ToTable("GuarantorItemRule");

            entity.HasIndex(e => e.GuarantorId, "IX_GuarantorItemRule_GuarantorID");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmergencyAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OutpatientAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrguarantorRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorRuleType");
        });

        modelBuilder.Entity<GuarantorItemRuleTariffComponent>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.ItemId, e.TariffComponentId });

            entity.ToTable("GuarantorItemRuleTariffComponent");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmergencyAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OutpatientAmountValue).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<GuarantorItemTypeRule>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.SritemType });

            entity.ToTable("GuarantorItemTypeRule");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorServiceUnitRule>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.ServiceUnitId });

            entity.ToTable("GuarantorServiceUnitRule");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorSurgicalPackageCovered>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.PackageId });

            entity.ToTable("GuarantorSurgicalPackageCovered");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.PackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GuarantorSurgicalPackageCoveredItem>(entity =>
        {
            entity.HasKey(e => new { e.GuarantorId, e.PackageId, e.ItemId });

            entity.ToTable("GuarantorSurgicalPackageCoveredItem");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.PackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.CoveredAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<HandHygiene>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("HandHygiene");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.DivisionId).HasColumnName("DivisionID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ObserverId).HasColumnName("ObserverID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.StartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubDivisionId).HasColumnName("SubDivisionID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<HandHygieneItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.Sropportunity });

            entity.ToTable("HandHygieneItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sropportunity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROpportunity");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Srapply6StepsResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRApply6StepsResult");
            entity.Property(e => e.SrhandHygieneNote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRHandHygieneNote");
            entity.Property(e => e.SrhandWashType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRHandWashType");
        });

        modelBuilder.Entity<HasilPasien>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HasilPasien");

            entity.Property(e => e.CheckupResultFractionCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CheckupResultFractionName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckupResultGroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckupResultTestCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CheckupResultTestName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrderLabCritical)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderLabNama)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrderLabNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderLabNoMr)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OrderLabNoMR");
            entity.Property(e => e.OrderLabTglOrder).HasColumnType("datetime");
            entity.Property(e => e.OutRange)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Satuan)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StandarValue).IsUnicode(false);
            entity.Property(e => e.WithinRange)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HealthIndexCofficient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_HealthIndexCofficientsName");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.UtclastUpdatedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCLastUpdatedDateTime");
        });

        modelBuilder.Entity<HealthRecord>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.QuestionFormId });

            entity.ToTable("HealthRecord");

            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("000")
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RecordDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RecordTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
        });

        modelBuilder.Entity<HealthRecordLine>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.QuestionFormId, e.QuestionGroupId, e.QuestionId });

            entity.ToTable("HealthRecordLine");

            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("000")
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionAnswerNum).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.QuestionAnswerPrefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionLineID");
            entity.Property(e => e.QuestionAnswerSuffix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Healthcare>(entity =>
        {
            entity.ToTable("Healthcare");

            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.AdditionalInfo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailAddr)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FoundationAddr1)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FoundationAddr2)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FoundationCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FoundationFaxNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FoundationName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FoundationPhoneNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FoundationZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HealthcareLogo).HasColumnType("image");
            entity.Property(e => e.HealthcareName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.HospitalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HospitalType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Npwp)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NPWP");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Provinces)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProvincesCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HisBedBridging>(entity =>
        {
            entity.HasKey(e => e.BedCode).HasName("PK__HisBedBr__A8A71060DD9786C9");

            entity.ToTable("HisBedBridging");

            entity.HasIndex(e => e.BedCode, "idxBedCode").IsUnique();

            entity.HasIndex(e => e.BedId, "idxBedId").IsUnique();

            entity.Property(e => e.BedCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BedID");
            entity.Property(e => e.BedPrefix)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.InsertedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertedByUserID");
            entity.Property(e => e.InsertedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(0);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Optional3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Qrcode).HasColumnName("QRCode");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
        });

        modelBuilder.Entity<Hl7message>(entity =>
        {
            entity.HasKey(e => e.MessageId);

            entity.ToTable("HL7Message");

            entity.Property(e => e.MessageId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MessageID");
            entity.Property(e => e.MessageDateTime).HasColumnType("datetime");
            entity.Property(e => e.RefferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks1).IsUnicode(false);
            entity.Property(e => e.Remarks2).IsUnicode(false);
            entity.Property(e => e.SritemType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
        });

        modelBuilder.Entity<HolidaySchedule>(entity =>
        {
            entity.HasKey(e => new { e.PeriodYear, e.HolidayDate });

            entity.ToTable("HolidaySchedule");

            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.HolidayDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<HomePrescription>(entity =>
        {
            entity.HasKey(e => e.MedicationReceiveNo);

            entity.ToTable("HomePrescription");

            entity.Property(e => e.MedicationReceiveNo).ValueGeneratedNever();
            entity.Property(e => e.Afternoon)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DrugName)
                .HasMaxLength(600)
                .IsUnicode(false);
            entity.Property(e => e.Indication)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Morning)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Night)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Noon)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HospitalHoliday>(entity =>
        {
            entity.HasKey(e => e.HospitalHolydayDateTime).HasName("PK__Hospital__0DCBF04C17E6D2DC");

            entity.Property(e => e.IsRepetitive).HasDefaultValue(false);
            entity.Property(e => e.LastCreatedUserId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("LastCreatedUserID");
        });

        modelBuilder.Entity<HospitalInfo>(entity =>
        {
            entity.ToTable("HospitalInfo");

            entity.Property(e => e.HospitalInfoId).HasColumnName("HospitalInfoID");
            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HospitalName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Srcity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCity");
            entity.Property(e => e.Srstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRState");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HostName>(entity =>
        {
            entity.HasKey(e => e.HostNameId).HasName("PKHostNames");

            entity.HasIndex(e => e.HostName1, "UKHostName").IsUnique();

            entity.Property(e => e.HostNameId).HasColumnName("HostNameID");
            entity.Property(e => e.HostName1)
                .HasMaxLength(256)
                .HasColumnName("HostName");
        });

        modelBuilder.Entity<HumanBasePeriod>(entity =>
        {
            entity.ToTable("HumanBasePeriod");

            entity.Property(e => e.HumanBasePeriodId).HasColumnName("HumanBasePeriodID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PeriodeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.YearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<IbNyeriFeb22>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_IbNyeriFeb22");

            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.QtyAkhir).HasColumnType("money");
            entity.Property(e => e.QtyAwal).HasColumnType("money");
            entity.Property(e => e.QtyIn).HasColumnType("money");
            entity.Property(e => e.QtyOut).HasColumnType("money");
        });

        modelBuilder.Entity<IhsMapping>(entity =>
        {
            entity.HasKey(e => new { e.AvicennaId, e.SrsatuSehatMapping }).HasName("PK__IhsMappi__49D34AA474D51A68");

            entity.ToTable("IhsMapping");

            entity.HasIndex(e => e.IhsId, "IhsID").IsUnique();

            entity.Property(e => e.AvicennaId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("AvicennaID");
            entity.Property(e => e.SrsatuSehatMapping)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("SRSatuSehatMapping");
            entity.Property(e => e.IhsId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("IhsID");
            entity.Property(e => e.LastCreatedByUserId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("LastCreatedByUserID");
        });

        modelBuilder.Entity<IhsParamedictemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ihs_paramedictemp");

            entity.Property(e => e.DocterName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicIdIhs)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ImageTemplate>(entity =>
        {
            entity.ToTable("ImageTemplate");

            entity.Property(e => e.ImageTemplateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ImageTemplateID");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Image).HasColumnType("image");
            entity.Property(e => e.ImageTemplateName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrimageTemplateType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRImageTemplateType");
        });

        modelBuilder.Entity<Immunization>(entity =>
        {
            entity.ToTable("Immunization");

            entity.Property(e => e.ImmunizationId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ImmunizationID");
            entity.Property(e => e.ImmunizationName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImmunizationItemProductMedic>(entity =>
        {
            entity.HasKey(e => new { e.ImmunizationId, e.ItemId });

            entity.ToTable("ImmunizationItemProductMedic");

            entity.Property(e => e.ImmunizationId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ImmunizationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImplantInstallation>(entity =>
        {
            entity.HasKey(e => new { e.BookingNo, e.SeqNo });

            entity.ToTable("ImplantInstallation");

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ImplantType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PlacementSite)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Incentive>(entity =>
        {
            entity.HasKey(e => e.IcentiveId);

            entity.ToTable("Incentive");

            entity.Property(e => e.IcentiveId).HasColumnName("IcentiveID");
            entity.Property(e => e.IncentiveName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<IncentiveDetail>(entity =>
        {
            entity.ToTable("IncentiveDetail");

            entity.Property(e => e.IncentiveDetailId).HasColumnName("IncentiveDetailID");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IcentiveId).HasColumnName("IcentiveID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceYearFrom).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ServiceYearTo).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SremployeeTypeId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SREmployeeTypeID");
            entity.Property(e => e.SrpositionLevelId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRPositionLevelID");
        });

        modelBuilder.Entity<IncidentType>(entity =>
        {
            entity.HasKey(e => new { e.SrincidentType, e.ComponentId });

            entity.ToTable("IncidentType");

            entity.Property(e => e.SrincidentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentType");
            entity.Property(e => e.ComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ComponentID");
            entity.Property(e => e.ComponentName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<IncidentTypeItem>(entity =>
        {
            entity.HasKey(e => new { e.SrincidentType, e.ComponentId, e.SubComponentId });

            entity.ToTable("IncidentTypeItem");

            entity.Property(e => e.SrincidentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentType");
            entity.Property(e => e.ComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ComponentID");
            entity.Property(e => e.SubComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubComponentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SubComponentName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IncomeJournalStatus>(entity =>
        {
            entity.ToTable("IncomeJournalStatus");

            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Indication>(entity =>
        {
            entity.HasKey(e => e.IndicationId).HasName("PK__Indicati__4CF37355153D81E4");

            entity.ToTable("Indication");

            entity.Property(e => e.IndicationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IndicationID");
            entity.Property(e => e.IndicationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Infection>(entity =>
        {
            entity.ToTable("Infection");

            entity.Property(e => e.InfectionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InfectionID");
            entity.Property(e => e.AbLev1Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.AbLev2Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.AbLev3Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.AbRestrictionType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("INF")
                .IsFixedLength();
            entity.Property(e => e.InfectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParentInfectionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentInfectionID");
        });

        modelBuilder.Entity<InfectionAntibiotic>(entity =>
        {
            entity.HasKey(e => new { e.InfectionId, e.AntibioticLevel, e.ItemId });

            entity.ToTable("InfectionAntibiotic");

            entity.Property(e => e.InfectionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InfectionID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InhealthSjp>(entity =>
        {
            entity.HasKey(e => e.Nosjp);

            entity.ToTable("InhealthSJP");

            entity.Property(e => e.Nosjp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nosjp");
            entity.Property(e => e.DetailKeanggotaan).IsUnicode(false);
            entity.Property(e => e.Informasitambahan)
                .IsUnicode(false)
                .HasColumnName("informasitambahan");
            entity.Property(e => e.Jenispelayanan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("jenispelayanan");
            entity.Property(e => e.Kecelakaankerja).HasColumnName("kecelakaankerja");
            entity.Property(e => e.Kelasrawat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("kelasrawat");
            entity.Property(e => e.Kodediagnosatambahan)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("kodediagnosatambahan");
            entity.Property(e => e.Kodediagnosautama)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("kodediagnosautama");
            entity.Property(e => e.Kodejenpelruangrawat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("kodejenpelruangrawat");
            entity.Property(e => e.Kodeprovider)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("kodeprovider");
            entity.Property(e => e.Kodeproviderasalrujukan)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("kodeproviderasalrujukan");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NamaProviderAsalRujukan)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoTransaksi)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Nokainhealth)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nokainhealth");
            entity.Property(e => e.Nomorasalrujukan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nomorasalrujukan");
            entity.Property(e => e.Nomormedicalreport)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("nomormedicalreport");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Poli)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("poli");
            entity.Property(e => e.TanggalLahir).HasColumnType("smalldatetime");
            entity.Property(e => e.TanggalPulang).HasColumnType("smalldatetime");
            entity.Property(e => e.Tanggalasalrujukan)
                .HasColumnType("smalldatetime")
                .HasColumnName("tanggalasalrujukan");
            entity.Property(e => e.Tanggalpelayanan)
                .HasColumnType("smalldatetime")
                .HasColumnName("tanggalpelayanan");
            entity.Property(e => e.Username)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<InitialGl>(entity =>
        {
            entity.HasKey(e => new { e.YearNo, e.MonthNo, e.AccountId });

            entity.ToTable("InitialGL");

            entity.Property(e => e.YearNo)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MonthNo)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AccountId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AccountID");
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.CreditConvert).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.DebetAmount).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.DebetConvert).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.InitialRate).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SracctLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAcctLevel");
            entity.Property(e => e.SracctSubsidiary)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAcctSubsidiary");
            entity.Property(e => e.Srcurrency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCurrency");
        });

        modelBuilder.Entity<InitialGlitem>(entity =>
        {
            entity.HasKey(e => new { e.YearNo, e.MonthNo, e.AccountId, e.SracctSubsidiary, e.SubsidiaryId });

            entity.ToTable("InitialGLItem");

            entity.Property(e => e.YearNo)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MonthNo)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AccountId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AccountID");
            entity.Property(e => e.SracctSubsidiary)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAcctSubsidiary");
            entity.Property(e => e.SubsidiaryId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SubsidiaryID");
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.CreditConvert).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.DebetAmount).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.DebetConvert).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.InitialRate).HasColumnType("decimal(20, 7)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Srcurrency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCurrency");
        });

        modelBuilder.Entity<InitialLeaveType>(entity =>
        {
            entity.ToTable("InitialLeaveType");

            entity.Property(e => e.InitialLeaveTypeId)
                .ValueGeneratedNever()
                .HasColumnName("InitialLeaveTypeID");
            entity.Property(e => e.LeaveTypeName)
                .HasMaxLength(70)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InosinfectionMonitoring>(entity =>
        {
            entity.HasKey(e => e.MonitoringId).HasName("PK_INOSInfectionMonitoring_1");

            entity.ToTable("INOSInfectionMonitoring");

            entity.Property(e => e.MonitoringId).HasColumnName("MonitoringID");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.IsHap).HasColumnName("IsHAP");
            entity.Property(e => e.IsIadp).HasColumnName("IsIADP");
            entity.Property(e => e.IsIlo).HasColumnName("IsILO");
            entity.Property(e => e.IsIsk).HasColumnName("IsISK");
            entity.Property(e => e.IsVap).HasColumnName("IsVAP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MonitoringDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<IntermBill>(entity =>
        {
            entity.HasKey(e => e.IntermBillNo);

            entity.ToTable("IntermBill");

            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdministrationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AskesCoveredSeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiscAdmGuarantor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscAdmPatient).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.GuarantorAdministrationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IntermBillDate).HasColumnType("datetime");
            entity.Property(e => e.JournalIncomePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InvBa20220401>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_invBa_20220401");

            entity.Property(e => e.AJml)
                .HasColumnType("money")
                .HasColumnName("a_jml");
            entity.Property(e => e.ANilai)
                .HasColumnType("money")
                .HasColumnName("a_nilai");
            entity.Property(e => e.Depo).HasMaxLength(255);
            entity.Property(e => e.Hpr)
                .HasColumnType("money")
                .HasColumnName("hpr");
            entity.Property(e => e.InJml)
                .HasColumnType("money")
                .HasColumnName("in_jml");
            entity.Property(e => e.InNilai)
                .HasColumnType("money")
                .HasColumnName("in_nilai");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.No).HasColumnName("no");
            entity.Property(e => e.OutJml)
                .HasColumnType("money")
                .HasColumnName("out_jml");
            entity.Property(e => e.OutNilai)
                .HasColumnType("money")
                .HasColumnName("out_nilai");
            entity.Property(e => e.SaJml)
                .HasColumnType("money")
                .HasColumnName("sa_jml");
            entity.Property(e => e.SaNilai)
                .HasColumnType("money")
                .HasColumnName("sa_nilai");
        });

        modelBuilder.Entity<InvBalDes22>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_InvBalDes22");

            entity.Property(e => e.BalJml).HasColumnName("BAL_Jml");
            entity.Property(e => e.BalNilai).HasColumnName("BAL_Nilai");
            entity.Property(e => e.Hpr).HasColumnName("HPR");
            entity.Property(e => e.InJml).HasColumnName("IN_Jml");
            entity.Property(e => e.InNilai).HasColumnName("IN_Nilai");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LocationId)
                .HasMaxLength(255)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName).HasMaxLength(255);
            entity.Property(e => e.OutJml).HasColumnName("OUT_Jml");
            entity.Property(e => e.OutNilai).HasColumnName("OUT_Nilai");
            entity.Property(e => e.SaJml).HasColumnName("SA_Jml");
            entity.Property(e => e.SaNilai).HasColumnName("SA_Nilai");
        });

        modelBuilder.Entity<InvBalanceDes21>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_InvBalanceDes21");

            entity.Property(e => e.AkJumlah)
                .HasColumnType("money")
                .HasColumnName("Ak_Jumlah");
            entity.Property(e => e.AkNilai)
                .HasColumnType("money")
                .HasColumnName("Ak_Nilai");
            entity.Property(e => e.AwJumlah)
                .HasColumnType("money")
                .HasColumnName("Aw_Jumlah");
            entity.Property(e => e.AwNilai)
                .HasColumnType("money")
                .HasColumnName("Aw_Nilai");
            entity.Property(e => e.Hpr).HasColumnType("money");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LocationId)
                .HasMaxLength(255)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName).HasMaxLength(255);
            entity.Property(e => e.QkJumlah)
                .HasColumnType("money")
                .HasColumnName("Qk_Jumlah");
            entity.Property(e => e.QkNilai)
                .HasColumnType("money")
                .HasColumnName("Qk_Nilai");
            entity.Property(e => e.QmJumlah)
                .HasColumnType("money")
                .HasColumnName("Qm_Jumlah");
            entity.Property(e => e.QmNilai)
                .HasColumnType("money")
                .HasColumnName("Qm_Nilai");
        });

        modelBuilder.Entity<InvBalanceJan22>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_InvBalanceJan22");

            entity.Property(e => e.AkJumlah)
                .HasColumnType("money")
                .HasColumnName("Ak_Jumlah");
            entity.Property(e => e.AkNilai)
                .HasColumnType("money")
                .HasColumnName("Ak_Nilai");
            entity.Property(e => e.AwJumlah)
                .HasColumnType("money")
                .HasColumnName("Aw_Jumlah");
            entity.Property(e => e.AwNilai)
                .HasColumnType("money")
                .HasColumnName("Aw_Nilai");
            entity.Property(e => e.Hpr).HasColumnType("money");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LocationId)
                .HasMaxLength(255)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName).HasMaxLength(255);
            entity.Property(e => e.QkJumlah)
                .HasColumnType("money")
                .HasColumnName("Qk_Jumlah");
            entity.Property(e => e.QkNilai)
                .HasColumnType("money")
                .HasColumnName("Qk_Nilai");
            entity.Property(e => e.QmJumlah)
                .HasColumnType("money")
                .HasColumnName("Qm_Jumlah");
            entity.Property(e => e.QmNilai)
                .HasColumnType("money")
                .HasColumnName("Qm_Nilai");
        });

        modelBuilder.Entity<InventoryBalance>(entity =>
        {
            entity.HasKey(e => new { e.PeriodDate, e.LocationId, e.ItemId }).HasName("PK_InventoryBalance_1");

            entity.ToTable("InventoryBalance");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Balance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BalanceIn).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BalanceOut).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BeginningBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiffQuantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InitialQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastQuantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<InventoryBalanceBak>(entity =>
        {
            entity.HasKey(e => new { e.PeriodDate, e.LocationId, e.ItemId });

            entity.ToTable("_InventoryBalanceBak");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Balance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BalanceIn).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BalanceOut).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BeginningBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiffQuantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InitialQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastQuantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<InventoryBalanceBak20220401>(entity =>
        {
            entity.HasKey(e => new { e.PeriodDate, e.LocationId, e.ItemId }).HasName("PK_InventoryBalance_bak20220401");

            entity.ToTable("_InventoryBalance_bak20220401");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Balance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BalanceIn).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BalanceOut).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BeginningBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiffQuantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InitialQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastQuantity).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceNo);

            entity.HasIndex(e => e.GuarantorId, "idx_GuarID");

            entity.HasIndex(e => new { e.IsApproved, e.IsVoid, e.IsInvoicePayment, e.IsAdditionalInvoice }, "idx_IS");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AgingDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BkuAccountId).HasColumnName("BkuAccountID");
            entity.Property(e => e.CardFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CardHolderName).HasMaxLength(100);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.EndPeriod).HasColumnType("smalldatetime");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceDueDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNotes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTop)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("InvoiceTOP");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PaymentApprovedByUserID");
            entity.Property(e => e.PaymentApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PaymentByUserID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PrintReceiptAsName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .HasColumnName("SRCardType");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SrinvoicePayment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInvoicePayment");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .HasColumnName("SRPaymentType");
            entity.Property(e => e.SrreceivableStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReceivableStatus");
            entity.Property(e => e.SrreceivableType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReceivableType");
            entity.Property(e => e.StartPeriod).HasColumnType("smalldatetime");
            entity.Property(e => e.TransferDate).HasColumnType("datetime");
            entity.Property(e => e.TransferNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VerifyByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VerifyByUserID");
            entity.Property(e => e.VerifyDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoidReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VoucherId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VoucherID");
        });

        modelBuilder.Entity<InvoiceAdjusment>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("InvoiceAdjusment");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BankCost).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InvoicePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherCost).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Reason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SupplierGuarantor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceSupplier>(entity =>
        {
            entity.HasKey(e => e.InvoiceNo);

            entity.ToTable("InvoiceSupplier");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BkuAccountId).HasColumnName("BkuAccountID");
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceDueDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceNotes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.InvoicePaymentPlanDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceSuppNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTop)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("InvoiceTOP");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PaymentApprovedByUserID");
            entity.Property(e => e.PaymentApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrinvoicePayment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInvoicePayment");
            entity.Property(e => e.SrpayableStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPayableStatus");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.VerifyByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VerifyByUserID");
            entity.Property(e => e.VerifyDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VoucherID");
        });

        modelBuilder.Entity<InvoiceSupplierItem>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceNo, e.TransactionNo }).HasName("PK_InvoiceSupplierItem_1");

            entity.ToTable("InvoiceSupplierItem", tb => tb.HasTrigger("TriggerInvoiceSupplierItemBeforeDelete"));

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AccountId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AccountID");
            entity.Property(e => e.AgingDate).HasColumnType("datetime");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DownPaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InvoiceReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceSn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("InvoiceSN");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OtherDeduction).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PaymentApprovedByUserID");
            entity.Property(e => e.PaymentApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PaymentByUserID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.Pph22Amount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PPh22Amount");
            entity.Property(e => e.Pph23Amount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PPh23Amount");
            entity.Property(e => e.PphAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PphPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PpnAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PPnAmount");
            entity.Property(e => e.SrinvoicePayment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInvoicePayment");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.Srpph)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPph");
            entity.Property(e => e.StampAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TaxInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VerifyAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VerifyByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VerifyByUserID");
            entity.Property(e => e.VerifyDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VoucherID");
        });

        modelBuilder.Entity<InvoiceSupplierItemConsignment>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceNo, e.TransactionNo, e.SequenceNo });

            entity.ToTable("InvoiceSupplierItemConsignment");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<InvoicesItem>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceNo, e.PaymentNo }).HasName("PK_InvoicesItem_1");

            entity.ToTable("InvoicesItem", tb => tb.HasTrigger("TriggerInvoicesItemBeforeDelete"));

            entity.HasIndex(e => e.InvoiceReferenceNo, "idx_InvRefNo");

            entity.HasIndex(e => e.RegistrationNo, "idx_RegNo");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AccountId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AccountID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BankCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClaimDifferenceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.InvoiceReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OtherAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PphAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PphPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PpnAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PpnPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.Srpph)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPph");
            entity.Property(e => e.VerifyAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<InvoicesItemHistory>(entity =>
        {
            entity.HasKey(e => new { e.InvoiceNo, e.PaymentNo }).HasName("PK_InvoicesItemHistory_1");

            entity.ToTable("InvoicesItemHistory");

            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerifyAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.ItemId).IsClustered(false);

            entity.ToTable("Item");

            entity.HasIndex(e => e.Barcode, "IX_Item_Barcode");

            entity.HasIndex(e => e.IsActive, "IX_Item_IsActive");

            entity.HasIndex(e => e.ItemGroupId, "IX_Item_ItemGroupID");

            entity.HasIndex(e => new { e.SritemType, e.ItemId }, "_dta_index_Item_c_7_810538021__K3_K1").IsClustered();

            entity.HasIndex(e => e.SrbillingGroup, "_idx_billGroup");

            entity.HasIndex(e => e.ItemGroupId, "_idx_itemgroup");

            entity.HasIndex(e => e.ProductAccountId, "_idx_prodAcc");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.AssetGroupId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetGroupID");
            entity.Property(e => e.Barcode)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CssdPackagingCostAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsHasTestResults).HasDefaultValue(false);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemIdexternal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemIDExternal");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Photo).HasColumnType("image");
            entity.Property(e => e.ProductAccountId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProductAccountID");
            entity.Property(e => e.SrbillingGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBillingGroup");
            entity.Property(e => e.SrbpjsItemGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBpjsItemGroup");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.SrcssdItemGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCssdItemGroup");
            entity.Property(e => e.SreklaimFactorGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREklaimFactorGroup");
            entity.Property(e => e.SreklaimTariffGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREklaimTariffGroup");
            entity.Property(e => e.SritemCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemCategory");
            entity.Property(e => e.SritemSubGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemSubGroup");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemType");
            entity.Property(e => e.ValidityPeriodFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidityPeriodTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemBalance>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.ItemId }).IsClustered(false);

            entity.ToTable("ItemBalance");

            entity.HasIndex(e => e.ItemId, "IX_ItemBalance_ItemID");

            entity.HasIndex(e => e.LocationId, "idx_ItemBalance_001");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Booking).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemSubBin)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Maximum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Minimum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReorderType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SritemBin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRItemBin");
        });

        modelBuilder.Entity<ItemBalanceByPeriod>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.PeriodYear, e.PeriodMonth, e.ItemId }).IsClustered(false);

            entity.ToTable("ItemBalanceByPeriod");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocationID");
            entity.Property(e => e.PeriodYear).HasDefaultValueSql("('')");
            entity.Property(e => e.PeriodMonth).HasDefaultValueSql("('')");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.AdjustmentIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.AdjustmentOut).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BeginningBalance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemBalanceByStockGroup>(entity =>
        {
            entity.HasKey(e => new { e.SrstockGroup, e.ItemId }).HasName("PK_ItemBalanceByStockGroup_1");

            entity.ToTable("ItemBalanceByStockGroup");

            entity.Property(e => e.SrstockGroup)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SRStockGroup");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Maximum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Minimum).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemBalanceDetail>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.ItemId, e.ReferenceNo, e.BalanceDate }).HasName("PK_ItemBalanceDetail_1");

            entity.ToTable("ItemBalanceDetail");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BalanceDate).HasColumnType("datetime");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Booking).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PurchaseReceiveNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ItemBalanceEndOfTheMonth>(entity =>
        {
            entity.HasKey(e => new { e.TransactionDate, e.LocationId, e.ItemId });

            entity.ToTable("ItemBalanceEndOfTheMonth");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BalanceItemMovement).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBasedUnitWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.PurchaseDiscount1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PurchaseDiscount2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyUsagePerDay).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyUsagePerMonth).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemBalanceExpire>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.ItemId, e.ExpiredDate });

            entity.ToTable("ItemBalanceExpire");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.ExpiredDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemBridging>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.SrbridgingType, e.BridgingId });

            entity.ToTable("ItemBridging");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.BridgingId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BridgingID");
            entity.Property(e => e.BridgingGroupId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BridgingGroupID");
            entity.Property(e => e.BridgingGroupName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BridgingName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ItemIdExternal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemConditionRule>(entity =>
        {
            entity.ToTable("ItemConditionRule");

            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EndingDate).HasColumnType("datetime");
            entity.Property(e => e.ItemConditionRuleName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SritemConditionRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemConditionRuleType");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemConditionRuleItem>(entity =>
        {
            entity.HasKey(e => new { e.ItemConditionRuleId, e.ItemId });

            entity.ToTable("ItemConditionRuleItem");

            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemConditionRuleServiceUnit>(entity =>
        {
            entity.HasKey(e => new { e.ItemConditionRuleId, e.ServiceUnitId });

            entity.ToTable("ItemConditionRuleServiceUnit");

            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemConsumption>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.DetailItemId });

            entity.ToTable("ItemConsumption");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.DetailItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DetailItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemDiagnostic>(entity =>
        {
            entity.HasKey(e => e.ItemId)
                .HasName("PK_ItemServiceDt_1")
                .IsClustered(false);

            entity.ToTable("ItemDiagnostic");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.IsAdminCalculation).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReportRlid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReportRLID");
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemDiagnostic)
                .HasForeignKey<ItemDiagnostic>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemDiagnostic_Item");
        });

        modelBuilder.Entity<ItemGroup>(entity =>
        {
            entity.HasKey(e => e.ItemGroupId).IsClustered(false);

            entity.ToTable("ItemGroup");

            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AccountID");
            entity.Property(e => e.CitoValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CssClass)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Initial)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.ItemGroupName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RestrictionUserType)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
        });

        modelBuilder.Entity<ItemGroupUserType>(entity =>
        {
            entity.HasKey(e => new { e.ItemGroupId, e.SruserType });

            entity.ToTable("ItemGroupUserType");

            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.SruserType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRUserType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemIdi>(entity =>
        {
            entity.HasKey(e => e.IdiCode);

            entity.ToTable("ItemIdi");

            entity.Property(e => e.IdiCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.F1)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("F_1");
            entity.Property(e => e.F21)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("F_2_1");
            entity.Property(e => e.F22)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("F_2_2");
            entity.Property(e => e.F23)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("F_2_3");
            entity.Property(e => e.F3)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("F_3");
            entity.Property(e => e.F4)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("F_4");
            entity.Property(e => e.Icd9Cm)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IdiName)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Rvu).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Specialist)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ItemIdiItemSmf>(entity =>
        {
            entity.HasKey(e => new { e.IdiCode, e.ItemId, e.SmfId });

            entity.ToTable("ItemIdiItemSmf");

            entity.Property(e => e.IdiCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemIdiProcedure>(entity =>
        {
            entity.HasKey(e => new { e.IdiCode, e.ProcedureId });

            entity.ToTable("ItemIdiProcedure");

            entity.Property(e => e.IdiCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemKitchen>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("ItemKitchen");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Abcclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength()
                .HasColumnName("ABCClass");
            entity.Property(e => e.Barcode)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BrandName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConversionFactor)
                .HasDefaultValue(1m)
                .HasColumnType("numeric(7, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HighestPriceInBasedUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MarginID");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBasedUnitWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceWVat");
            entity.Property(e => e.PurchaseDiscount1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PurchaseDiscount2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SafetyStock).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SalesFixedPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseUnit");
            entity.Property(e => e.TolerancePercentage).HasColumnType("numeric(5, 2)");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemKitchen)
                .HasForeignKey<ItemKitchen>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemKitchen_Item");
        });

        modelBuilder.Entity<ItemLabel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ItemLabel");

            entity.Property(e => e.ItemIdd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemIDD");
            entity.Property(e => e.Srlabel).HasColumnName("SRLabel");
        });

        modelBuilder.Entity<ItemLaboratory>(entity =>
        {
            entity.HasKey(e => e.ItemId).IsClustered(false);

            entity.ToTable("ItemLaboratory");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.IsAdminCalculation).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReportRlid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReportRLID");
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.SrexaminationClass)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRExaminationClass");
            entity.Property(e => e.SrintervalTime)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIntervalTime");
            entity.Property(e => e.SrlaboratoryUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaboratoryUnit");
            entity.Property(e => e.SrspecimenType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpecimenType");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemLaboratory)
                .HasForeignKey<ItemLaboratory>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemLaboratory_Item");
        });

        modelBuilder.Entity<ItemLaboratoryDetail>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.SequenceNo });

            entity.ToTable("ItemLaboratoryDetail");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.AgeMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AgeMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AnswerTypeReferenceId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AnswerTypeReferenceID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NormalValueMax).IsUnicode(false);
            entity.Property(e => e.NormalValueMin).IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrageUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRAgeUnit");
            entity.Property(e => e.SranswerType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");
            entity.Property(e => e.TotalAgeMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalAgeMin).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ItemLaboratoryProfile>(entity =>
        {
            entity.HasKey(e => new { e.ParentItemId, e.DetailItemId });

            entity.ToTable("ItemLaboratoryProfile");

            entity.Property(e => e.ParentItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentItemID");
            entity.Property(e => e.DetailItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DetailItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemLinen>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("ItemLinen");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ItemLinenItem>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.ItemDetailId });

            entity.ToTable("ItemLinenItem");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemDetailId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemDetailID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyDetail).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemMovement>(entity =>
        {
            entity.HasKey(e => e.MovementId).HasName("PK_ItemMovement_1");

            entity.ToTable("ItemMovement");

            entity.HasIndex(e => new { e.LocationId, e.ItemId, e.MovementDate }, "DPA_RECIDX_250");

            entity.HasIndex(e => new { e.TransactionNo, e.SequenceNo, e.ItemId }, "IX_ItemMovement_TransactionNo_SequenceNo_ItemID");

            entity.HasIndex(e => new { e.ServiceUnitId, e.ItemId, e.MovementDate, e.TransactionCode }, "_dta_index_ItemMovement_12_1942402089__K3_K8_K2_K5_11_12");

            entity.HasIndex(e => new { e.MovementDate, e.LocationId, e.ItemId }, "_idx_ItemIdLocIDMoveDate");

            entity.Property(e => e.MovementId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MovementID");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.InitialStock)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LastPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocationID");
            entity.Property(e => e.MovementDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PurchasePrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SalesPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ItemMovementPerDate>(entity =>
        {
            entity.HasKey(e => new { e.MovementDate, e.LocationId, e.ItemId });

            entity.ToTable("ItemMovementPerDate");

            entity.Property(e => e.MovementDate).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemOptic>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("ItemOptic");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.Abcclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength()
                .HasColumnName("ABCClass");
            entity.Property(e => e.Barcode)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BrandName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FabricId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FabricID");
            entity.Property(e => e.HighestPriceInBasedUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MarginID");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBasedUnitWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SalesDiscount).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SalesFixedPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SritemBin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemBin");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrproductType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRProductType");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseUnit");
            entity.Property(e => e.TolerancePercentage).HasColumnType("numeric(5, 2)");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemOptic)
                .HasForeignKey<ItemOptic>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemOptic_Item");
        });

        modelBuilder.Entity<ItemPackage>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.DetailItemId, e.ServiceUnitId })
                .HasName("PK_ItemPackageDt")
                .IsClustered(false);

            entity.ToTable("ItemPackage");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.DetailItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DetailItemID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.DiscountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsStockControl).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemPackageTariffComponent>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.DetailItemId, e.TariffComponentId });

            entity.ToTable("ItemPackageTariffComponent");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.DetailItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DetailItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemProductConsumeUnitMatrix>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.SritemUnit, e.SrconsumeUnit });

            entity.ToTable("ItemProductConsumeUnitMatrix");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemProductDeductionDetail>(entity =>
        {
            entity.HasKey(e => e.DeductionId);

            entity.ToTable("ItemProductDeductionDetail");

            entity.Property(e => e.DeductionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DeductionID");
            entity.Property(e => e.DeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.MinAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemProductDosageDetail>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.SrdosageUnit }).HasName("PK_ItemProductDosageDetail_1");

            entity.ToTable("ItemProductDosageDetail");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.Dosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemProductLog>(entity =>
        {
            entity.HasKey(e => new { e.TariffRequestNo, e.ItemId });

            entity.ToTable("ItemProductLog");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.CostPriceNew).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPriceOld).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PriceInBaseUnitNew).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBaseUnitOld).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBaseUnitWvatNew)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBaseUnitWVatNew");
            entity.Property(e => e.PriceInBaseUnitWvatOld)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBaseUnitWVatOld");
            entity.Property(e => e.PriceInPurchaseUnitNew).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInPurchaseUnitOld).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SaledDiscountNew).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SalesDiscountOld).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemProductMargin>(entity =>
        {
            entity.HasKey(e => e.MarginId)
                .HasName("PK_ItemProductMarginHd")
                .IsClustered(false);

            entity.ToTable("ItemProductMargin");

            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MarginID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ItemProductMarginClassValue>(entity =>
        {
            entity.HasKey(e => new { e.MarginId, e.SequenceNo, e.ClassId });

            entity.ToTable("ItemProductMarginClassValue");

            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MarginID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginValuePercentage).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemProductMarginValue>(entity =>
        {
            entity.HasKey(e => new { e.MarginId, e.SequenceNo })
                .HasName("PK_ItemProductMarginDt")
                .IsClustered(false);

            entity.ToTable("ItemProductMarginValue");

            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MarginID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.EmergencyMarginPercentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EndingValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.InpatientMarginPercentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsEmWithoutVat).HasColumnName("IsEmWithoutVAT");
            entity.Property(e => e.IsGlobalWithoutVat).HasColumnName("IsGlobalWithoutVAT");
            entity.Property(e => e.IsIpWithoutVat).HasColumnName("IsIpWithoutVAT");
            entity.Property(e => e.IsOpWithoutVat).HasColumnName("IsOpWithoutVAT");
            entity.Property(e => e.IsOtcWithoutVat).HasColumnName("IsOtcWithoutVAT");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.OtcmarginPercentage)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OTCMarginPercentage");
            entity.Property(e => e.OutpatientMarginPercentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StartingValue).HasColumnType("numeric(18, 2)");

            entity.HasOne(d => d.Margin).WithMany(p => p.ItemProductMarginValues)
                .HasForeignKey(d => d.MarginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefItemProductMarginDtToItemProductMarginHd");
        });

        modelBuilder.Entity<ItemProductMedic>(entity =>
        {
            entity.HasKey(e => e.ItemId)
                .HasName("PK_ItemProductMedDt")
                .IsClustered(false);

            entity.ToTable("ItemProductMedic");

            entity.HasIndex(e => e.SrtherapyGroup, "IX_ItemProductMedic_SRTherapyGroup");

            entity.HasIndex(e => new { e.ItemId, e.SrproductType }, "_dta_index_ItemProductMedic_12_763305929__K1_K3_6_7_8");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.Abcclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ABCClass");
            entity.Property(e => e.Barcode)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BrandName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Dosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FabricId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FabricID");
            entity.Property(e => e.Het)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("HET");
            entity.Property(e => e.HighestPriceInBasedUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsGeneric)
                .HasDefaultValue(false)
                .HasColumnName("isGeneric");
            entity.Property(e => e.Keeping)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MarginID");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.MaxQty).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.PremiPharmaciesPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PremiPhysicianPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBasedUnitWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceWVat");
            entity.Property(e => e.PurchaseDiscount1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PurchaseDiscount2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SafetyStock).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SalesDiscount).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SalesFixedPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrantibioticLine)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAntibioticLine");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SrdrugLabelType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDrugLabelType");
            entity.Property(e => e.SritemBin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemBin");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.Srkeeping)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKeeping");
            entity.Property(e => e.SrproductCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProductCategory");
            entity.Property(e => e.SrproductType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRProductType");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseUnit");
            entity.Property(e => e.Srroute)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRoute");
            entity.Property(e => e.SrtherapyGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTherapyGroup");
            entity.Property(e => e.TherapyId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TherapyID");
            entity.Property(e => e.TolerancePercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.Venclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VENClass");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemProductMedic)
                .HasForeignKey<ItemProductMedic>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemProductMedic_Item");
        });

        modelBuilder.Entity<ItemProductMedicIndication>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.IndicationId }).HasName("PK__ItemProd__36B1B4DE190E12C8");

            entity.ToTable("ItemProductMedicIndication");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.IndicationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IndicationID");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemProductMedicLabel>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.LabelId }).HasName("PK__ItemProd__51E961517C71D41A");

            entity.ToTable("ItemProductMedicLabel");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LabelId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LabelID");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemProductMedicMarginDetail>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.ClassId });

            entity.ToTable("ItemProductMedicMarginDetail");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.AmountPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemProductMedicZatActive>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.ZatActiveId }).HasName("PK__ItemProd__C340B1F17F4E40C5");

            entity.ToTable("ItemProductMedicZatActive");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZatActiveID");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemProductNonMedic>(entity =>
        {
            entity.HasKey(e => e.ItemId)
                .HasName("PK_ItemProductMedDt_1")
                .IsClustered(false);

            entity.ToTable("ItemProductNonMedic");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.Abcclass)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength()
                .HasColumnName("ABCClass");
            entity.Property(e => e.Barcode)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BrandName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(7, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Dosage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.FabricId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FabricID");
            entity.Property(e => e.HighestPriceInBasedUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MarginId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MarginID");
            entity.Property(e => e.MarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBasedUnitWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceWVat");
            entity.Property(e => e.PurchaseDiscount1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PurchaseDiscount2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SafetyStock).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SalesDiscount).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SalesFixedPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemBin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemBin");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrproductType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRProductType");
            entity.Property(e => e.SrpurchaseCategorization)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPurchaseCategorization");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseUnit");
            entity.Property(e => e.TolerancePercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.Weight).HasColumnType("numeric(10, 2)");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemProductNonMedic)
                .HasForeignKey<ItemProductNonMedic>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemProductNonMedic_Item");
        });

        modelBuilder.Entity<ItemProductSalesDiscount>(entity =>
        {
            entity.HasKey(e => e.SalesDiscId);

            entity.ToTable("ItemProductSalesDiscount");

            entity.Property(e => e.SalesDiscId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SalesDiscID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SalesDiscPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SupplierDiscPercentageFrom).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SupplierDiscPercentageTo).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemRadiology>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("ItemRadiology");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.IsAdminCalculation).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReportRlid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReportRLID");
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemRadiology)
                .HasForeignKey<ItemRadiology>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemRadiology_Item");
        });

        modelBuilder.Entity<ItemSalesPerDate>(entity =>
        {
            entity.HasKey(e => new { e.MovementDate, e.SrstockGroup, e.ItemId, e.ServiceUnitId, e.LocationId });

            entity.ToTable("ItemSalesPerDate");

            entity.Property(e => e.MovementDate).HasColumnType("datetime");
            entity.Property(e => e.SrstockGroup)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SRStockGroup");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ItemService>(entity =>
        {
            entity.HasKey(e => e.ItemId)
                .HasName("PK_ItemServiceDt")
                .IsClustered(false);

            entity.ToTable("ItemService");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.IsAdminCalculation).HasDefaultValue(true);
            entity.Property(e => e.ItemRelatedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemRelatedID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Premi2Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PremiAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ProductionServicesPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.ProductionServicesPercentage2).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.QtyDivider).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReportRlid)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReportRLID");
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TogethernessPercentage).HasColumnType("numeric(6, 2)");

            entity.HasOne(d => d.Item).WithOne(p => p.ItemService)
                .HasForeignKey<ItemService>(d => d.ItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemService_Item");
        });

        modelBuilder.Entity<ItemServiceSubSpecialty>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.SubSpecialtyId });

            entity.ToTable("ItemServiceSubSpecialty");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.SubSpecialtyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubSpecialtyID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemStockOpnameApproval>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.PageNo });

            entity.ToTable("ItemStockOpnameApproval");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemStockOpnamePrevBalance>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("ItemStockOpnamePrevBalance");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.CostPrice)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.QtyAtApprove)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemTariff>(entity =>
        {
            entity.HasKey(e => new { e.SrtariffType, e.ItemId, e.ClassId, e.StartingDate });

            entity.ToTable("ItemTariff");

            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTariffType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.CitoValue)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.IsAdminCalculation).HasDefaultValue(false);
            entity.Property(e => e.IsAllowCito).HasDefaultValue(false);
            entity.Property(e => e.IsAllowDiscount)
                .HasDefaultValue(false)
                .HasComment("Setting untuk item yg tarifnya tidak di rinci");
            entity.Property(e => e.IsAllowVariable)
                .HasDefaultValue(false)
                .HasComment("Setting untuk item yg tarifnya tidak di rinci");
            entity.Property(e => e.IsCitoInPercent).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Ppn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Update from TransactionNo");
            entity.Property(e => e.ReferenceTransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ItemTariffComponent>(entity =>
        {
            entity.HasKey(e => new { e.SrtariffType, e.ItemId, e.ClassId, e.StartingDate, e.TariffComponentId });

            entity.ToTable("ItemTariffComponent");

            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTariffType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.IsAllowDiscount).HasComment("Bisa di set True bila di master itemnya IsAllowDiscount=1");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ItemTariffComponentUpdateHistory>(entity =>
        {
            entity.HasKey(e => new { e.RequestNo, e.SrtariffType, e.ItemId, e.ClassId, e.StartingDate, e.TariffComponentId });

            entity.ToTable("ItemTariffComponentUpdateHistory");

            entity.Property(e => e.RequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ToPrice).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTariffRequest>(entity =>
        {
            entity.HasKey(e => e.TariffRequestNo);

            entity.ToTable("ItemTariffRequest");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.TariffRequestDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemTariffRequest2>(entity =>
        {
            entity.HasKey(e => e.TariffRequestNo);

            entity.ToTable("ItemTariffRequest2");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.ImportFromDate).HasColumnType("datetime");
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.TariffRequestDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemTariffRequest2Item>(entity =>
        {
            entity.HasKey(e => new { e.TariffRequestNo, e.ItemId, e.ClassId });

            entity.ToTable("ItemTariffRequest2Item");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CitoValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBaseUnit)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBaseUnitWvat)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBaseUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTariffRequest2ItemComp>(entity =>
        {
            entity.HasKey(e => new { e.TariffRequestNo, e.ItemId, e.ClassId, e.TariffComponentId });

            entity.ToTable("ItemTariffRequest2ItemComp");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.IsAllowDiscount).HasComment("Bisa di set True bila di master itemnya IsAllowDiscount=1");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTariffRequestItem>(entity =>
        {
            entity.HasKey(e => new { e.TariffRequestNo, e.ItemId });

            entity.ToTable("ItemTariffRequestItem");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.CitoValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBaseUnit)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBaseUnitWvat)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBaseUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTariffRequestItemComp>(entity =>
        {
            entity.HasKey(e => new { e.TariffRequestNo, e.ItemId, e.TariffComponentId });

            entity.ToTable("ItemTariffRequestItemComp");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.IsAllowDiscount).HasComment("Bisa di set True bila di master itemnya IsAllowDiscount=1");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTariffRequestItemToImport>(entity =>
        {
            entity.HasKey(e => new { e.ReferenceNo, e.StartingDate, e.SrtariffType, e.ItemId, e.ClassId, e.TariffComponentId });

            entity.ToTable("ItemTariffRequestItemToImport");

            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.GeneralPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NewPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OldPrice).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTariffRequestProcess>(entity =>
        {
            entity.HasKey(e => e.TariffRequestNo);

            entity.ToTable("ItemTariffRequestProcess");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.FromSrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FromSRTariffType");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RoundingValue).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.TariffRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ToSrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToSRTariffType");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemTariffRequestProcessItemComp>(entity =>
        {
            entity.HasKey(e => new { e.TariffRequestNo, e.TariffComponentId });

            entity.ToTable("ItemTariffRequestProcessItemComp");

            entity.Property(e => e.TariffRequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.AmountValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemTariffUpdateHistory>(entity =>
        {
            entity.HasKey(e => new { e.RequestNo, e.SrtariffType, e.ItemId, e.ClassId, e.StartingDate });

            entity.ToTable("ItemTariffUpdateHistory");

            entity.Property(e => e.RequestNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.CitoValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ToCitoValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ToDiscPercentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ToPrice).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ItemTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionNo)
                .HasName("PK_ItemTransactionHd")
                .IsClustered(false);

            entity.ToTable("ItemTransaction");

            entity.HasIndex(e => e.FromLocationId, "_idx_fromloc");

            entity.HasIndex(e => e.FromServiceUnitId, "_idx_fromsu");

            entity.HasIndex(e => e.ReferenceNo, "_idx_refNo");

            entity.HasIndex(e => new { e.TransactionCode, e.TransactionDate }, "_idx_tCode_tDate");

            entity.HasIndex(e => e.ToLocationId, "_idx_toloc");

            entity.HasIndex(e => e.ToServiceUnitId, "_idx_tosu");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AdvanceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AmountTaxed).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BusinessPartnerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BusinessPartnerID");
            entity.Property(e => e.CashTransactionReconcileId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChargesAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CheckDate).HasColumnType("datetime");
            entity.Property(e => e.CheckNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CurrencyRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.DeliveryOrdersDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryOrdersNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DownPaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DownPaymentReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FromLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromLocationID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceSupplierDate).HasColumnType("datetime");
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.LastPrintedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastPrintedByUserID");
            entity.Property(e => e.LastPrintedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PlanningDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Pph22)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Pph22Percentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.Pph23)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Pph23Percentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PphAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PphPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PriorChargesAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorTaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ProductAccountId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProductAccountID");
            entity.Property(e => e.ReferenceDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SalesMarginPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ServiceUnitCostId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitCostID");
            entity.Property(e => e.SradjustmentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRAdjustmentType");
            entity.Property(e => e.SrdistributionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDistributionType");
            entity.Property(e => e.SrdownPaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDownPaymentType");
            entity.Property(e => e.SritemCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemCategory");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemType");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
            entity.Property(e => e.Srpph)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPph");
            entity.Property(e => e.SrprocurementType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcurementType");
            entity.Property(e => e.SrpurchaseCategorization)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPurchaseCategorization");
            entity.Property(e => e.SrpurchaseOrderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseOrderType");
            entity.Property(e => e.SrpurchaseReturnType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseReturnType");
            entity.Property(e => e.StampAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TaxInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.TaxInvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TaxPercentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TermId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TermID");
            entity.Property(e => e.TermOfPayment).HasColumnType("numeric(5, 0)");
            entity.Property(e => e.ToLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToLocationID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemTransactionInitialBalance>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("ItemTransactionInitialBalance");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ItemTransactionItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo })
                .HasName("PK_ItemTransactionDt")
                .IsClustered(false);

            entity.ToTable("ItemTransactionItem", tb => tb.HasTrigger("TriggerItemTransactionItemBeforeDelete"));

            entity.HasIndex(e => e.ItemId, "_idx_itemid");

            entity.HasIndex(e => new { e.ReferenceNo, e.ReferenceSequenceNo }, "idx_ReferenceNo");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Discount1Percentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Discount2Percentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ExpiredDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.HistoryDiscount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HistoryDiscount1Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HistoryDiscount2Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HistoryDiscountInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HistoryPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HistoryPriceInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LastInvoiceUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastInvoiceUpdateByUserID");
            entity.Property(e => e.LastInvoiceUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PageNo).HasDefaultValue(0);
            entity.Property(e => e.PphAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PphPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorDiscount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorDiscount1Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PriorDiscount2Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PriorDiscountInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorPriceInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityFinishInBaseUnit).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.RequestQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Specification)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.Srpph)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPph");

            entity.HasOne(d => d.TransactionNoNavigation).WithMany(p => p.ItemTransactionItems)
                .HasForeignKey(d => d.TransactionNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefItemTransactionDtToItemTransactionHd");
        });

        modelBuilder.Entity<ItemTransactionItemBak>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("ItemTransactionItemBak");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Discount1Percentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Discount2Percentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ExpiredDate).HasColumnType("smalldatetime");
            entity.Property(e => e.HistoryDiscount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HistoryDiscount1Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HistoryDiscount2Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.HistoryDiscountInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HistoryPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HistoryPriceInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastInvoiceUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastInvoiceUpdateByUserID");
            entity.Property(e => e.LastInvoiceUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorDiscount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorDiscount1Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PriorDiscount2Percentage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PriorDiscountInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriorPriceInCurrency).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityFinishInBaseUnit).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RequestQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Specification)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemTransactionItemEd>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.ExpiredDate, e.BatchNumber }).IsClustered(false);

            entity.ToTable("ItemTransactionItemEd");

            entity.HasIndex(e => new { e.ItemId, e.ExpiredDate, e.BatchNumber, e.IsClosed }, "IDX_ItemTransactionItemEd_ItemID_ExpiredDate_BatchNo_IsClosed");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ExpiredDate).HasColumnType("smalldatetime");
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClosedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedByUserID");
            entity.Property(e => e.ClosedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QuantityFinishInBaseUnit).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ItemTransactionItemHistory>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.LocationId, e.ItemId, e.ReferenceNo, e.BalanceDate });

            entity.ToTable("ItemTransactionItemHistory");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BalanceDate).HasColumnType("datetime");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastPriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<Jamsostek>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Jamsostek");

            entity.Property(e => e.JamsostekNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
        });

        modelBuilder.Entity<JobOpportunity>(entity =>
        {
            entity.ToTable("JobOpportunity");

            entity.Property(e => e.JobOpportunityId).HasColumnName("JobOpportunityID");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DatePrepared).HasColumnType("datetime");
            entity.Property(e => e.JobContent)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastDateAccept).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<JournalCode>(entity =>
        {
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CashType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasMaxLength(150);
            entity.Property(e => e.JournalCode1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("JournalCode");
            entity.Property(e => e.NumberFormat).HasMaxLength(15);
        });

        modelBuilder.Entity<JournalGroup>(entity =>
        {
            entity.ToTable("JournalGroup");

            entity.Property(e => e.JournalGroupId).HasColumnName("JournalGroupID");
            entity.Property(e => e.JournalGroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
        });

        modelBuilder.Entity<JournalGroupDetail>(entity =>
        {
            entity.HasKey(e => e.JournalDetailId);

            entity.ToTable("JournalGroupDetail");

            entity.HasIndex(e => e.JournalGroupId, "_idx_jgID");

            entity.HasIndex(e => e.JournalJournalCode, "_idx_jjc");

            entity.Property(e => e.JournalDetailId).HasColumnName("JournalDetailID");
            entity.Property(e => e.JournalGroupId).HasColumnName("JournalGroupID");
            entity.Property(e => e.JournalJournalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<JournalGroupUser>(entity =>
        {
            entity.HasKey(e => e.JournalUserId);

            entity.ToTable("JournalGroupUser");

            entity.Property(e => e.JournalUserId).HasColumnName("JournalUserID");
            entity.Property(e => e.JournalGroupId).HasColumnName("JournalGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<JournalMessage>(entity =>
        {
            entity.HasKey(e => e.JournalId).HasName("PK_JournalMessage_1");

            entity.ToTable("JournalMessage");

            entity.Property(e => e.JournalId)
                .ValueGeneratedNever()
                .HasColumnName("JournalID");
            entity.Property(e => e.AdditionalData).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Journal).WithOne(p => p.JournalMessage)
                .HasForeignKey<JournalMessage>(d => d.JournalId)
                .HasConstraintName("FK_JournalMessage_JournalTransactions");
        });

        modelBuilder.Entity<JournalTransaction>(entity =>
        {
            entity.HasKey(e => e.JournalId);

            entity.ToTable(tb => tb.HasTrigger("JournalTransactionsAfterUpdate"));

            entity.HasIndex(e => e.IsPosted, "IX_JournalTransaction_IsPosted");

            entity.HasIndex(e => e.IsVoid, "IX_JournalTransaction_IsVoid");

            entity.HasIndex(e => e.TransactionDate, "IX_JournalTransaction_TxDate");

            entity.HasIndex(e => new { e.IsPosted, e.IsVoid }, "IX_JournalTransactionsPosted");

            entity.HasIndex(e => new { e.TransactionDate, e.IsVoid, e.JournalId }, "_dta_index_JournalTransactions_8_291584177__K5_K12_K1_2_3_4_6_7_8_9_10_11_13_14");

            entity.HasIndex(e => new { e.IsPosted, e.JournalId, e.TransactionDate }, "_dta_index_JournalTransactions_8_291584177__K7_K1_K5_2_3_4_6_8_9_10_11_12_13_14");

            entity.HasIndex(e => e.JournalType, "_idx_JournalType");

            entity.Property(e => e.BudgetingCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DatePosted).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.JournalCode).HasMaxLength(10);
            entity.Property(e => e.JournalType).HasMaxLength(10);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RefferenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SysPostedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNumber).HasMaxLength(10);
            entity.Property(e => e.VoidDate)
                .HasDefaultValue(new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<JournalTransactionDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId);

            entity.HasIndex(e => e.JournalId, "IX_JournalTransactionDetailCOA");

            entity.HasIndex(e => e.DocumentNumber, "Idx_DocNumber");

            entity.HasIndex(e => e.JournalId, "_dta_index_JournalTransactionDetails_8_1445684298__K2_4_5");

            entity.HasIndex(e => new { e.JournalId, e.DetailId, e.SubLedgerId, e.ChartOfAccountId }, "_dta_index_JournalTransactionDetails_8_1445684298__K2_K1_K7_K3_4_5");

            entity.HasIndex(e => new { e.ChartOfAccountId, e.SubLedgerId, e.JournalId }, "_dta_index_JournalTransactionDetails_8_1445684298__K3_K7_K2_1_4_5_6_8");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Credit).HasColumnType("money");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Debit).HasColumnType("money");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DocumentNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNumberSequenceNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");

            entity.HasOne(d => d.ChartOfAccount).WithMany(p => p.JournalTransactionDetails)
                .HasForeignKey(d => d.ChartOfAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JournalTransactionDetails_ChartOfAccounts");

            entity.HasOne(d => d.Journal).WithMany(p => p.JournalTransactionDetails)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JournalTransactionDetails_JournalTransactions");
        });

        modelBuilder.Entity<JsonBridgingValueTemp>(entity =>
        {
            entity.ToTable("JsonBridgingValueTemp");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JsonValue).IsUnicode(false);
        });

        modelBuilder.Entity<K3rsForm>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("K3rsForm");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Result).IsUnicode(false);
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<K3rsFormTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("K3rsFormTemplate");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Result).IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<KTotalPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("K_Total_payment");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Payment).HasColumnType("numeric(38, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<KTotalTagihan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("K_total_tagihan");

            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TotTagihan).HasColumnType("numeric(38, 2)");
        });

        modelBuilder.Entity<KemenkesSitb>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("KemenkesSitb");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RequestSitb).IsUnicode(false);
            entity.Property(e => e.ResponseSitb).IsUnicode(false);
            entity.Property(e => e.SitbNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<KfaIh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KFA_IHS");

            entity.Property(e => e.Bagi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bagi");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Dosis)
                .HasMaxLength(53)
                .IsUnicode(false)
                .HasColumnName("dosis");
            entity.Property(e => e.IdItem)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KdVaktual)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KdVAktual");
            entity.Property(e => e.KdVingredients)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KdVIngredients");
            entity.Property(e => e.KdVtemplate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KdVTemplate");
            entity.Property(e => e.NameIngredient)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NameVaktual)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NameVAktual");
            entity.Property(e => e.NameVtemplate)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("NameVTemplate");
            entity.Property(e => e.Satuan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("satuan");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<KiosKroom>(entity =>
        {
            entity.HasKey(e => e.KiosKroomId).HasName("PK__KiosKRoo__5C8C81935D99F5BA");

            entity.ToTable("KiosKRoom", tb => tb.HasTrigger("trg_UpdateLastUpdateDateTime"));

            entity.Property(e => e.KiosKroomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("KiosKRoomID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.KioskRoomName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<KioskQueue>(entity =>
        {
            entity.HasKey(e => e.KioskQueueId).HasName("PK__KioskQue__A93C5EF855794EAE");

            entity.ToTable("KioskQueue");

            entity.HasIndex(e => new { e.KioskQueueDate, e.KioskQueueCode }, "_idx_qDate_qCode");

            entity.Property(e => e.KioskQueueId).HasColumnName("KioskQueueID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.KioskQueueCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.KioskQueueDate).HasColumnType("datetime");
            entity.Property(e => e.KioskQueueNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcessByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ProcessByUserID");
            entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrkioskQueueStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKioskQueueStatus");
        });

        modelBuilder.Entity<KioskQueueCaller>(entity =>
        {
            entity.HasKey(e => e.KioskQueueId).HasName("PK__KioskQue__A93C26CBB95A9D31");

            entity.ToTable("KioskQueueCaller");

            entity.Property(e => e.KioskQueueId)
                .HasMaxLength(10)
                .HasColumnName("KioskQueueID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ExternalQueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.KiosKroomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("KiosKRoomID");
            entity.Property(e => e.KioskQueueDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SrkioskQueueStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKioskQueueStatus");
        });

        modelBuilder.Entity<Lab1>(entity =>
        {
            entity.HasKey(e => e.PersonId).HasName("PK__Lab1__AA2FFB858A953FCE");

            entity.ToTable("Lab1");

            entity.Property(e => e.PersonId)
                .ValueGeneratedNever()
                .HasColumnName("PersonID");
            entity.Property(e => e.EmployeeNumber).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(255);
        });

        modelBuilder.Entity<Labell>(entity =>
        {
            entity.HasKey(e => e.LabelId).HasName("PK__Labell__397E2BA36F17D8FC");

            entity.ToTable("Labell");

            entity.Property(e => e.LabelId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LabelID");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LabelName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LatestGroomingStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LatestGroomingStatus");

            entity.Property(e => e.GroomingDateTimeUtc)
                .HasColumnType("datetime")
                .HasColumnName("GroomingDateTimeUTC");
            entity.Property(e => e.GroomingRunId).HasColumnName("GroomingRunID");
            entity.Property(e => e.LastStatusMessage).HasMaxLength(250);
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");

            entity.HasOne(d => d.Sqlserver).WithMany()
                .HasForeignKey(d => d.SqlserverId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKLatestGroomingStatusSqlServerID");
        });

        modelBuilder.Entity<LaunderedProcess>(entity =>
        {
            entity.HasKey(e => e.ProcessNo);

            entity.ToTable("LaunderedProcess");

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MachineID");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProcessDate).HasColumnType("datetime");
            entity.Property(e => e.ProcessTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrlaundryProcessType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProcessType");
            entity.Property(e => e.SrlaundryProgram)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProgram");
            entity.Property(e => e.SrlaundryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryType");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaunderedProcessItem>(entity =>
        {
            entity.HasKey(e => new { e.ProcessNo, e.ProcessSeqNo });

            entity.ToTable("LaunderedProcessItem");

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaunderedProcessItemConsumption>(entity =>
        {
            entity.HasKey(e => new { e.ProcessNo, e.ItemId });

            entity.ToTable("LaunderedProcessItemConsumption");

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaunderedProcessItemInfectiou>(entity =>
        {
            entity.HasKey(e => new { e.ProcessNo, e.ProcessSeqNo });

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaunderedProcessItemRewashing>(entity =>
        {
            entity.HasKey(e => new { e.ProcessNo, e.ProcessSeqNo });

            entity.ToTable("LaunderedProcessItemRewashing");

            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryDistribution>(entity =>
        {
            entity.HasKey(e => e.DistributionNo);

            entity.ToTable("LaundryDistribution");

            entity.Property(e => e.DistributionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DistributionDate).HasColumnType("datetime");
            entity.Property(e => e.DistributionTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HandedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("HandedByUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundryDistributionItem>(entity =>
        {
            entity.HasKey(e => new { e.DistributionNo, e.SeqNo });

            entity.ToTable("LaundryDistributionItem");

            entity.Property(e => e.DistributionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryRecapitulationProcess>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("LaundryRecapitulationProcess");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundryRecapitulationProcessItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("LaundryRecapitulationProcessItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyRewashing).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryReceived>(entity =>
        {
            entity.HasKey(e => e.ReceivedNo);

            entity.ToTable("LaundryReceived");

            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedByUserID");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceivedTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SenderBy)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundryReceivedItem>(entity =>
        {
            entity.HasKey(e => new { e.ReceivedNo, e.ReceivedSeqNo });

            entity.ToTable("LaundryReceivedItem");

            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryReceivedItemInfectiou>(entity =>
        {
            entity.HasKey(e => new { e.ReceivedNo, e.ReceivedSeqNo });

            entity.Property(e => e.ReceivedNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryRepairingProcess>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("LaundryRepairingProcess");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClosedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedByUserID");
            entity.Property(e => e.ClosedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundryRepairingProcessItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("LaundryRepairingProcessItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryReturned>(entity =>
        {
            entity.HasKey(e => e.ReturnNo);

            entity.ToTable("LaundryReturned");

            entity.Property(e => e.ReturnNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.HandedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("HandedByUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundryReturnedItem>(entity =>
        {
            entity.HasKey(e => new { e.ReturnNo, e.ReturnSeqNo });

            entity.ToTable("LaundryReturnedItem");

            entity.Property(e => e.ReturnNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReturnSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProcessSeqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<LaundrySortingProcess>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("LaundrySortingProcess");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundrySortingProcessItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("LaundrySortingProcessItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LaundryWashingMachine>(entity =>
        {
            entity.HasKey(e => e.MachineId);

            entity.ToTable("LaundryWashingMachine");

            entity.Property(e => e.MachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MachineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MachineName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.StartUsingDate).HasColumnType("datetime");
            entity.Property(e => e.Volume).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<LaundryWashingMachineProgram>(entity =>
        {
            entity.HasKey(e => new { e.MachineId, e.SrlaundryProgram });

            entity.ToTable("LaundryWashingMachineProgram");

            entity.Property(e => e.MachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MachineID");
            entity.Property(e => e.SrlaundryProgram)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProgram");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LaundryWashingProgramType>(entity =>
        {
            entity.HasKey(e => e.LaundryProgramTypeId);

            entity.ToTable("LaundryWashingProgramType");

            entity.Property(e => e.LaundryProgramTypeId).HasColumnName("LaundryProgramTypeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrlaundryProcessType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProcessType");
            entity.Property(e => e.SrlaundryProgram)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProgram");
            entity.Property(e => e.SrlaundryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryType");
            entity.Property(e => e.Weight).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<LaundryWashingProgramTypeItemConsumption>(entity =>
        {
            entity.HasKey(e => new { e.SrlaundryProcessType, e.SrlaundryProgram, e.SrlaundryType, e.ItemId });

            entity.ToTable("LaundryWashingProgramTypeItemConsumption");

            entity.Property(e => e.SrlaundryProcessType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProcessType");
            entity.Property(e => e.SrlaundryProgram)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryProgram");
            entity.Property(e => e.SrlaundryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLaundryType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<LeaveRequest>(entity =>
        {
            entity.ToTable("LeaveRequest");

            entity.Property(e => e.LeaveRequestId).HasColumnName("LeaveRequestID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LeaveBalance).HasColumnType("numeric(3, 2)");
            entity.Property(e => e.LeaveDateFrom).HasColumnType("datetime");
            entity.Property(e => e.LeaveDateTo).HasColumnType("datetime");
            entity.Property(e => e.LeaveTimeFrom)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeaveTimeTo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeaveTypeId).HasColumnName("LeaveTypeID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Reason)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestDays).HasColumnType("numeric(3, 2)");
            entity.Property(e => e.WorkingDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<LicenseKey>(entity =>
        {
            entity.HasKey(e => e.LicenseId).HasName("PKLicenseKeys");

            entity.HasIndex(e => e.LicenseKey1, "IXLicenseKeys").IsUnique();

            entity.Property(e => e.LicenseId)
                .ValueGeneratedNever()
                .HasColumnName("LicenseID");
            entity.Property(e => e.DateAddedUtc).HasColumnType("datetime");
            entity.Property(e => e.LicenseKey1)
                .HasMaxLength(255)
                .HasColumnName("LicenseKey");
        });

        modelBuilder.Entity<LiquidFoodDiet>(entity =>
        {
            entity.HasKey(e => e.DietId).HasName("PK_LiquidFoodDiet_1");

            entity.ToTable("LiquidFoodDiet");

            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.ChildrenFoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChildrenFoodID");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LiquidFoodDietTime>(entity =>
        {
            entity.HasKey(e => new { e.DietId, e.Time });

            entity.ToTable("LiquidFoodDietTime");

            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ChildrenFoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChildrenFoodID");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LiquidFoodDietTimeGender>(entity =>
        {
            entity.HasKey(e => new { e.DietId, e.Time, e.Gender });

            entity.ToTable("LiquidFoodDietTimeGender");

            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChildrenFoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChildrenFoodID");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LiquidFoodTime>(entity =>
        {
            entity.HasKey(e => new { e.StandardReferenceId, e.ItemId, e.Time });

            entity.ToTable("LiquidFoodTime");

            entity.Property(e => e.StandardReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("StandardReferenceID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ChildrenFoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChildrenFoodID");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LiquidFoodTimeGender>(entity =>
        {
            entity.HasKey(e => new { e.StandardReferenceId, e.ItemId, e.Time, e.Gender });

            entity.ToTable("LiquidFoodTimeGender");

            entity.Property(e => e.StandardReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("StandardReferenceID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChildrenFoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChildrenFoodID");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.LocationId).IsClustered(false);

            entity.ToTable("Location");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocationID");
            entity.Property(e => e.ChartOfAccountIdCogs).HasColumnName("ChartOfAccountIdCOGS");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsNotificationType).HasDefaultValue(1);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.LastHoldForTransactionByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastHoldForTransactionByUserID");
            entity.Property(e => e.LastHoldForTransactionDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentID");
            entity.Property(e => e.PermitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PermitID");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SrstockGroup)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SRStockGroup");
            entity.Property(e => e.SrtypeOfInventory)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SRTypeOfInventory");
            entity.Property(e => e.SubledgerIdCogs).HasColumnName("SubledgerIdCOGS");
        });

        modelBuilder.Entity<LocationException>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.LocationExceptionId });

            entity.ToTable("LocationException");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationExceptionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationExceptionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LocationExceptionDistributionConfirm>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.LocationExceptionId });

            entity.ToTable("LocationExceptionDistributionConfirm");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationExceptionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationExceptionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LocationIh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("location_ihs");

            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.UuidLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uuid_Location");
        });

        modelBuilder.Entity<LocationTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateNo);

            entity.ToTable("LocationTemplate");

            entity.Property(e => e.TemplateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LocationTemplateItem>(entity =>
        {
            entity.HasKey(e => new { e.TemplateNo, e.ItemId });

            entity.ToTable("LocationTemplateItem");

            entity.Property(e => e.TemplateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<LoginName>(entity =>
        {
            entity.HasKey(e => e.LoginNameId).HasName("PKLoginNames");

            entity.HasIndex(e => e.LoginName1, "UKLoginName").IsUnique();

            entity.Property(e => e.LoginNameId).HasColumnName("LoginNameID");
            entity.Property(e => e.LoginName1)
                .HasMaxLength(256)
                .HasColumnName("LoginName");
        });

        modelBuilder.Entity<LoincAvilabIh>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.LoincId }).HasName("PK__loincAvi__590B2B7EE0448B30");

            entity.ToTable("loincAvilab_ihs");

            entity.Property(e => e.ItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("itemId");
            entity.Property(e => e.LoincId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("loincId");
            entity.Property(e => e.ITemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("iTemName");
        });

        modelBuilder.Entity<LoincIh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Loinc_ihs");

            entity.Property(e => e.AskAtOrderEntry).HasMaxLength(255);
            entity.Property(e => e.AssociatedObservations).HasMaxLength(255);
            entity.Property(e => e.ChangeReasonPublic).HasColumnName("CHANGE_REASON_PUBLIC");
            entity.Property(e => e.ChngType)
                .HasMaxLength(255)
                .HasColumnName("CHNG_TYPE");
            entity.Property(e => e.Class)
                .HasMaxLength(255)
                .HasColumnName("CLASS");
            entity.Property(e => e.Classtype).HasColumnName("CLASSTYPE");
            entity.Property(e => e.CommonOrderRank).HasColumnName("COMMON_ORDER_RANK");
            entity.Property(e => e.CommonSiTestRank).HasColumnName("COMMON_SI_TEST_RANK");
            entity.Property(e => e.CommonTestRank).HasColumnName("COMMON_TEST_RANK");
            entity.Property(e => e.Component)
                .HasMaxLength(255)
                .HasColumnName("COMPONENT");
            entity.Property(e => e.ConsumerName)
                .HasMaxLength(255)
                .HasColumnName("CONSUMER_NAME");
            entity.Property(e => e.DisplayName).HasMaxLength(255);
            entity.Property(e => e.ExampleUcumUnits)
                .HasMaxLength(255)
                .HasColumnName("EXAMPLE_UCUM_UNITS");
            entity.Property(e => e.ExampleUnits)
                .HasMaxLength(255)
                .HasColumnName("EXAMPLE_UNITS");
            entity.Property(e => e.ExmplAnswers).HasColumnName("EXMPL_ANSWERS");
            entity.Property(e => e.ExternalCopyrightLink)
                .HasMaxLength(255)
                .HasColumnName("EXTERNAL_COPYRIGHT_LINK");
            entity.Property(e => e.ExternalCopyrightNotice).HasColumnName("EXTERNAL_COPYRIGHT_NOTICE");
            entity.Property(e => e.Formula).HasColumnName("FORMULA");
            entity.Property(e => e.Hl7AttachmentStructure)
                .HasMaxLength(15)
                .HasColumnName("HL7_ATTACHMENT_STRUCTURE");
            entity.Property(e => e.Hl7FieldSubfieldId)
                .HasMaxLength(50)
                .HasColumnName("HL7_FIELD_SUBFIELD_ID");
            entity.Property(e => e.LoincNum)
                .HasMaxLength(10)
                .HasColumnName("LOINC_NUM");
            entity.Property(e => e.LongCommonName)
                .HasMaxLength(255)
                .HasColumnName("LONG_COMMON_NAME");
            entity.Property(e => e.MethodTyp)
                .HasMaxLength(255)
                .HasColumnName("METHOD_TYP");
            entity.Property(e => e.OrderObs)
                .HasMaxLength(15)
                .HasColumnName("ORDER_OBS");
            entity.Property(e => e.PanelType).HasMaxLength(50);
            entity.Property(e => e.Property)
                .HasMaxLength(255)
                .HasColumnName("PROPERTY");
            entity.Property(e => e.Relatednames2).HasColumnName("RELATEDNAMES2");
            entity.Property(e => e.ScaleTyp)
                .HasMaxLength(255)
                .HasColumnName("SCALE_TYP");
            entity.Property(e => e.Shortname)
                .HasMaxLength(255)
                .HasColumnName("SHORTNAME");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasColumnName("STATUS");
            entity.Property(e => e.StatusReason)
                .HasMaxLength(9)
                .HasColumnName("STATUS_REASON");
            entity.Property(e => e.StatusText).HasColumnName("STATUS_TEXT");
            entity.Property(e => e.SurveyQuestSrc)
                .HasMaxLength(50)
                .HasColumnName("SURVEY_QUEST_SRC");
            entity.Property(e => e.SurveyQuestText).HasColumnName("SURVEY_QUEST_TEXT");
            entity.Property(e => e.System)
                .HasMaxLength(255)
                .HasColumnName("SYSTEM");
            entity.Property(e => e.TimeAspct)
                .HasMaxLength(255)
                .HasColumnName("TIME_ASPCT");
            entity.Property(e => e.Unitsrequired)
                .HasMaxLength(1)
                .HasColumnName("UNITSREQUIRED");
            entity.Property(e => e.ValidHl7attachmentRequest)
                .HasMaxLength(50)
                .HasColumnName("ValidHL7AttachmentRequest");
            entity.Property(e => e.VersionFirstReleased).HasMaxLength(255);
            entity.Property(e => e.VersionLastChanged).HasMaxLength(255);
        });

        modelBuilder.Entity<ManagementService>(entity =>
        {
            entity.HasIndex(e => new { e.MachineName, e.InstanceName }, "IXManagementServices").IsUnique();

            entity.Property(e => e.ManagementServiceId)
                .ValueGeneratedNever()
                .HasColumnName("ManagementServiceID");
            entity.Property(e => e.Address).HasMaxLength(256);
            entity.Property(e => e.DefaultCollectionServiceId).HasColumnName("DefaultCollectionServiceID");
            entity.Property(e => e.InstanceName).HasMaxLength(15);
            entity.Property(e => e.MachineName).HasMaxLength(15);
        });

        modelBuilder.Entity<MappingBpjsCendana>(entity =>
        {
            entity.HasKey(e => e.BpjsServiceUnitId).HasName("PK__MappingB__2C91418F3A054F58");

            entity.ToTable("MappingBpjsCendana");

            entity.Property(e => e.BpjsServiceUnitId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BpjsServiceUnitID");
            entity.Property(e => e.CendanaServiceUnitId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CendanaServiceUnitID");
        });

        modelBuilder.Entity<MappingKetersediaanBedDinke>(entity =>
        {
            entity.HasKey(e => new { e.Category, e.ServiceUnitId, e.ClassId }).HasName("PK__MappingK__A03C2145D526592A");

            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.JenisKamar)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Kelas)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MappingRanap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_MAPPING_RANAP");

            entity.Property(e => e.CoaRevenueIpr).HasColumnName("coa_revenue_ipr");
            entity.Property(e => e.CoaRevenueOpr)
                .HasMaxLength(255)
                .HasColumnName("coa_revenue_opr");
            entity.Property(e => e.GroupId)
                .HasMaxLength(255)
                .HasColumnName("GroupID");
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.ServiceunitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceunitID");
            entity.Property(e => e.SubLedgerId).HasColumnName("SubLedgerID");
        });

        modelBuilder.Entity<MappingRjBpj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_MAPPING_RJ_BPJS");

            entity.Property(e => e.CoaRevenueIpr)
                .HasMaxLength(255)
                .HasColumnName("coa_revenue_ipr");
            entity.Property(e => e.CoaRevenueOpr).HasColumnName("coa_revenue_opr");
            entity.Property(e => e.GroupId)
                .HasMaxLength(255)
                .HasColumnName("GroupID");
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.ServiceunitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceunitID");
            entity.Property(e => e.SubLedgerId).HasColumnName("SubLedgerID");
        });

        modelBuilder.Entity<MappingRjCendana>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_MAPPING_RJ_CENDANA");

            entity.Property(e => e.CoaRevenueIpr)
                .HasMaxLength(255)
                .HasColumnName("coa_revenue_ipr");
            entity.Property(e => e.CoaRevenueOpr).HasColumnName("coa_revenue_opr");
            entity.Property(e => e.GroupId)
                .HasMaxLength(255)
                .HasColumnName("GroupID");
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.ServiceunitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceunitID");
            entity.Property(e => e.SubLedgerId).HasColumnName("SubLedgerID");
        });

        modelBuilder.Entity<MasterMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Master_Mapping");

            entity.Property(e => e.GroupTindakan)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemIdMapping)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JenisTindakan)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NamaTindakan)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Tarif).HasColumnType("numeric(25, 2)");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.Userid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<MealOrder>(entity =>
        {
            entity.HasKey(e => e.OrderNo);

            entity.ToTable("MealOrder");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.DietPatientNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.FastingTime)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
            entity.Property(e => e.MenuItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MenuItemID");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VersionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VersionID");
        });

        modelBuilder.Entity<MealOrderDateInit>(entity =>
        {
            entity.HasKey(e => e.MealOrderDate);

            entity.ToTable("MealOrderDateInit");

            entity.Property(e => e.MealOrderDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MealOrderItem>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.SrmealSet, e.FoodId });

            entity.ToTable("MealOrderItem");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.DietId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DietID");
            entity.Property(e => e.DietPatientNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
            entity.Property(e => e.MenuItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MenuItemID");
        });

        modelBuilder.Entity<MealOrderItemLiquid>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.MealTime });

            entity.ToTable("MealOrderItemLiquid");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MealTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DietLiquidTransNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.IsDistributed).HasDefaultValue(false);
            entity.Property(e => e.IsVoidDistributed).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MealOrderItemPlan>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.SrmealSet, e.FoodId });

            entity.ToTable("MealOrderItemPlan");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MealOrderItemSetting>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.SrmealSet });

            entity.ToTable("MealOrderItemSetting");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MealOrderNonPatient>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("MealOrderNonPatient");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DistributedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DistributedByUserID");
            entity.Property(e => e.DistributedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MealOrderNonPatientItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo });

            entity.ToTable("MealOrderNonPatientItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<MedicalBenefitClaim>(entity =>
        {
            entity.ToTable("MedicalBenefitClaim");

            entity.Property(e => e.MedicalBenefitClaimId).HasColumnName("MedicalBenefitClaimID");
            entity.Property(e => e.ClaimDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalBenefitInfoId).HasColumnName("MedicalBenefitInfoID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SettlementDate).HasColumnType("datetime");
            entity.Property(e => e.TotalAmountOnBill).HasColumnType("money");
            entity.Property(e => e.TotalApprovedAmount).HasColumnType("money");
            entity.Property(e => e.TotalNonReimbursementAmount).HasColumnType("money");
            entity.Property(e => e.TotalReimbursementAmount).HasColumnType("money");
            entity.Property(e => e.YearPeriodId).HasColumnName("YearPeriodID");
        });

        modelBuilder.Entity<MedicalBenefitClaimItem>(entity =>
        {
            entity.ToTable("MedicalBenefitClaimItem");

            entity.Property(e => e.MedicalBenefitClaimItemId).HasColumnName("MedicalBenefitClaimItemID");
            entity.Property(e => e.AmountOnBill).HasColumnType("money");
            entity.Property(e => e.ApprovedAmount).HasColumnType("money");
            entity.Property(e => e.HospitalInfoId).HasColumnName("HospitalInfoID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalBenefitClaimId).HasColumnName("MedicalBenefitClaimID");
            entity.Property(e => e.Note)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PhysicianName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReAmount).HasColumnType("money");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TreatedId).HasColumnName("TreatedID");
            entity.Property(e => e.TreatmentDate).HasColumnType("datetime");
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("VisitTypeID");
        });

        modelBuilder.Entity<MedicalBenefitInfo>(entity =>
        {
            entity.ToTable("MedicalBenefitInfo");

            entity.Property(e => e.MedicalBenefitInfoId).HasColumnName("MedicalBenefitInfoID");
            entity.Property(e => e.DependentAmountValue).HasColumnType("money");
            entity.Property(e => e.DependentGuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DependentGuarantorID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxCarryOver).HasColumnType("money");
            entity.Property(e => e.MedicalBenefitName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MedicalPaidMoney).HasColumnType("money");
            entity.Property(e => e.SettlementRuleId).HasColumnName("SettlementRuleID");
            entity.Property(e => e.SrdependentPaidRules)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDependentPaidRules");
            entity.Property(e => e.SrmedicalPaidRules)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalPaidRules");
            entity.Property(e => e.SrunusedBalance)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRUnusedBalance");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<MedicalBenefitRuleDefinition>(entity =>
        {
            entity.ToTable("MedicalBenefitRuleDefinition");

            entity.Property(e => e.MedicalBenefitRuleDefinitionId).HasColumnName("MedicalBenefitRuleDefinitionID");
            entity.Property(e => e.EmployeeGradeId).HasColumnName("EmployeeGradeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalBenefitInfoId).HasColumnName("MedicalBenefitInfoID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
        });

        modelBuilder.Entity<MedicalDischargeSummary>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("MedicalDischargeSummary");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdmittingDiagnoseId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AdmittingDiagnoseID1");
            entity.Property(e => e.AdmittingDiagnoseId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AdmittingDiagnoseID2");
            entity.Property(e => e.AdmittingDiagnoseName1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AdmittingDiagnoseName2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AncillaryExam).IsUnicode(false);
            entity.Property(e => e.AncillaryExamOther).IsUnicode(false);
            entity.Property(e => e.ChiefComplaint).IsUnicode(false);
            entity.Property(e => e.Diet).IsUnicode(false);
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.FinalDiagnoseId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FinalDiagnoseID1");
            entity.Property(e => e.FinalDiagnoseId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FinalDiagnoseID2");
            entity.Property(e => e.FinalDiagnoseId3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FinalDiagnoseID3");
            entity.Property(e => e.FinalDiagnoseName1)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FinalDiagnoseName2)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FinalDiagnoseName3)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.HistOfPresentIllness)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Komorbiditas)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalProcedures).IsUnicode(false);
            entity.Property(e => e.Medications).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PastMedicalHistory).IsUnicode(false);
            entity.Property(e => e.PhysicalExam).IsUnicode(false);
            entity.Property(e => e.PpaSign).HasColumnType("image");
            entity.Property(e => e.PresentStatus).IsUnicode(false);
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.ProcedureName).IsUnicode(false);
            entity.Property(e => e.Prognosis).IsUnicode(false);
            entity.Property(e => e.SrdischargeCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeCondition");
            entity.Property(e => e.SrdischargeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeMethod");
            entity.Property(e => e.SrunitIntended)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRUnitIntended");
            entity.Property(e => e.SuggestionFollowUp).IsUnicode(false);
            entity.Property(e => e.TreatmentIndications).IsUnicode(false);
        });

        modelBuilder.Entity<MedicalDischargeSummaryBak>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("MedicalDischargeSummaryBak");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdmittingDiagnoseId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AdmittingDiagnoseID1");
            entity.Property(e => e.AdmittingDiagnoseId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AdmittingDiagnoseID2");
            entity.Property(e => e.AdmittingDiagnoseName1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AdmittingDiagnoseName2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AncillaryExam).IsUnicode(false);
            entity.Property(e => e.AncillaryExamOther).IsUnicode(false);
            entity.Property(e => e.ChiefComplaint).IsUnicode(false);
            entity.Property(e => e.ControlPlan).IsUnicode(false);
            entity.Property(e => e.Diet).IsUnicode(false);
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.FinalDiagnoseId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FinalDiagnoseID1");
            entity.Property(e => e.FinalDiagnoseId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FinalDiagnoseID2");
            entity.Property(e => e.FinalDiagnoseId3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FinalDiagnoseID3");
            entity.Property(e => e.FinalDiagnoseName1)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FinalDiagnoseName2)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FinalDiagnoseName3)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.HistOfPresentIllness)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Komorbiditas)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalProcedures).IsUnicode(false);
            entity.Property(e => e.Medications).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PastMedicalHistory).IsUnicode(false);
            entity.Property(e => e.PhysicalExam).IsUnicode(false);
            entity.Property(e => e.PpaSign).HasColumnType("image");
            entity.Property(e => e.PresentStatus).IsUnicode(false);
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.ProcedureName).IsUnicode(false);
            entity.Property(e => e.Prognosis).IsUnicode(false);
            entity.Property(e => e.SrdischargeCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeCondition");
            entity.Property(e => e.SrdischargeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeMethod");
            entity.Property(e => e.SrunitIntended)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRUnitIntended");
            entity.Property(e => e.SuggestionFollowUp).IsUnicode(false);
            entity.Property(e => e.TreatmentIndications).IsUnicode(false);
        });

        modelBuilder.Entity<MedicalDischargeSummaryBodyDiagram>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.BodyId });

            entity.ToTable("MedicalDischargeSummaryBodyDiagram");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicalDischargeSummaryBodyDiagramBak>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.BodyId });

            entity.ToTable("MedicalDischargeSummaryBodyDiagramBak");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicalDischargeSummaryByNurse>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("MedicalDischargeSummaryByNurse");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssistToolType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.BloodPress)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ControlPlan).IsUnicode(false);
            entity.Property(e => e.CtscanSheet).HasColumnName("CTScanSheet");
            entity.Property(e => e.DefecateType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DietLiquidLimitNote)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DietType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DischargeDiag01)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DischargeDiag02)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DischargeDiag03)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DischargeDiag04)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DrugsTaken)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Education)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EducationOthers)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.HandedBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.HospitalRefer)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocheaColor)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LocheaSmell)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LocheaType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OperationWoundType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OtherLetter)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PartiallyAssisted)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PerinealWoundType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PossibleEffect)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Pulse)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Respiratory)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SpecialDietNote)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Temp)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TransferMobilizationType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TreatmentDiag01)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TreatmentDiag02)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TreatmentDiag03)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TreatmentDiag04)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UrinateType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UterineType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.VulvaType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.XraysSheet).HasColumnName("XRaysSheet");
        });

        modelBuilder.Entity<MedicalDischargeSummaryDiagnose>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("MedicalDischargeSummaryDiagnose");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnosisText)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ExternalCauseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExternalCauseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrdiagnoseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiagnoseType");
        });

        modelBuilder.Entity<MedicalDischargeSummaryDiagnoseBak>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("MedicalDischargeSummaryDiagnoseBak");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnosisText)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ExternalCauseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExternalCauseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrdiagnoseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiagnoseType");
        });

        modelBuilder.Entity<MedicalDischargeSummaryPrescHomeBak>(entity =>
        {
            entity.HasKey(e => e.MedicationReceiveNo);

            entity.ToTable("MedicalDischargeSummaryPrescHomeBak");

            entity.Property(e => e.MedicationReceiveNo).ValueGeneratedNever();
            entity.Property(e => e.AdmissionAppropriateDateTime).HasColumnType("datetime");
            entity.Property(e => e.BalanceQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BalanceRealQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ConsumeQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ConsumeQtyInString)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DischargeAppropriateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceiveQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RefQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RefSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RefTransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrmedicationConsume)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationConsume");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransferAppropriateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MedicalDischargeSummaryProcedure>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("MedicalDischargeSummaryProcedure");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicalDischargeSummaryProcedureBak>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("MedicalDischargeSummaryProcedureBak");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicalEmployeeInitial>(entity =>
        {
            entity.ToTable("MedicalEmployeeInitial");

            entity.Property(e => e.MedicalEmployeeInitialId).HasColumnName("MedicalEmployeeInitialID");
            entity.Property(e => e.DependentUsedAmount).HasColumnType("money");
            entity.Property(e => e.EmployeeUsedAmount).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<MedicalFileStatus>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("MedicalFileStatus");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.Expeditor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrmedicalFileStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalFileStatus");
            entity.Property(e => e.SrmedicalFileStatusCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalFileStatusCategory");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MedicalRecordFileBorrowed>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).HasName("PK_MedicalRecordFileBorrowed_1");

            entity.ToTable("MedicalRecordFileBorrowed");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBorrowing).HasColumnType("datetime");
            entity.Property(e => e.DateOfReturn).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NameOfGivenId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NameOfGivenID");
            entity.Property(e => e.NameOfRecipientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NameOfRecipientID");
            entity.Property(e => e.NameOfTheBorrower)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReturnByName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrforThePurposesOf)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRForThePurposesOf");
        });

        modelBuilder.Entity<MedicalRecordFileBorrowedHistory>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.LastUpdateDateTime });

            entity.ToTable("MedicalRecordFileBorrowedHistory");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
        });

        modelBuilder.Entity<MedicalRecordFileStatus>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("MedicalRecordFileStatus");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FileInDate).HasColumnType("datetime");
            entity.Property(e => e.FileOutDate).HasColumnType("datetime");
            entity.Property(e => e.FileOutDateConfirmed).HasColumnType("datetime");
            entity.Property(e => e.FileOutUserIdcomfirmed)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FileOutUserIDComfirmed");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceiptByUserID");
            entity.Property(e => e.RequestByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RequestByUserID");
            entity.Property(e => e.SrmedicalFileCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalFileCategory");
            entity.Property(e => e.SrmedicalFileStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalFileStatus");
        });

        modelBuilder.Entity<MedicalRecordFileStatusDisplay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MedicalRecordFileStatusDisplay");

            entity.Property(e => e.Code)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
        });

        modelBuilder.Entity<MedicalRecordFileStatusMovement>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.LastPositionServiceUnitId });

            entity.ToTable("MedicalRecordFileStatusMovement");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastPositionServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastPositionServiceUnitID");
            entity.Property(e => e.LastPositionDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastPositionUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastPositionUserID");
        });

        modelBuilder.Entity<MedicationReceive>(entity =>
        {
            entity.HasKey(e => e.MedicationReceiveNo);

            entity.ToTable("MedicationReceive");

            entity.HasIndex(e => e.RegistrationNo, "IX_MedicationReceive_RegistrationNo");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsClosed, e.IsVoid }, "IX_MedicationReceive_RegistrationNo_IsClosed_IsVoid");

            entity.Property(e => e.MedicationReceiveNo).ValueGeneratedNever();
            entity.Property(e => e.AdmissionAppropriateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ApproveAdmByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApproveAdmByUserID");
            entity.Property(e => e.ApproveAdmDateTime).HasColumnType("datetime");
            entity.Property(e => e.BalanceQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BalanceRealQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ConsumeQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ConsumeQtyInString)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DischargeAppropriateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceiveQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RefQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RefSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RefTransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrmedicationConsume)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationConsume");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransferAppropriateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MedicationReceiveAppropriate>(entity =>
        {
            entity.HasKey(e => new { e.MedicationReceiveNo, e.AppropriateType });

            entity.ToTable("MedicationReceiveAppropriate");

            entity.Property(e => e.AppropriateType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CratedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CratedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicationReason)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.SrmedicationNotAppropriateReason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRMedicationNotAppropriateReason");
        });

        modelBuilder.Entity<MedicationReceiveFromPatient>(entity =>
        {
            entity.HasKey(e => e.MedicationReceiveNo);

            entity.ToTable("MedicationReceiveFromPatient");

            entity.Property(e => e.MedicationReceiveNo).ValueGeneratedNever();
            entity.Property(e => e.ApprovedByParamedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByParamedicID");
            entity.Property(e => e.BeyondUseDate).HasColumnType("datetime");
            entity.Property(e => e.Condition)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Duration)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.LastConsumeDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.RegPom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Temp)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicationReceiveStatus>(entity =>
        {
            entity.HasKey(e => new { e.MedicationReceiveNo, e.StatusDateTime });

            entity.ToTable("MedicationReceiveStatus");

            entity.Property(e => e.StatusDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicationReason)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SrmedicationStatusReason)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRMedicationStatusReason");
            entity.Property(e => e.SrmedicationStatusType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRMedicationStatusType");
            entity.Property(e => e.SrmedicationStopReason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRMedicationStopReason");
        });

        modelBuilder.Entity<MedicationReceiveUsed>(entity =>
        {
            entity.HasKey(e => new { e.MedicationReceiveNo, e.SequenceNo });

            entity.ToTable("MedicationReceiveUsed");

            entity.HasIndex(e => new { e.IsNotConsume, e.RealizedDateTime }, "IX_MedicationReceiveUsed_IsNotConsume_RealizedDateTime");

            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RealizedByUserID");
            entity.Property(e => e.RealizedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ScheduleDateTime).HasColumnType("datetime");
            entity.Property(e => e.SetupByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SetupByUserID");
            entity.Property(e => e.SetupDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrmedicationReason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRMedicationReason");
            entity.Property(e => e.VerificationByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VerificationByUserID");
            entity.Property(e => e.VerificationDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MedicationRecon>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ReconSeqNo });

            entity.ToTable("MedicationRecon");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BodyWeight).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicSignImg).HasColumnType("image");
            entity.Property(e => e.PatientSignImg).HasColumnType("image");
            entity.Property(e => e.ReconType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SignImg).HasColumnType("image");
            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicationReconLine>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ReconSeqNo, e.MedicationReceiveNo });

            entity.ToTable("MedicationReconLine");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproveByParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ApproveByParamedicID");
            entity.Property(e => e.ApproveDateTime).HasColumnType("datetime");
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReconStatus)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrmedicationConsume)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationConsume");
        });

        modelBuilder.Entity<MedicationSchedule>(entity =>
        {
            entity.HasKey(e => new { e.MedicationReceiveNo, e.ScheduleStartDate, e.ScheduleNo });

            entity.ToTable("MedicationSchedule");

            entity.Property(e => e.ScheduleStartDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ScheduleTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Membership>(entity =>
        {
            entity.HasKey(e => e.MembershipNo);

            entity.ToTable("Membership");

            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CityOfBirth)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JoinDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MemberName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrmembershipType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMembershipType");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalutation");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<MembershipDetail>(entity =>
        {
            entity.ToTable("MembershipDetail");

            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.BalanceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClaimedPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReedeemAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RewardPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RewardPointRefferal).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<MembershipItemRedeem>(entity =>
        {
            entity.HasKey(e => e.ItemReedemId);

            entity.ToTable("MembershipItemRedeem");

            entity.Property(e => e.ItemReedemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemReedemID");
            entity.Property(e => e.ItemReedemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PointsUsed).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SritemReedemGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemReedemGroup");
        });

        modelBuilder.Entity<MembershipItemRedemption>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("MembershipItemRedemption");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MembershipItemRedemptionDetail>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.MembershipDetailId });

            entity.ToTable("MembershipItemRedemptionDetail");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.ClaimedPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MembershipItemRedemptionItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemReedemId });

            entity.ToTable("MembershipItemRedemptionItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemReedemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemReedemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PointsUsed).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TotalPointsUsed).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<MembershipMember>(entity =>
        {
            entity.HasKey(e => new { e.MembershipNo, e.PatientId });

            entity.ToTable("MembershipMember");

            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Menu>(entity =>
        {
            entity.ToTable("Menu");

            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MenuItem>(entity =>
        {
            entity.ToTable("MenuItem");

            entity.Property(e => e.MenuItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MenuItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
            entity.Property(e => e.MenuItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.VersionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VersionID");
        });

        modelBuilder.Entity<MenuItemExtra>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("MenuItemExtra");

            entity.Property(e => e.SeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MenuItemExtraFood>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.SrdayName, e.FoodId });

            entity.ToTable("MenuItemExtraFood");

            entity.Property(e => e.SeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrdayName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDayName");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.IsActive)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MenuItemFood>(entity =>
        {
            entity.HasKey(e => new { e.MenuItemId, e.SrmealSet, e.FoodId, e.SrmenuItemFoodGroup }).HasName("PK_MenuItemFood_1");

            entity.ToTable("MenuItemFood");

            entity.Property(e => e.MenuItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MenuItemID");
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.FoodId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FoodID");
            entity.Property(e => e.SrmenuItemFoodGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMenuItemFoodGroup");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MenuSetting>(entity =>
        {
            entity.HasKey(e => e.StartingDate).HasName("PK_MenuSetting_1");

            entity.ToTable("MenuSetting");

            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.VersionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VersionID");
        });

        modelBuilder.Entity<MenuVersion>(entity =>
        {
            entity.HasKey(e => e.VersionId);

            entity.ToTable("MenuVersion");

            entity.Property(e => e.VersionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VersionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.VersionName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MergeBilling>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).IsClustered(false);

            entity.ToTable("MergeBilling");

            entity.HasIndex(e => new { e.RegistrationNo, e.FromRegistrationNo }, "_dta_index_MergeBilling_13_779149821__K1_K2");

            entity.HasIndex(e => e.FromRegistrationNo, "_dta_index_MergeBilling_13_779149821__K2_1");

            entity.HasIndex(e => new { e.FromRegistrationNo, e.RegistrationNo }, "_dta_index_MergeBilling_13_779149821__K2_K1");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.RegistrationNoNavigation).WithOne(p => p.MergeBilling)
                .HasForeignKey<MergeBilling>(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefMergeBillingToRegistration");
        });

        modelBuilder.Entity<MergeBillingHistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.FromRegistrationNoBefore, e.FromRegistrationNoAfter, e.LastUpdateDateTime });

            entity.ToTable("MergeBillingHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromRegistrationNoBefore)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromRegistrationNoAfter)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("message");

            entity.Property(e => e.Datetime)
                .IsUnicode(false)
                .HasColumnName("datetime");
            entity.Property(e => e.Message1)
                .IsUnicode(false)
                .HasColumnName("message");
        });

        modelBuilder.Entity<MetricInfo>(entity =>
        {
            entity.HasKey(e => e.Metric).HasName("PKMetricInfo");

            entity.ToTable("MetricInfo");

            entity.Property(e => e.Metric).ValueGeneratedNever();
            entity.Property(e => e.Category).HasMaxLength(64);
            entity.Property(e => e.Description).HasMaxLength(512);
            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.UtclastChangeDateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("UTCLastChangeDateTime");
        });

        modelBuilder.Entity<MetricMetaDataMessage>(entity =>
        {
            entity.HasKey(e => new { e.Metric, e.MessageId }).HasName("PKMetricMetaDataMessages");

            entity.Property(e => e.MessageId).HasColumnName("MessageID");
            entity.Property(e => e.BodyTemplate).HasMaxLength(512);
            entity.Property(e => e.BodyTemplateBaseline)
                .HasMaxLength(512)
                .HasColumnName("BodyTemplate_Baseline");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.HeaderTemplate).HasMaxLength(256);
            entity.Property(e => e.HeaderTemplateBaseline)
                .HasMaxLength(256)
                .HasColumnName("HeaderTemplate_Baseline");
            entity.Property(e => e.PulseTemplate).HasMaxLength(256);
            entity.Property(e => e.PulseTemplateBaseline)
                .HasMaxLength(256)
                .HasColumnName("PulseTemplate_Baseline");
            entity.Property(e => e.TodoTemplate).HasMaxLength(512);
            entity.Property(e => e.TodoTemplateBaseline)
                .HasMaxLength(512)
                .HasColumnName("TodoTemplate_Baseline");
        });

        modelBuilder.Entity<MetricMetaDataMessageMap>(entity =>
        {
            entity.HasKey(e => new { e.Metric, e.Value }).HasName("PKMetricMetaDataMessageMap");

            entity.ToTable("MetricMetaDataMessageMap");

            entity.Property(e => e.MessageId).HasColumnName("MessageID");
        });

        modelBuilder.Entity<MetricMetaDatum>(entity =>
        {
            entity.HasKey(e => e.Metric).HasName("PKMetricMetaData");

            entity.Property(e => e.Metric).ValueGeneratedNever();
            entity.Property(e => e.BaselineDefaultCriticalValue).HasDefaultValue(100L);
            entity.Property(e => e.BaselineDefaultInfoValue).HasDefaultValue(50L);
            entity.Property(e => e.BaselineDefaultWarningValue).HasDefaultValue(120L);
            entity.Property(e => e.BaselineMaxValue).HasDefaultValue(300L);
            entity.Property(e => e.ColumnName).HasMaxLength(256);
            entity.Property(e => e.DefaultMessageId).HasColumnName("DefaultMessageID");
            entity.Property(e => e.TableName).HasMaxLength(256);
            entity.Property(e => e.UtclastChangeDateTime)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime")
                .HasColumnName("UTCLastChangeDateTime");
            entity.Property(e => e.ValueType).HasMaxLength(128);
        });

        modelBuilder.Entity<MetricThreshold>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.Metric, e.ThresholdInstanceId }).HasName("PKMetricThresholds");

            entity.HasIndex(e => new { e.SqlserverId, e.Metric, e.UtcsnoozeEnd }, "IX_MetricThresholds_SQLServerID_Metric_UTCSnoozeEnd");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.ThresholdInstanceId)
                .HasDefaultValue(-1)
                .HasColumnName("ThresholdInstanceID");
            entity.Property(e => e.BaselineCriticalThreshold).HasMaxLength(2048);
            entity.Property(e => e.BaselineInfoThreshold).HasMaxLength(2048);
            entity.Property(e => e.BaselineWarningThreshold).HasMaxLength(2048);
            entity.Property(e => e.CriticalThreshold).HasMaxLength(2048);
            entity.Property(e => e.InfoThreshold).HasMaxLength(2048);
            entity.Property(e => e.SnoozeEndUser).HasMaxLength(255);
            entity.Property(e => e.SnoozeStartUser).HasMaxLength(255);
            entity.Property(e => e.ThresholdEnabled).HasDefaultValue(true);
            entity.Property(e => e.UtcsnoozeEnd)
                .HasColumnType("datetime")
                .HasColumnName("UTCSnoozeEnd");
            entity.Property(e => e.UtcsnoozeStart)
                .HasColumnType("datetime")
                .HasColumnName("UTCSnoozeStart");
            entity.Property(e => e.WarningThreshold).HasMaxLength(2048);

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.MetricThresholds)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKMetricThresholdsMonitoredSQLServers");
        });

        modelBuilder.Entity<MetricThresholdInstance>(entity =>
        {
            entity.HasKey(e => e.InstanceId).HasName("PKMetricThresholdInstances");

            entity.HasIndex(e => new { e.InstanceType, e.ThresholdInstanceName }, "IXMetricThresholdInstances");

            entity.Property(e => e.InstanceId).HasColumnName("InstanceID");
            entity.Property(e => e.CreationDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ThresholdInstanceName).HasMaxLength(255);
        });

        modelBuilder.Entity<MirroringParticipant>(entity =>
        {
            entity.HasKey(e => e.DatabaseId).HasName("PKMirroringParticipants");

            entity.Property(e => e.DatabaseId)
                .ValueGeneratedNever()
                .HasColumnName("DatabaseID");
            entity.Property(e => e.IsSuspended).HasColumnName("is_suspended");
            entity.Property(e => e.LastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("last_updated");
            entity.Property(e => e.MirrorAddress)
                .HasMaxLength(128)
                .HasColumnName("Mirror_address");
            entity.Property(e => e.MirrorInstanceId).HasColumnName("mirror_instanceID");
            entity.Property(e => e.MirroringGuid).HasColumnName("mirroring_guid");
            entity.Property(e => e.MirroringState).HasColumnName("mirroring_state");
            entity.Property(e => e.PartnerInstance)
                .HasMaxLength(128)
                .HasColumnName("partner_instance");
            entity.Property(e => e.PrincipalAddress)
                .HasMaxLength(128)
                .HasColumnName("principal_address");
            entity.Property(e => e.PrincipalInstanceId).HasColumnName("principal_instanceID");
            entity.Property(e => e.Role).HasColumnName("role");
            entity.Property(e => e.SafetyLevel).HasColumnName("safety_level");
            entity.Property(e => e.WitnessAddress)
                .HasMaxLength(128)
                .HasColumnName("witness_address");
            entity.Property(e => e.WitnessStatus).HasColumnName("witness_status");

            entity.HasOne(d => d.Database).WithOne(p => p.MirroringParticipant)
                .HasForeignKey<MirroringParticipant>(d => d.DatabaseId)
                .HasConstraintName("FKMirroringParticipantsSQLServerDatabaseNames");
        });

        modelBuilder.Entity<MirroringPreferredConfig>(entity =>
        {
            entity.HasKey(e => e.MirroringGuid).HasName("PKMirroringPreferredConfig");

            entity.ToTable("MirroringPreferredConfig");

            entity.Property(e => e.MirroringGuid).ValueGeneratedNever();
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.MirrorInstanceId).HasColumnName("MirrorInstanceID");
            entity.Property(e => e.PrincipalInstanceId).HasColumnName("PrincipalInstanceID");
            entity.Property(e => e.WitnessAddress).HasMaxLength(128);
        });

        modelBuilder.Entity<MirroringStatistic>(entity =>
        {
            entity.HasKey(e => new { e.DatabaseId, e.UtccollectionDateTime }).HasName("PKMirroringStatistics");

            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.AverageDelay).HasColumnName("average_delay");
            entity.Property(e => e.LocalTime)
                .HasColumnType("datetime")
                .HasColumnName("local_time");
            entity.Property(e => e.LogGenerationRate).HasColumnName("log_generation_rate");
            entity.Property(e => e.MirroringGuid).HasColumnName("mirroring_guid");
            entity.Property(e => e.MirroringState).HasColumnName("mirroring_state");
            entity.Property(e => e.RecoveryRate).HasColumnName("recovery_rate");
            entity.Property(e => e.Role).HasColumnName("role");
            entity.Property(e => e.SendRate).HasColumnName("send_rate");
            entity.Property(e => e.TimeBehind)
                .HasColumnType("datetime")
                .HasColumnName("time_behind");
            entity.Property(e => e.TimeRecorded)
                .HasColumnType("datetime")
                .HasColumnName("time_recorded");
            entity.Property(e => e.TransactionDelay).HasColumnName("transaction_delay");
            entity.Property(e => e.TransactionsPerSec).HasColumnName("transactions_per_sec");
            entity.Property(e => e.UnrestoredLog).HasColumnName("unrestored_log");
            entity.Property(e => e.UnsentLog).HasColumnName("unsent_log");
            entity.Property(e => e.WitnessStatus).HasColumnName("witness_status");

            entity.HasOne(d => d.Database).WithMany(p => p.MirroringStatistics)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKMirroringStatisticsSQLServerDatabaseNames");
        });

        modelBuilder.Entity<MonitoredServerSqlsafeInstance>(entity =>
        {
            entity.HasKey(e => e.SqlserverId).HasName("PKMonitoredServerSQLsafeInstance");

            entity.ToTable("MonitoredServerSQLsafeInstance");

            entity.Property(e => e.SqlserverId)
                .ValueGeneratedNever()
                .HasColumnName("SQLServerID");

            entity.HasOne(d => d.Repository).WithMany(p => p.MonitoredServerSqlsafeInstances)
                .HasForeignKey(d => d.RepositoryId)
                .HasConstraintName("FKMonitoredServerSQLsafeInstanceRepositoryId");

            entity.HasOne(d => d.Sqlserver).WithOne(p => p.MonitoredServerSqlsafeInstance)
                .HasForeignKey<MonitoredServerSqlsafeInstance>(d => d.SqlserverId)
                .HasConstraintName("FKMonitoredServerSQLsafeInstanceSQLServerId");
        });

        modelBuilder.Entity<MonitoredSqlserver>(entity =>
        {
            entity.HasKey(e => e.SqlserverId).HasName("PKMonitoredSQLServers");

            entity.ToTable("MonitoredSQLServers");

            entity.HasIndex(e => e.InstanceName, "IX_U_MonitoredSQLServers_InstanceName").IsUnique();

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.ActiveClusterNode).HasMaxLength(256);
            entity.Property(e => e.ActiveWaitAdvancedConfiguration).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.ActiveWaitCollectorCollectionTimeSeconds).HasDefaultValue(30);
            entity.Property(e => e.ActiveWaitCollectorEnabled).HasDefaultValue(false);
            entity.Property(e => e.ActiveWaitCollectorRunTimeSeconds).HasDefaultValue(0);
            entity.Property(e => e.ActiveWaitCollectorStartTimeRelative)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.ActiveWaitLoopTimeMilliseconds).HasDefaultValue(500);
            entity.Property(e => e.ActiveWaitQsEnable).HasDefaultValue(true);
            entity.Property(e => e.ActiveWaitXeenable)
                .HasDefaultValue(true)
                .HasColumnName("ActiveWaitXEEnable");
            entity.Property(e => e.ActiveWaitXeeventRetentionMode)
                .HasDefaultValue((byte)1)
                .HasColumnName("ActiveWaitXEEventRetentionMode");
            entity.Property(e => e.ActiveWaitXefileSizeMb)
                .HasDefaultValue(1)
                .HasColumnName("ActiveWaitXEFileSizeMB");
            entity.Property(e => e.ActiveWaitXefilesRollover)
                .HasDefaultValue(3)
                .HasColumnName("ActiveWaitXEFilesRollover");
            entity.Property(e => e.ActiveWaitXemaxDispatchLatencySecs)
                .HasDefaultValue(300)
                .HasColumnName("ActiveWaitXEMaxDispatchLatencySecs");
            entity.Property(e => e.ActiveWaitXemaxEventSizeMb)
                .HasDefaultValue(1)
                .HasColumnName("ActiveWaitXEMaxEventSizeMB");
            entity.Property(e => e.ActiveWaitXemaxMemoryMb)
                .HasDefaultValue(1)
                .HasColumnName("ActiveWaitXEMaxMemoryMB");
            entity.Property(e => e.ActiveWaitXememoryPartitionMode).HasColumnName("ActiveWaitXEMemoryPartitionMode");
            entity.Property(e => e.ActiveWaitXerecordsPerRefresh)
                .HasDefaultValue(1000)
                .HasColumnName("ActiveWaitXERecordsPerRefresh");
            entity.Property(e => e.ActiveWaitXestartupState).HasColumnName("ActiveWaitXEStartupState");
            entity.Property(e => e.ActiveWaitXetrackCausality).HasColumnName("ActiveWaitXETrackCausality");
            entity.Property(e => e.ActiveWaitsXefileName)
                .HasMaxLength(1024)
                .HasDefaultValue("dm7XESessionOut.xel")
                .HasColumnName("ActiveWaitsXEFileName");
            entity.Property(e => e.ActivityMonitorBlockedProcessThreshold).HasDefaultValue(30);
            entity.Property(e => e.ActivityMonitorBlockingEventsEnabled).HasDefaultValue(true);
            entity.Property(e => e.ActivityMonitorEnabled).HasDefaultValue(true);
            entity.Property(e => e.ActivityMonitorTraceMonitoringEnabled).HasDefaultValue(true);
            entity.Property(e => e.ActivityMonitorXeeventRetentionMode)
                .HasDefaultValue((byte)1)
                .HasColumnName("ActivityMonitorXEEventRetentionMode");
            entity.Property(e => e.ActivityMonitorXefileName)
                .HasMaxLength(1024)
                .HasDefaultValue("AMExtendedEventLog.xel")
                .HasColumnName("ActivityMonitorXEFileName");
            entity.Property(e => e.ActivityMonitorXefileSizeMb)
                .HasDefaultValue(1)
                .HasColumnName("ActivityMonitorXEFileSizeMB");
            entity.Property(e => e.ActivityMonitorXefilesRollover)
                .HasDefaultValue(3)
                .HasColumnName("ActivityMonitorXEFilesRollover");
            entity.Property(e => e.ActivityMonitorXemaxDispatchLatencySecs)
                .HasDefaultValue(300)
                .HasColumnName("ActivityMonitorXEMaxDispatchLatencySecs");
            entity.Property(e => e.ActivityMonitorXemaxEventSizeMb)
                .HasDefaultValue(1)
                .HasColumnName("ActivityMonitorXEMaxEventSizeMB");
            entity.Property(e => e.ActivityMonitorXemaxMemoryMb)
                .HasDefaultValue(1)
                .HasColumnName("ActivityMonitorXEMaxMemoryMB");
            entity.Property(e => e.ActivityMonitorXememoryPartitionMode).HasColumnName("ActivityMonitorXEMemoryPartitionMode");
            entity.Property(e => e.ActivityMonitorXerecordsPerRefresh)
                .HasDefaultValue(1000)
                .HasColumnName("ActivityMonitorXERecordsPerRefresh");
            entity.Property(e => e.ActivityMonitorXestartupState).HasColumnName("ActivityMonitorXEStartupState");
            entity.Property(e => e.ActivityMonitorXetrackCausality).HasColumnName("ActivityMonitorXETrackCausality");
            entity.Property(e => e.AlertRefreshInMinutes).HasDefaultValue(true);
            entity.Property(e => e.AwsAccessKey).HasColumnName("aws_access_key");
            entity.Property(e => e.AwsRegionEndpoint).HasColumnName("aws_region_endpoint");
            entity.Property(e => e.AwsSecretKey).HasColumnName("aws_secret_key");
            entity.Property(e => e.CloudProviderId).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.ClusterCollectionSetting).HasDefaultValue((short)0);
            entity.Property(e => e.CollectionServiceId).HasColumnName("CollectionServiceID");
            entity.Property(e => e.CustomCounterTimeoutInSeconds).HasDefaultValue(180);
            entity.Property(e => e.DatabaseStatisticsRefreshIntervalInSeconds).HasDefaultValue(3600);
            entity.Property(e => e.DisableExtendedHistoryCollection).HasDefaultValue(false);
            entity.Property(e => e.DisableOleAutomation).HasDefaultValue(false);
            entity.Property(e => e.DisableReplicationMonitoring).HasDefaultValue(false);
            entity.Property(e => e.DiskCollectionSettings).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.EarliestDateImportedFromLegacySqldm)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("EarliestDateImportedFromLegacySQLdm");
            entity.Property(e => e.FriendlyServerName).HasMaxLength(256);
            entity.Property(e => e.GroomActivity).HasDefaultValue(-1);
            entity.Property(e => e.GroomAlerts).HasDefaultValue(-1);
            entity.Property(e => e.GroomAudit).HasDefaultValue(-1);
            entity.Property(e => e.GroomMetrics).HasDefaultValue(-1);
            entity.Property(e => e.GroomPrescriptiveAnalysis).HasDefaultValue(-1);
            entity.Property(e => e.GroomTasks).HasDefaultValue(-1);
            entity.Property(e => e.GrowthStatisticsDays).HasDefaultValue((byte)253);
            entity.Property(e => e.GrowthStatisticsStartTime)
                .HasDefaultValue(new DateTime(1900, 1, 1, 3, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
            entity.Property(e => e.InputBufferLimiter).HasDefaultValue(500);
            entity.Property(e => e.InstanceName).HasMaxLength(256);
            entity.Property(e => e.LastAlertRefreshTime).HasColumnType("datetime");
            entity.Property(e => e.LastDatabaseCollectionTime).HasColumnType("datetime");
            entity.Property(e => e.LastGrowthStatisticsRunTime)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.LastGrowthStatisticsRunTimeUtc)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("LastGrowthStatisticsRunTimeUTC");
            entity.Property(e => e.LastReorgStatisticsRunTime)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.LastReorgStatisticsRunTimeUtc)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("LastReorgStatisticsRunTimeUTC");
            entity.Property(e => e.LastScheduledCollectionTime).HasColumnType("datetime");
            entity.Property(e => e.MaintenanceModeDays).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.MaintenanceModeDurationSeconds).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.MaintenanceModeMonthRecurringStart).HasColumnType("datetime");
            entity.Property(e => e.MaintenanceModeOnDemand).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.MaintenanceModeRecurringStart)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.MaintenanceModeStart)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.MaintenanceModeStop)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.MaintenanceModeType).HasDefaultValue(0);
            entity.Property(e => e.OutOfProcOleAutomation).HasDefaultValue(false);
            entity.Property(e => e.Password).HasMaxLength(256);
            entity.Property(e => e.PreferredClusterNode).HasMaxLength(256);
            entity.Property(e => e.QueryMonitorAdvancedConfiguration).HasDefaultValue("<?xml version=\"1.0\" encoding=\"utf-16\"?><AdvancedQueryMonitorConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><ApplicationExcludeLike><Like>SQLProfiler%</Like><Like>SQLDMO%</Like><Like>SQLAgent%</Like></ApplicationExcludeLike></AdvancedQueryMonitorConfiguration>");
            entity.Property(e => e.QueryMonitorDurationFilterInMilliseconds).HasDefaultValue(500);
            entity.Property(e => e.QueryMonitorStopTimeUtc)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("QueryMonitorStopTimeUTC");
            entity.Property(e => e.QueryMonitorTopPlanCountFilter).HasDefaultValue(75);
            entity.Property(e => e.QueryMonitorTraceFileRollovers).HasDefaultValue(2);
            entity.Property(e => e.QueryMonitorTraceFileSizeKb)
                .HasDefaultValue(1024)
                .HasColumnName("QueryMonitorTraceFileSizeKB");
            entity.Property(e => e.QueryMonitorTraceRecordsPerRefresh).HasDefaultValue(1000);
            entity.Property(e => e.QueryMonitorXefileSizeMb)
                .HasDefaultValue(20)
                .HasColumnName("QueryMonitorXEFileSizeMB");
            entity.Property(e => e.QueryMonitorXefilesRollover)
                .HasDefaultValue(5)
                .HasColumnName("QueryMonitorXEFilesRollover");
            entity.Property(e => e.RealServerName).HasMaxLength(100);
            entity.Property(e => e.RefRangeDays).HasDefaultValue((byte)124);
            entity.Property(e => e.RefRangeEndTimeUtc)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("RefRangeEndTimeUTC");
            entity.Property(e => e.RefRangeStartTimeUtc)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime")
                .HasColumnName("RefRangeStartTimeUTC");
            entity.Property(e => e.RefRangeUseDefaults).HasDefaultValue(true);
            entity.Property(e => e.RegisteredDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReorgMinTableSizeKb)
                .HasDefaultValue(64)
                .HasColumnName("ReorgMinTableSizeKB");
            entity.Property(e => e.ReorgStatisticsDays).HasDefaultValue((byte)253);
            entity.Property(e => e.ReorgStatisticsStartTime)
                .HasDefaultValue(new DateTime(1900, 1, 1, 3, 0, 0, 0, DateTimeKind.Unspecified))
                .HasColumnType("datetime");
            entity.Property(e => e.ServerEdition).HasMaxLength(30);
            entity.Property(e => e.ServerPingInterval).HasDefaultValue((short)30);
            entity.Property(e => e.ServerVersion).HasMaxLength(30);
            entity.Property(e => e.TableStatisticsExcludedDatabases).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Username).HasMaxLength(128);
            entity.Property(e => e.VhostId).HasColumnName("VHostID");
            entity.Property(e => e.VmDomainName).HasMaxLength(256);
            entity.Property(e => e.VmName).HasMaxLength(256);
            entity.Property(e => e.VmUid)
                .HasMaxLength(256)
                .HasColumnName("VmUID");
            entity.Property(e => e.WmiConnectAsService).HasDefaultValue(true);
            entity.Property(e => e.WmiPassword).HasMaxLength(256);
            entity.Property(e => e.WmiUserName).HasMaxLength(256);

            entity.HasMany(d => d.Metrics).WithMany(p => p.Sqlservers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomCounterMap",
                    r => r.HasOne<MetricMetaDatum>().WithMany()
                        .HasForeignKey("Metric")
                        .HasConstraintName("FKCustomCounterMapMetricMetaData"),
                    l => l.HasOne<MonitoredSqlserver>().WithMany()
                        .HasForeignKey("SqlserverId")
                        .HasConstraintName("FKCustomCounterMapMonitoredSQLServers"),
                    j =>
                    {
                        j.HasKey("SqlserverId", "Metric").HasName("PKCustomCounterMap");
                        j.ToTable("CustomCounterMap");
                        j.IndexerProperty<int>("SqlserverId").HasColumnName("SQLServerID");
                    });

            entity.HasMany(d => d.Tags).WithMany(p => p.Sqlservers)
                .UsingEntity<Dictionary<string, object>>(
                    "ServerTag",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("FKServerTagsTags"),
                    l => l.HasOne<MonitoredSqlserver>().WithMany()
                        .HasForeignKey("SqlserverId")
                        .HasConstraintName("FKServerTagsMonitoredSQLServers"),
                    j =>
                    {
                        j.HasKey("SqlserverId", "TagId").HasName("PKServerTags");
                        j.ToTable("ServerTags");
                        j.IndexerProperty<int>("SqlserverId").HasColumnName("SQLServerId");
                    });
        });

        modelBuilder.Entity<MonthlyAttendance>(entity =>
        {
            entity.ToTable("MonthlyAttendance");

            entity.Property(e => e.MonthlyAttendanceId).HasColumnName("MonthlyAttendanceID");
            entity.Property(e => e.BasicWorkingTime).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ConvertOvertimeHours).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.DisciplinarySanctionsAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OvertimeHours).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrattedanceInsentif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAttedanceInsentif");
            entity.Property(e => e.SrattendanceFileFormat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAttendanceFileFormat");
            entity.Property(e => e.TotalWorkingTime).HasColumnType("numeric(5, 2)");
        });

        modelBuilder.Entity<MonthlyAttendanceDetail>(entity =>
        {
            entity.ToTable("MonthlyAttendanceDetail");

            entity.Property(e => e.MonthlyAttendanceDetailId).HasColumnName("MonthlyAttendanceDetailID");
            entity.Property(e => e.CheckInDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CheckInTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CheckOutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CheckOutTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CutAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EarlyLeaveCutPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LateCutPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.OvertimeHours).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.ScheduleInDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ScheduleInTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleOutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ScheduleOutTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrattendanceFileFormat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAttendanceFileFormat");
        });

        modelBuilder.Entity<MonthlyAttendanceDetailHistory>(entity =>
        {
            entity.HasKey(e => e.MonthlyAttendanceDetailId);

            entity.ToTable("MonthlyAttendanceDetailHistory");

            entity.Property(e => e.MonthlyAttendanceDetailId).HasColumnName("MonthlyAttendanceDetailID");
            entity.Property(e => e.CheckInDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.CheckOutDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.WorkingHourId).HasColumnName("WorkingHourID");
        });

        modelBuilder.Entity<MonthlyAttendanceDetailSummary>(entity =>
        {
            entity.HasKey(e => e.MonthlyAttendanceDetailId).HasName("PK_MonthlyAttendanceDetailSummary_1");

            entity.ToTable("MonthlyAttendanceDetailSummary");

            entity.Property(e => e.MonthlyAttendanceDetailId)
                .ValueGeneratedNever()
                .HasColumnName("MonthlyAttendanceDetailID");
            entity.Property(e => e.HolidayOvertime5Wd)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HolidayOvertime5WD");
            entity.Property(e => e.HolidayOvertime6Wd)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("HolidayOvertime6WD");
            entity.Property(e => e.WeekdayOvertime5Wd)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("WeekdayOvertime5WD");
            entity.Property(e => e.WeekdayOvertime6Wd)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("WeekdayOvertime6WD");
        });

        modelBuilder.Entity<MontlyAttedance>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MontlyAttedance");

            entity.Property(e => e.BasicWorkingTime).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ConvertOvertimeHours).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MontlyAttedanceId)
                .ValueGeneratedOnAdd()
                .HasColumnName("MontlyAttedanceID");
            entity.Property(e => e.OvertimeHours).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrattedanceInsentif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAttedanceInsentif");
            entity.Property(e => e.TotalWorkingTime).HasColumnType("numeric(5, 2)");
        });

        modelBuilder.Entity<Morphology>(entity =>
        {
            entity.HasKey(e => e.MorphologyId).IsClustered(false);

            entity.ToTable("Morphology");

            entity.Property(e => e.MorphologyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("MorphologyID");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MorphologyName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<MsJan22>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_MsJan22");

            entity.Property(e => e.AkJml).HasColumnName("Ak_Jml");
            entity.Property(e => e.AkNilai).HasColumnName("Ak_Nilai");
            entity.Property(e => e.AwJml).HasColumnName("Aw_Jml");
            entity.Property(e => e.AwNilai).HasColumnName("Aw_Nilai");
            entity.Property(e => e.InJml).HasColumnName("In_Jml");
            entity.Property(e => e.InNilai).HasColumnName("In_Nilai");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LocationId)
                .HasMaxLength(255)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName).HasMaxLength(255);
            entity.Property(e => e.OutJml).HasColumnName("Out_Jml");
            entity.Property(e => e.OutNilai).HasColumnName("Out_Nilai");
        });

        modelBuilder.Entity<NccInacbg>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("NccInacbg");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AddPaymentAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CbgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CbgID");
            entity.Property(e => e.CbgName).IsUnicode(false);
            entity.Property(e => e.CbgSentStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CbgStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoverageAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SpecialDrugAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SpecialDrugId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SpecialDrugID");
            entity.Property(e => e.SpecialInvestigationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SpecialInvestigationId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SpecialInvestigationID");
            entity.Property(e => e.SpecialProcedureAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SpecialProcedureId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SpecialProcedureID");
            entity.Property(e => e.SpecialProsthesisAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SpecialProsthesisId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SpecialProsthesisID");
        });

        modelBuilder.Entity<NosocomialMonitoring>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo });

            entity.ToTable("NosocomialMonitoring");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Antibiotic)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BodyWeight).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.DecubitusDateTime).HasColumnType("datetime");
            entity.Property(e => e.DecubitusFrom)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.DecubitusFromType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FluidOther)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InstallationByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InstallationByUserID");
            entity.Property(e => e.InstallationDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Monitoring)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MonitoringType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.OtherDrugs)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Problem)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReleaseByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReleaseByUserID");
            entity.Property(e => e.ReleaseDateTime).HasColumnType("datetime");
            entity.Property(e => e.RoomId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.Sensitivity)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrettType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SREttType");
            entity.Property(e => e.SrinfusSet)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRInfusSet");
            entity.Property(e => e.Srivcatheter)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRIVCatheter");
            entity.Property(e => e.TubeNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TypeOfCatheter)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TypeOfInfus)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.VentilationMode)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NosocomialMonitoringBedRest>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringBedRest");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Fisiotherapi)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.InjuryCondition)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Mobilization)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SkinCondition)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NosocomialMonitoringCatheter>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringCatheter");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FixationFluid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SrgeneralChateterNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRGeneralChateterNo");
            entity.Property(e => e.SrsiliconChateterNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRSiliconChateterNo");
        });

        modelBuilder.Entity<NosocomialMonitoringDetail>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringDetail");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
        });

        modelBuilder.Entity<NosocomialMonitoringEtt>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringEtt");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsSpO2lessThan94).HasColumnName("IsSpO2LessThan94");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Leukosit)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SputumColor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SrettType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SREttType");
            entity.Property(e => e.Thorax)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NosocomialMonitoringHap>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringHap");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsSpO2lessThan94).HasColumnName("IsSpO2LessThan94");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Leukosit)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SputumColor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SrettType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SREttType");
            entity.Property(e => e.Thorax)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NosocomialMonitoringInfu>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InfusLocation)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LiquidType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MedicationMethod)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.MedicineAndLiquid)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReleaseDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrinfusLocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRInfusLocation");
            entity.Property(e => e.SrinfusSet)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRInfusSet");
            entity.Property(e => e.Srivcatheter)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRIVCatheter");
        });

        modelBuilder.Entity<NosocomialMonitoringNgt>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringNgt");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Replacement)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NosocomialMonitoringSurgery>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.MonitoringNo, e.SequenceNo });

            entity.ToTable("NosocomialMonitoringSurgery");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InjuryCondition)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MonitoringByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MonitoringByUserID");
            entity.Property(e => e.MonitoringDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SrexudateCharacter)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRExudateCharacter");
        });

        modelBuilder.Entity<NotificationProvider>(entity =>
        {
            entity.HasKey(e => e.ProviderId).HasName("PKNotificationProviders");

            entity.Property(e => e.ProviderId).ValueGeneratedNever();
            entity.Property(e => e.SerializedType).HasMaxLength(64);
        });

        modelBuilder.Entity<NotificationRule>(entity =>
        {
            entity.HasKey(e => e.RuleId).HasName("PKNotificationRules");

            entity.Property(e => e.RuleId)
                .ValueGeneratedNever()
                .HasColumnName("RuleID");
        });

        modelBuilder.Entity<NumberOfBed>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ClassId, e.StartingDate });

            entity.ToTable("NumberOfBed");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NumberOfBed1).HasColumnName("NumberOfBed");
        });

        modelBuilder.Entity<NumberOfBedSmf>(entity =>
        {
            entity.HasKey(e => new { e.StartingDate, e.ClassId, e.SmfId }).HasName("PK_NumberOfBedSmf_1");

            entity.ToTable("NumberOfBedSmf");

            entity.Property(e => e.StartingDate).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<NursingAssessment>(entity =>
        {
            entity.ToTable("NursingAssessment");

            entity.Property(e => e.NursingAssessmentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingAssessmentID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingAssessmentName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.QuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
        });

        modelBuilder.Entity<NursingAssessmentDiagnosa>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_NursingAssessmentDiagnosa_ID");

            entity.ToTable("NursingAssessmentDiagnosa");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AcceptedNum).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AcceptedNum2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AcceptedText)
                .HasMaxLength(350)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.Operand)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SranswerType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");
            entity.Property(e => e.SrnsDiagnosaPrefix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsDiagnosaPrefix");
            entity.Property(e => e.SrnsDiagnosaSuffix)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsDiagnosaSuffix");
            entity.Property(e => e.SrnsMandatoryLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsMandatoryLevel");

            entity.HasOne(d => d.NursingDiagnosa).WithMany(p => p.NursingAssessmentDiagnosas)
                .HasForeignKey(d => d.NursingDiagnosaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NursingAssessmentDiagnosa_NursingDiagnosa");
        });

        modelBuilder.Entity<NursingAssessmentDiagnosaRen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NursingAssessmentDiagnosaRen");

            entity.Property(e => e.AcceptedNum).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AcceptedText)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingAssessmentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingAssessmentID");
            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.Operand)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SranswerType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");

            entity.HasOne(d => d.NursingAssessment).WithMany()
                .HasForeignKey(d => d.NursingAssessmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NursingAssessmentDiagnosa_NursingAssessment");
        });

        modelBuilder.Entity<NursingAssessmentQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__NursingA__0DC06F8C2F0840DF");

            entity.ToTable("NursingAssessmentQuestion");

            entity.HasIndex(e => e.EquivalentQuestionId, "_idx_EquivAssID");

            entity.HasIndex(e => e.RelatedQuestionId, "_idx_RelatedQuestionID");

            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.AnswerPrefix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerSuffix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EquivalentQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EquivalentQuestionID");
            entity.Property(e => e.Formula)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParentQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentQuestionID");
            entity.Property(e => e.QuestionAnswerDefaultSelectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerDefaultSelectionID");
            entity.Property(e => e.QuestionAnswerDefaultSelectionId2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerDefaultSelectionID2");
            entity.Property(e => e.QuestionAnswerSelectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionID");
            entity.Property(e => e.QuestionAnswerSelectionId2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionID2");
            entity.Property(e => e.QuestionShortText)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.QuestionText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RelatedQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RelatedQuestionID");
            entity.Property(e => e.SranswerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");
        });

        modelBuilder.Entity<NursingAssessmentTransDt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NursingA__3214EC273891AB19");

            entity.ToTable("NursingAssessmentTransDT");

            entity.HasIndex(e => e.Hdid, "_idx_HDID");

            entity.HasIndex(e => new { e.Hdid, e.QuestionId }, "_idx_HdID_QuestID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AnswerNum).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AnswerPrefix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AnswerSelectionLineID");
            entity.Property(e => e.AnswerSuffix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerText)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Hdid).HasColumnName("HDID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.QuestionText)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NursingAssessmentTransHd>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NursingA__3214EC2734C11A35");

            entity.ToTable("NursingAssessmentTransHD");

            entity.HasIndex(e => e.QuestionFormReference, "_idx_QuestFormRef");

            entity.HasIndex(e => e.TransactionNo, "_idx_TransactionNo");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AssessmentDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionFormReference)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NursingDiagnosa>(entity =>
        {
            entity.HasKey(e => e.NursingDiagnosaId).HasName("PK_NursingDiagnosa_1");

            entity.ToTable("NursingDiagnosa");

            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.F1)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.F2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingDiagnosaCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NursingDiagnosaName)
                .HasMaxLength(450)
                .IsUnicode(false);
            entity.Property(e => e.NursingDiagnosaParentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaParentID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(450)
                .IsUnicode(false);
            entity.Property(e => e.RespondTemplate)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrnsDiagnosaType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsDiagnosaType");
            entity.Property(e => e.SrnsEtiologyType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsEtiologyType");
            entity.Property(e => e.SrnursingDiagnosaLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNursingDiagnosaLevel");
            entity.Property(e => e.SrnursingNicType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNursingNicType");
            entity.Property(e => e.SrnursingNocType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNursingNocType");
            entity.Property(e => e.Suffix)
                .HasMaxLength(450)
                .IsUnicode(false);
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
        });

        modelBuilder.Entity<NursingDiagnosaEvaluation>(entity =>
        {
            entity.ToTable("NursingDiagnosaEvaluation");

            entity.HasIndex(e => e.EvaluationId, "IX_NursingDiagnosaEvaluation_EvaluationID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EvaluationId).HasColumnName("EvaluationID");
            entity.Property(e => e.InterventionId).HasColumnName("InterventionID");
            entity.Property(e => e.NursingInterventionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingInterventionID");
            entity.Property(e => e.SrnursingCarePlanning)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNursingCarePlanning");
        });

        modelBuilder.Entity<NursingDiagnosaNsType>(entity =>
        {
            entity.HasKey(e => new { e.NursingDiagnosaId, e.SrnsType }).IsClustered(false);

            entity.ToTable("NursingDiagnosaNsType");

            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.SrnsType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsType");
        });

        modelBuilder.Entity<NursingDiagnosaServiceUnit>(entity =>
        {
            entity.HasKey(e => new { e.NursingDiagnosaId, e.ServiceUnitId });

            entity.ToTable("NursingDiagnosaServiceUnit");

            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<NursingDiagnosaTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK__NursingD__F87ADD074AB05B54");

            entity.ToTable("NursingDiagnosaTemplate");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemplateText)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NursingDiagnosaTemplateDetail>(entity =>
        {
            entity.HasKey(e => new { e.TemplateId, e.QuestionId }).HasName("PK__NursingD__28A6DBFFB4A6D34B");

            entity.ToTable("NursingDiagnosaTemplateDetail");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<NursingDiagnosaTemplateServiceUnit>(entity =>
        {
            entity.HasKey(e => new { e.TemplateId, e.ServiceUnitId });

            entity.ToTable("NursingDiagnosaTemplateServiceUnit");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<NursingDiagnosaTransDt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NursingD__3214EC273C623BFD");

            entity.ToTable("NursingDiagnosaTransDT", tb => tb.HasTrigger("TriggerNursingDiagnosaTransDTBeforeDelete"));

            entity.HasIndex(e => e.NursingDiagnosaId, "_idx_DiagID");

            entity.HasIndex(e => e.NursingDiagnosaParentId, "_idx_DiagParentID");

            entity.HasIndex(e => e.ParentId, "_idx_ParentID");

            entity.HasIndex(e => e.TransactionNo, "_idx_TransNo");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.A).IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDatetime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DpjpNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ExecuteDateTime).HasColumnType("datetime");
            entity.Property(e => e.Info5)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.IsPrmrj).HasColumnName("IsPRMRJ");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.NursingDiagnosaName).IsUnicode(false);
            entity.Property(e => e.NursingDiagnosaParentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NursingDiagnosaParentID");
            entity.Property(e => e.O).IsUnicode(false);
            entity.Property(e => e.P).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.PpaInstruction)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionCurrentDay)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ReceiveBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceToPhrNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Respond).IsUnicode(false);
            entity.Property(e => e.S).IsUnicode(false);
            entity.Property(e => e.SrnsType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsType");
            entity.Property(e => e.SrnursingCarePlanning)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNursingCarePlanning");
            entity.Property(e => e.SrnursingDiagnosaLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNursingDiagnosaLevel");
            entity.Property(e => e.SruserType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRUserType");
            entity.Property(e => e.SubmitBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.TmpNursingDiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TmpNursingDiagnosaID");
            entity.Property(e => e.TmpNursingDiagnosaParentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TmpNursingDiagnosaParentID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NursingTransHd>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).HasName("PK__NursingT__554342D8421B1553");

            entity.ToTable("NursingTransHD");

            entity.HasIndex(e => e.RegistrationNo, "_idx_RegNo");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NursingTransDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NutritionCareAssessmentQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__Nutritio__0DC06F8CB1EC2E56");

            entity.ToTable("NutritionCareAssessmentQuestion");

            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.AnswerPrefix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerSuffix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Formula)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParentQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentQuestionID");
            entity.Property(e => e.QuestionAnswerDefaultSelectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerDefaultSelectionID");
            entity.Property(e => e.QuestionAnswerDefaultSelectionId2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerDefaultSelectionID2");
            entity.Property(e => e.QuestionAnswerSelectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionID");
            entity.Property(e => e.QuestionAnswerSelectionId2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionID2");
            entity.Property(e => e.QuestionShortText)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.QuestionText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RelatedQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RelatedQuestionID");
            entity.Property(e => e.SranswerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");
        });

        modelBuilder.Entity<NutritionCareAssessmentQuestionDiagnose>(entity =>
        {
            entity.HasKey(e => new { e.QuestionId, e.TerminologyId, e.AgeInMonthStart, e.AgeInMonthEnd }).HasName("PK__Nutritio__20AA6917A4DD7456");

            entity.ToTable("NutritionCareAssessmentQuestionDiagnose");

            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.TerminologyId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TerminologyID");
            entity.Property(e => e.AcceptedNum).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AcceptedNum2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AcceptedText)
                .HasMaxLength(350)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Operand)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SranswerType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");

            entity.HasOne(d => d.Terminology).WithMany(p => p.NutritionCareAssessmentQuestionDiagnoses)
                .HasForeignKey(d => d.TerminologyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NutritionCareAssessmentQuestionDiagnose_NutritionCareTerminology");
        });

        modelBuilder.Entity<NutritionCareAssessmentTransDt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NutritionCareA__3214EC273891AB19");

            entity.ToTable("NutritionCareAssessmentTransDT");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AnswerNum).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AnswerPrefix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AnswerSelectionLineID");
            entity.Property(e => e.AnswerSuffix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerText)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Hdid).HasColumnName("HDID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.QuestionText)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NutritionCareAssessmentTransHd>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NutritionCareA__3214EC2734C11A35");

            entity.ToTable("NutritionCareAssessmentTransHD");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AssessmentDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionFormReference)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NutritionCareDiagnoseEvaluation>(entity =>
        {
            entity.ToTable("NutritionCareDiagnoseEvaluation");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EvaluationId).HasColumnName("EvaluationID");
            entity.Property(e => e.InterventionId).HasColumnName("InterventionID");
            entity.Property(e => e.NutritionCareInterventionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NutritionCareInterventionID");
        });

        modelBuilder.Entity<NutritionCareDiagnoseTransDt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NutritionCareD__3214EC273C623BFD");

            entity.ToTable("NutritionCareDiagnoseTransDT");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.D).IsUnicode(false);
            entity.Property(e => e.ExecuteDateTime).HasColumnType("datetime");
            entity.Property(e => e.I).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Me)
                .IsUnicode(false)
                .HasColumnName("ME");
            entity.Property(e => e.O).IsUnicode(false);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.ReferenceToPhrNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.S).IsUnicode(false);
            entity.Property(e => e.SrnutritionCareTerminologyLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNutritionCareTerminologyLevel");
            entity.Property(e => e.TerminologyId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TerminologyID");
            entity.Property(e => e.TerminologyName).IsUnicode(false);
            entity.Property(e => e.TerminologyParentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TerminologyParentID");
            entity.Property(e => e.TmpTerminologyId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TmpTerminologyID");
            entity.Property(e => e.TmpTerminologyParentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TmpTerminologyParentID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NutritionCareTerminology>(entity =>
        {
            entity.HasKey(e => e.TerminologyId).HasName("PK_NutritionCareTerminology_1");

            entity.ToTable("NutritionCareTerminology");

            entity.Property(e => e.TerminologyId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TerminologyID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DomainId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DomainID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RespondTemplate)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrnutritionCareTerminologyLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNutritionCareTerminologyLevel");
            entity.Property(e => e.TerminologyDesc)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TerminologyName)
                .HasMaxLength(450)
                .IsUnicode(false);
            entity.Property(e => e.TerminologyParentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TerminologyParentID");
        });

        modelBuilder.Entity<NutritionCareTerminologyTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK__NutritionCareTerminologyTemplate__TemplateID");

            entity.ToTable("NutritionCareTerminologyTemplate");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TemplateText)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NutritionCareTerminologyTemplateDetail>(entity =>
        {
            entity.HasKey(e => new { e.TemplateId, e.QuestionId }).HasName("PK__Nutritio__28A6DBFFA9534458");

            entity.ToTable("NutritionCareTerminologyTemplateDetail");

            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<NutritionCareTransHd>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).HasName("PK__NutritionCareT__554342D8421B1553");

            entity.ToTable("NutritionCareTransHD");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NutritionCareTransDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ObatTroliEmergency>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_obatTroliEmergency");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LocationId)
                .HasMaxLength(255)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName).HasMaxLength(255);
        });

        modelBuilder.Entity<ObatTroliEmergency2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_obatTroliEmergency2");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LocationId)
                .HasMaxLength(255)
                .HasColumnName("LocationID");
        });

        modelBuilder.Entity<Obatdiskon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_obatdiskon");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
        });

        modelBuilder.Entity<OldMedical>(entity =>
        {
            entity.HasKey(e => e.OldMedicalNo).HasName("PK__OldMedic__77C605E17B32CBC7");

            entity.ToTable("OldMedical");

            entity.Property(e => e.OldMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OperatingTheaterInformationDisplay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OperatingTheaterInformationDisplay");

            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
        });

        modelBuilder.Entity<OperationCostEstimation>(entity =>
        {
            entity.HasKey(e => new { e.DiagnoseId, e.ProcedureId, e.SrprocedureCategory, e.ClassId, e.RegistrationNo });

            entity.ToTable("OperationCostEstimation");

            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.SrprocedureCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureCategory");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CostAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<OperationCostEstimationItem>(entity =>
        {
            entity.HasKey(e => new { e.DiagnoseId, e.ProcedureId, e.SrprocedureCategory, e.ClassId, e.RegistrationNo, e.ItemGroupId, e.SrbillingGroup });

            entity.ToTable("OperationCostEstimationItem");

            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.SrprocedureCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureCategory");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.SrbillingGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBillingGroup");
            entity.Property(e => e.CostAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemGroupName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<OperationNotesTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("OperationNotesTemplate");

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TemplateText).IsUnicode(false);
        });

        modelBuilder.Entity<OperationalTime>(entity =>
        {
            entity.ToTable("OperationalTime");

            entity.Property(e => e.OperationalTimeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OperationalTimeID");
            entity.Property(e => e.EndTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime5)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OperationalTimeBackcolor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OperationalTimeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StartTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime5)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<OrganizationUnit>(entity =>
        {
            entity.ToTable("OrganizationUnit");

            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationUnitName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ParentOrganizationUnitId).HasColumnName("ParentOrganizationUnitID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrorganizationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROrganizationLevel");
        });

        modelBuilder.Entity<Osstatistic>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKOSStatistics");

            entity.ToTable("OSStatistics");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.OsavailableMemoryInKilobytes).HasColumnName("OSAvailableMemoryInKilobytes");
            entity.Property(e => e.OstotalPhysicalMemoryInKilobytes).HasColumnName("OSTotalPhysicalMemoryInKilobytes");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.Osstatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKSOSStatisticsMonitoredSQLServers");
        });

        modelBuilder.Entity<Overtime>(entity =>
        {
            entity.ToTable("Overtime");

            entity.Property(e => e.OvertimeId).HasColumnName("OvertimeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OvertimeName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<OvertimeDetail>(entity =>
        {
            entity.ToTable("OvertimeDetail");

            entity.Property(e => e.OvertimeDetailId).HasColumnName("OvertimeDetailID");
            entity.Property(e => e.Formula).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HourFrom).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.HourTo).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OvertimeId).HasColumnName("OvertimeID");
            entity.Property(e => e.Value).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<Pajak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Pajak");

            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Pph21).HasColumnType("money");
        });

        modelBuilder.Entity<Paramedic>(entity =>
        {
            entity.HasKey(e => e.ParamedicId).IsClustered(false);

            entity.ToTable("Paramedic");

            entity.HasIndex(e => e.SrparamedicRl1, "_idx_RL1").IsClustered();

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Bank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bank2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccount2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountName2)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ChartOfAccountIdApparamedicFee).HasColumnName("ChartOfAccountIdAPParamedicFee");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CoorporateGradeId).HasColumnName("CoorporateGradeID");
            entity.Property(e => e.CoorporateGradeValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DateOfBirth)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Foto).HasColumnType("image");
            entity.Property(e => e.GuaranteeFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsAvailable).HasDefaultValue(true);
            entity.Property(e => e.IsPkp).HasColumnName("IsPKP");
            entity.Property(e => e.Ktp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KTP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LicenseNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LicensePeriodeEnd).HasColumnType("datetime");
            entity.Property(e => e.LicensePeriodeStart).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.NotAvailableUntil).HasColumnType("smalldatetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicInitial)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Srnationality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRNationality");
            entity.Property(e => e.SrparamedicRl1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicRL1");
            entity.Property(e => e.SrparamedicStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRParamedicStatus");
            entity.Property(e => e.SrparamedicType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRParamedicType");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRReligion");
            entity.Property(e => e.Srspecialty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRSpecialty");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SubledgerIdApparamedicFee).HasColumnName("SubledgerIdAPParamedicFee");
            entity.Property(e => e.TaxRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ParamedicAutoBillItem>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.ServiceUnitId, e.ItemId }).HasName("PK_ParamedicAutoBillItem_1");

            entity.ToTable("ParamedicAutoBillItem");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ParamedicBridging>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrbridgingType, e.BridgingId });

            entity.ToTable("ParamedicBridging");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.BridgingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BridgingID");
            entity.Property(e => e.BridgingName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DutyType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SpecialisticId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SpecialisticID");
        });

        modelBuilder.Entity<ParamedicConsultForm>(entity =>
        {
            entity.HasKey(e => new { e.ConsultReferNo, e.TransactionNo });

            entity.ToTable("ParamedicConsultForm");

            entity.HasIndex(e => new { e.ConsultReferNo, e.QuestionFormId }, "IX_ParamedicConsultForm");

            entity.Property(e => e.ConsultReferNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicConsultRefer>(entity =>
        {
            entity.HasKey(e => e.ConsultReferNo);

            entity.ToTable("ParamedicConsultRefer");

            entity.HasIndex(e => new { e.RegistrationNo, e.ParamedicId }, "IX_ParamedicConsultRefer_RegPar");

            entity.Property(e => e.ConsultReferNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ActionExamTreatment)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ActiveMotion)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Answer)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.AnswerAction)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.AnswerDateTime).HasColumnType("datetime");
            entity.Property(e => e.AnswerDiagnose)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.AnswerPlan)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ChiefComplaint)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ConsultDateTime).HasColumnType("datetime");
            entity.Property(e => e.ConsultReferType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Hpi)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PassiveMotion)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PastMedicalHistory)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PhysicianAnswerSign).HasColumnType("image");
            entity.Property(e => e.PhysicianSign).HasColumnType("image");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrconsultAnswerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRConsultAnswerType");
            entity.Property(e => e.SrparamedicConsultType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRParamedicConsultType");
            entity.Property(e => e.ToAppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToParamedicID");
            entity.Property(e => e.ToRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToRoomID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToServiceUnitID");
        });

        modelBuilder.Entity<ParamedicCopy1>(entity =>
        {
            entity.HasKey(e => e.ParamedicId).IsClustered(false);

            entity.ToTable("Paramedic_copy1");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Bank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bank2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccount2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChartOfAccountIdApparamedicFee).HasColumnName("ChartOfAccountIdAPParamedicFee");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CoorporateGradeId).HasColumnName("CoorporateGradeID");
            entity.Property(e => e.CoorporateGradeValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DateOfBirth)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Foto).HasColumnType("image");
            entity.Property(e => e.GuaranteeFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsAvailable).HasDefaultValue(true);
            entity.Property(e => e.IsPkp).HasColumnName("IsPKP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LicenseNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LicensePeriodeEnd).HasColumnType("datetime");
            entity.Property(e => e.LicensePeriodeStart).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.NotAvailableUntil).HasColumnType("smalldatetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicInitial)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Srnationality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRNationality");
            entity.Property(e => e.SrparamedicRl1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicRL1");
            entity.Property(e => e.SrparamedicStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRParamedicStatus");
            entity.Property(e => e.SrparamedicType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRParamedicType");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRReligion");
            entity.Property(e => e.Srspecialty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRSpecialty");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SubledgerIdApparamedicFee).HasColumnName("SubledgerIdAPParamedicFee");
            entity.Property(e => e.TaxRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ParamedicFeeAddDeduc>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).HasName("PK_ParamedicFeeIncreaseDecrease");

            entity.ToTable("ParamedicFeeAddDeduc");

            entity.HasIndex(e => e.SrparamedicFeeAdjustType, "_idx_addDeducType");

            entity.HasIndex(e => e.IsApproved, "_idx_isApprove");

            entity.HasIndex(e => e.ParamedicId, "_idx_parid");

            entity.HasIndex(e => e.PaymentGroupNo, "_idx_paygno");

            entity.HasIndex(e => e.TransactionDate, "_idx_transdate");

            entity.HasIndex(e => e.VerificationNo, "_idx_verno");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ChartOfAccountTemplateId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdatedByUserID");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SrparamedicFeeAdjustType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeAdjustType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeAddDeducCoaItem>(entity =>
        {
            entity.HasKey(e => e.ListItemId);

            entity.ToTable("ParamedicFeeAddDeducCoaItem");

            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeByArSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Paramedi__3214EC07FF7CA5D1");

            entity.ToTable("ParamedicFeeByArSetting");

            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeValue).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.IsMergeToIpr).HasColumnName("IsMergeToIPR");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SrparamedicFeeCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeCaseType");
            entity.Property(e => e.SrparamedicFeeIsTeam)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeIsTeam");
            entity.Property(e => e.SrparamedicFeeTeamStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeTeamStatus");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
        });

        modelBuilder.Entity<ParamedicFeeByFee4ServiceSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Paramedi__3214EC07910BB060");

            entity.ToTable("ParamedicFeeByFee4ServiceSetting");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Formula)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormulaNetto)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrguarantorType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorType");
            entity.Property(e => e.SritemConditionRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemConditionRuleType");
            entity.Property(e => e.SrparamedicStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicStatus");
            entity.Property(e => e.Srprocedure)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedure");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.Srspecialty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpecialty");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
        });

        modelBuilder.Entity<ParamedicFeeByNumberOfPatient>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationDate, e.ParamedicId });

            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.FeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastCalculatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCalculatedByUserID");
            entity.Property(e => e.LastCalculatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeByNumberOfPatientsDetail>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationDate, e.ParamedicId, e.RegistrationNo });

            entity.ToTable("ParamedicFeeByNumberOfPatientsDetail");

            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeeByNumberOfPatientsRangeAmount>(entity =>
        {
            entity.HasKey(e => e.CounterId);

            entity.ToTable("ParamedicFeeByNumberOfPatientsRangeAmount");

            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeeByServiceSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Paramedi__3214EC0755A76A0F");

            entity.ToTable("ParamedicFeeByServiceSetting");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeValue).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.IgnoredIfAnyReplacement).HasDefaultValue(false);
            entity.Property(e => e.IsReplacementForFeeByPercentageOfAr).HasColumnName("IsReplacementForFeeByPercentageOfAR");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrparamedicFeeCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeCaseType");
            entity.Property(e => e.SrparamedicFeeIsTeam)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeIsTeam");
            entity.Property(e => e.SrparamedicFeeTeamStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeTeamStatus");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
        });

        modelBuilder.Entity<ParamedicFeeDeduction>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId, e.DeductionId });

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DeductionId).HasColumnName("DeductionID");
            entity.Property(e => e.CalculatedAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoMergeTo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Deduction).WithMany(p => p.ParamedicFeeDeductions)
                .HasForeignKey(d => d.DeductionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ParamedicFeeDeductions_ParamedicFeeDeductionSetting");
        });

        modelBuilder.Entity<ParamedicFeeDeductionSetting>(entity =>
        {
            entity.HasKey(e => e.DeductionId).HasName("PK__Paramedi__3214EC07CEC5E4DE");

            entity.ToTable("ParamedicFeeDeductionSetting");

            entity.Property(e => e.DeductionId).HasColumnName("DeductionID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeductionValue).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrguarantorType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorType");
            entity.Property(e => e.SrparamedicFeeDeduction)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeDeduction");
            entity.Property(e => e.SrparamedicFeeDeductionMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeDeductionMethod");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
        });

        modelBuilder.Entity<ParamedicFeeExecutedFormula>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("ParamedicFeeExecutedFormula");

            entity.HasIndex(e => e.RegistrationNo, "idx_reg");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.ExecutedFormula).IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeGuarantorCategory>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrphysicianFeeType });

            entity.ToTable("ParamedicFeeGuarantorCategory");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrphysicianFeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianFeeType");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeGuarantorCategoryItem>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrphysicianFeeType, e.ItemId });

            entity.ToTable("ParamedicFeeGuarantorCategoryItem");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrphysicianFeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianFeeType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeGuarantorCategoryItemComp>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrphysicianFeeType, e.ItemId, e.TariffComponentId });

            entity.ToTable("ParamedicFeeGuarantorCategoryItemComp");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrphysicianFeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianFeeType");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeItem>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.ItemId });

            entity.ToTable("ParamedicFeeItem");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeItemComp>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.ItemId, e.TariffComponentId });

            entity.ToTable("ParamedicFeeItemComp");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeItemGuarantor>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.ItemId, e.GuarantorId });

            entity.ToTable("ParamedicFeeItemGuarantor");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeItemGuarantorComp>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.ItemId, e.GuarantorId, e.TariffComponentId });

            entity.ToTable("ParamedicFeeItemGuarantorComp");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeePatientCategory>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrpatientCategory });

            entity.ToTable("ParamedicFeePatientCategory");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeePatientCategoryItem>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrpatientCategory, e.ItemId });

            entity.ToTable("ParamedicFeePatientCategoryItem");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeePatientCategoryItemComp>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrpatientCategory, e.ItemId, e.TariffComponentId });

            entity.ToTable("ParamedicFeePatientCategoryItemComp");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeePatientCategoryItemGuarantor>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrpatientCategory, e.ItemId, e.GuarantorId });

            entity.ToTable("ParamedicFeePatientCategoryItemGuarantor");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeePatientCategoryItemGuarantorComp>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrpatientCategory, e.ItemId, e.GuarantorId, e.TariffComponentId });

            entity.ToTable("ParamedicFeePatientCategoryItemGuarantorComp");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DeductionFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionFeeAmountReferral).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParamedicFeeAmountReferral).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeePaymentDt>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.VerificationNo });

            entity.ToTable("ParamedicFeePaymentDt");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeePaymentGroup>(entity =>
        {
            entity.HasKey(e => e.PaymentGroupNo).HasName("PK__Paramedi__4A83EB6B032B1692");

            entity.ToTable("ParamedicFeePaymentGroup");

            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproveDateTime).HasColumnType("datetime");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeAmountBeforeTax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.GuaranteeFeeDateFrom).HasColumnType("datetime");
            entity.Property(e => e.GuaranteeFeeDateTo).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentMethodId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PaymentMethodID");
            entity.Property(e => e.TaxOnPaymentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeePaymentGroupDetail>(entity =>
        {
            entity.HasKey(e => new { e.PaymentGroupNo, e.ParamedicId }).HasName("PK__Paramedi__503161690B243501");

            entity.ToTable("ParamedicFeePaymentGroupDetail");

            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.AmountAddDec).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmountFee4Service).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmountGuarantee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeePaymentHd>(entity =>
        {
            entity.HasKey(e => e.PaymentNo);

            entity.ToTable("ParamedicFeePaymentHd");

            entity.HasIndex(e => e.PaymentGroupNo, "_idx_PaymentGroupNo");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethodId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PaymentMethodID");
        });

        modelBuilder.Entity<ParamedicFeeProgressiveTax>(entity =>
        {
            entity.HasKey(e => e.CounterId);

            entity.ToTable("ParamedicFeeProgressiveTax");

            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.MinAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Percentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PercentageNonNpwp).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeRemun>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.Year, e.Month });

            entity.ToTable("ParamedicFeeRemun");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Additional).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Claim).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Deduction).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionAnesthetic).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionConvertion).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionResult).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeClaim).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastCalculatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCalculatedByUserID");
            entity.Property(e => e.LastCalculatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PercentOfClaim).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.Performance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeRemunByIdi>(entity =>
        {
            entity.HasKey(e => e.RemunId).HasName("PK_Remum_ID");

            entity.ToTable("ParamedicFeeRemunByIdi");

            entity.HasIndex(e => e.RemunNo, "RemunUniqueNo").IsUnique();

            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.AdjustmentFactor).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateEnd).HasColumnType("datetime");
            entity.Property(e => e.DateStart).HasColumnType("datetime");
            entity.Property(e => e.FundAllocInsetif).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FundAllocPosition).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FundAllocProcedure).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.KursInsentif).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.KursPosition).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RemunNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeeRemunByIdiDetail>(entity =>
        {
            entity.HasKey(e => e.RemunDetailId).HasName("PK_RemumDetail_ID");

            entity.ToTable("ParamedicFeeRemunByIdiDetail");

            entity.Property(e => e.RemunDetailId).HasColumnName("RemunDetailID");
            entity.Property(e => e.Coefficient).HasColumnType("decimal(18, 9)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.IdiCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Multiplier).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.Rvu).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RvuConversion).HasColumnType("decimal(18, 9)");
            entity.Property(e => e.Score).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SettingId).HasColumnName("SettingID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
        });

        modelBuilder.Entity<ParamedicFeeRemunByIdiSetting>(entity =>
        {
            entity.HasKey(e => e.SettingId).HasName("PK_Setting_ID");

            entity.Property(e => e.SettingId).HasColumnName("SettingID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MultiplierValue).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
        });

        modelBuilder.Entity<ParamedicFeeRemunByIdiSummary>(entity =>
        {
            entity.HasKey(e => new { e.RemunId, e.ParamedicId }).HasName("PK_Remun_Sum");

            entity.ToTable("ParamedicFeeRemunByIdiSummary");

            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.CoefficientSummary).HasColumnType("decimal(18, 9)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.InsentifFeeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionFeeValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProcedureFeeValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeTaxCalculation>(entity =>
        {
            entity.ToTable("ParamedicFeeTaxCalculation");

            entity.HasIndex(e => e.JournalId, "_idx_Journalid");

            entity.HasIndex(e => e.ParamedicId, "_idx_parid");

            entity.HasIndex(e => e.PaymentGroupNo, "_idx_paygno");

            entity.HasIndex(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId }, "_idx_transno_seqno_tc");

            entity.HasIndex(e => e.VerificationNo, "_idx_verifNo");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.FeeAmount).HasColumnType("money");
            entity.Property(e => e.FeeAmountAccumulated).HasColumnType("money");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.JournalId).HasColumnName("JournalID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.SrpphType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPphType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TaxAmountAccumulated).HasColumnType("money");
            entity.Property(e => e.TaxInPercent).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeTaxCalculationDt>(entity =>
        {
            entity.HasKey(e => new { e.VerificationNo, e.Percentage, e.Gross });

            entity.ToTable("ParamedicFeeTaxCalculationDt");

            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Percentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.Gross).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AccumulationTax).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.TaxBaseGross).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TaxToBePaid).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeTaxCalculationHd>(entity =>
        {
            entity.HasKey(e => e.VerificationNo);

            entity.ToTable("ParamedicFeeTaxCalculationHd");

            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AccumulationOfRecentTax).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AccumulationTax).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GrossAccumulation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.TaxBaseGrossAccumulation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TaxToBePaid).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeTransChargesItemComp>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("ParamedicFeeTransChargesItemComp");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.DecProductionServicesAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DecRentalRoomsAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DecTogethernessAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IncPremi1Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IncPremi2Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastCalculatedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCalculatedByUserID");
            entity.Property(e => e.LastCalculatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdatedByUserID");
            entity.Property(e => e.LastUpdatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PhysicianFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RentalRoomsToParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RentalRoomsToParamedicID");
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeTransChargesItemCompByDischargeDate>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("ParamedicFeeTransChargesItemCompByDischargeDate");

            entity.HasIndex(e => new { e.TransactionNo, e.ParamedicId, e.RegistrationNo }, "NoReg");

            entity.HasIndex(e => new { e.PaymentNoCash, e.PaymentNoAr, e.InvoicePaymentNo, e.PaymentNoGuarAr, e.InvoicePaymentNoGuar }, "NonClusteredIndex-20180825-150350");

            entity.HasIndex(e => new { e.SequenceNo, e.TransactionNo, e.TariffComponentId }, "_dta_index_ParamedicFeeTransChargesItemComp_13_793769885__K2_K1_K3");

            entity.HasIndex(e => e.VerificationNo, "_idx_verifNo");

            entity.HasIndex(e => new { e.ParamedicId, e.ItemId }, "idx_paramedic");

            entity.HasIndex(e => new { e.RegistrationNoMergeTo, e.DischargeDateMergeTo }, "idx_pftccbdd_regnomergebill");

            entity.HasIndex(e => new { e.DischargeDate, e.RegistrationNo }, "idx_reg");

            entity.HasIndex(e => new { e.DischargeDate, e.RegistrationNo, e.RegistrationNoMergeTo, e.DischargeDateMergeTo }, "idx_reg_dischdate");

            entity.HasIndex(e => e.Srprocedure1, "idx_srProc1").HasFillFactor(50);

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.AdditionalSum).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CalcDeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CalculatedAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ChangeNote)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionAnesthetic).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DeductionConvertion).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DeductionResult).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeDateMergeTo).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountExtra).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountItem).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ExecutedFormula)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExecutedMessage)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeAmountBruto).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeAmountToBePaid).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeAmountToBePaidChangeNote)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FeeAmountUpdateByUserId)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("FeeAmountUpdateByUserID");
            entity.Property(e => e.FeeAmountUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.InvoicePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InvoicePaymentNoGuar)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceWriteOffNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastCalculatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCalculatedByUserID");
            entity.Property(e => e.LastCalculatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastPaymentDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OldParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OldParamedicID");
            entity.Property(e => e.ParamedicFeeByServiceSettingId).HasColumnName("ParamedicFeeByServiceSettingID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMethodName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNoAr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PaymentNoAR");
            entity.Property(e => e.PaymentNoCash)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNoGuarAr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PaymentNoGuarAR");
            entity.Property(e => e.PctgPropAr)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("PctgPropAR");
            entity.Property(e => e.PctgPropArguar)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("PctgPropARGuar");
            entity.Property(e => e.PctgPropCash).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PercentagePayment).HasColumnType("decimal(7, 2)");
            entity.Property(e => e.PercentagePaymentAr)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("PercentagePaymentAR");
            entity.Property(e => e.PercentagePaymentGuarAr)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("PercentagePaymentGuarAR");
            entity.Property(e => e.Performance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PerformanceGross).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceItem).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoMergeTo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RemunByIdiId).HasColumnName("RemunByIdiID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SrparamedicFeeCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeCaseType");
            entity.Property(e => e.SrparamedicFeeIsTeam)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeIsTeam");
            entity.Property(e => e.SrparamedicFeeTeamStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeTeamStatus");
            entity.Property(e => e.SrphysicianFeeCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianFeeCategory");
            entity.Property(e => e.Srprocedure1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedure1");
            entity.Property(e => e.SumDeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SumDeductionAmountAfterTax).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TotalBill).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransactionNoRef)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeTransChargesItemCompSettled>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.TransactionNo, e.SequenceNo, e.TariffComponentId, e.IsFromAr, e.IsReturn });

            entity.ToTable("ParamedicFeeTransChargesItemCompSettled");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.CalcDeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CalculatedAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastCalculatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCalculatedByUserID");
            entity.Property(e => e.LastCalculatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicFeeTransPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Paramedi__3214EC073F8E30E4");

            entity.ToTable("ParamedicFeeTransPayment");

            entity.HasIndex(e => e.IsVoid, "_idx_isVoid");

            entity.HasIndex(e => e.PaymentRefDate, "_idx_payRefDate");

            entity.HasIndex(e => e.PaymentRefNo, "_idx_payRefNo");

            entity.HasIndex(e => e.PaymentGroupNo, "_idx_paygno");

            entity.HasIndex(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId }, "_idx_transno_seqno_tc");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmountPercentage).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentGroupNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRefDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicFeeVerification>(entity =>
        {
            entity.HasKey(e => e.VerificationNo);

            entity.ToTable("ParamedicFeeVerification");

            entity.HasIndex(e => e.IsApproved, "_idx_IsApprove");

            entity.HasIndex(e => new { e.ParamedicId, e.VerificationNo }, "_idx_ParidVerifno");

            entity.HasIndex(e => e.PlanningPaymentDate, "_idx_PlanningPayDate");

            entity.HasIndex(e => e.ParamedicId, "_idx_parid").HasFillFactor(50);

            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanningPaymentDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SumDeductionAmountAfterTax).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.VerificationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.VerificationTaxAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicFeeVerificationRentalRoom>(entity =>
        {
            entity.HasKey(e => new { e.VerificationNo, e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RentalRoomsAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TogethernessAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<ParamedicGlobalSchedule>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.ServiceUnitId, e.DayOfWeek });

            entity.ToTable("ParamedicGlobalSchedule");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OperationalTimeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OperationalTimeID");
        });

        modelBuilder.Entity<ParamedicLeave>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("ParamedicLeave");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrphysicianLeaveReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicianLeaveReason");
            entity.Property(e => e.SubsParamedicEmr)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubsParamedicEMR");
            entity.Property(e => e.SubsParamedicIp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubsParamedicIP");
            entity.Property(e => e.SubsParamedicOp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubsParamedicOP");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicLeaveDate>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.LeaveDate });

            entity.ToTable("ParamedicLeaveDate");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LeaveDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicLeaveExeptionUnit>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ServiceUnitId });

            entity.ToTable("ParamedicLeaveExeptionUnit");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.EndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicOtherType>(entity =>
        {
            entity.HasKey(e => new { e.ParamedicId, e.SrparamedicType });

            entity.ToTable("ParamedicOtherType");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrparamedicType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicRemunReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_ParamedicRemunReport");

            entity.Property(e => e.AcuanIdi)
                .HasMaxLength(255)
                .HasColumnName("Acuan IDI");
            entity.Property(e => e.Bulan).HasMaxLength(255);
            entity.Property(e => e.Icd10)
                .HasMaxLength(255)
                .HasColumnName("ICD 10");
            entity.Property(e => e.Icd9Cm)
                .HasMaxLength(255)
                .HasColumnName("ICD 9 CM");
            entity.Property(e => e.IdDokter)
                .HasMaxLength(255)
                .HasColumnName("ID Dokter");
            entity.Property(e => e.Jaminan).HasMaxLength(255);
            entity.Property(e => e.JasaId)
                .HasMaxLength(255)
                .HasColumnName("Jasa ID");
            entity.Property(e => e.JenisLayanan)
                .HasMaxLength(255)
                .HasColumnName("Jenis Layanan");
            entity.Property(e => e.KodeLayanan)
                .HasMaxLength(255)
                .HasColumnName("Kode Layanan");
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(255)
                .HasColumnName("Nama Dokter");
            entity.Property(e => e.NamaLayanan)
                .HasMaxLength(255)
                .HasColumnName("Nama Layanan");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .HasColumnName("Nama Pasien");
            entity.Property(e => e.NamaTindakanIdi)
                .HasMaxLength(255)
                .HasColumnName("Nama Tindakan IDI");
            entity.Property(e => e.No).HasMaxLength(255);
            entity.Property(e => e.NoRm)
                .HasMaxLength(255)
                .HasColumnName("No RM");
            entity.Property(e => e.OrderId)
                .HasMaxLength(255)
                .HasColumnName("Order ID");
            entity.Property(e => e.TglOrder)
                .HasMaxLength(255)
                .HasColumnName("Tgl Order");
            entity.Property(e => e.Unit).HasMaxLength(255);
            entity.Property(e => e.UnitKunjungan)
                .HasMaxLength(255)
                .HasColumnName("Unit Kunjungan");
        });

        modelBuilder.Entity<ParamedicSchedule>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId, e.PeriodYear }).HasName("PK_ParamedicSchedule_1");

            entity.ToTable("ParamedicSchedule");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PeriodMonth)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SrquotaType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRQuotaType");

            entity.HasOne(d => d.Paramedic).WithMany(p => p.ParamedicSchedules)
                .HasForeignKey(d => d.ParamedicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefParamedicScheduleHdToParamedic");
        });

        modelBuilder.Entity<ParamedicScheduleBpj>(entity =>
        {
            entity.HasKey(e => new { e.BpjsParamedicId, e.BpjsScheduleDate, e.BpjsServiceUnitId }).HasName("PK__bpjshfis__F90EBDD9D9100000");

            entity.HasIndex(e => new { e.BpjsScheduleDate, e.ParamedicId }, "IX_ParamedicScheduleBpjs_BpjsScheduleDate_ParamedicID");

            entity.Property(e => e.BpjsParamedicId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BpjsParamedicID");
            entity.Property(e => e.BpjsServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsServiceUnitID");
            entity.Property(e => e.BpjsDay)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.BpjsDayName)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.BpjsEndHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BpjsParamedicName)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.BpjsStartHour)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BpjsSubSpecialityCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BpjsSubSpecialityName)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsActive)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SubSpecialityServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubSpecialityServiceUnitID");
        });

        modelBuilder.Entity<ParamedicScheduleDate>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId, e.PeriodYear, e.ScheduleDate });

            entity.ToTable("ParamedicScheduleDate");

            entity.HasIndex(e => new { e.ParamedicId, e.ScheduleDate }, "IX_ParamedicScheduleDate_ParamedicID_ScheduleDate");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ScheduleDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.ClosedDateTime1).HasColumnType("datetime");
            entity.Property(e => e.ClosedDateTime2).HasColumnType("datetime");
            entity.Property(e => e.ClosedDateTime3).HasColumnType("datetime");
            entity.Property(e => e.ClosedDateTime4).HasColumnType("datetime");
            entity.Property(e => e.ClosedDateTime5).HasColumnType("datetime");
            entity.Property(e => e.ClosedTime1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedTime1ByUserID");
            entity.Property(e => e.ClosedTime2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedTime2ByUserID");
            entity.Property(e => e.ClosedTime3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedTime3ByUserID");
            entity.Property(e => e.ClosedTime4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedTime4ByUserID");
            entity.Property(e => e.ClosedTime5ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedTime5ByUserID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OperationalTimeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OperationalTimeID");
            entity.Property(e => e.PeriodMonth)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ParamedicScheduleDateItem>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId, e.ScheduleDate, e.OperationalTimeId }).HasName("PK_ParamedicScheduleDateItem_1");

            entity.ToTable("ParamedicScheduleDateItem");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.OperationalTimeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OperationalTimeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicScheduleForWebsite>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId }).HasName("PK__Paramedi__BEB2CF17A65BC723");

            entity.ToTable("ParamedicScheduleForWebsite");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Image)
                .HasMaxLength(1024)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsFriday).HasDefaultValue(false);
            entity.Property(e => e.IsFridayCendana).HasDefaultValue(false);
            entity.Property(e => e.IsMonday).HasDefaultValue(false);
            entity.Property(e => e.IsMondayCendana).HasDefaultValue(false);
            entity.Property(e => e.IsSaturday).HasDefaultValue(false);
            entity.Property(e => e.IsSaturdayCendana).HasDefaultValue(false);
            entity.Property(e => e.IsThursday).HasDefaultValue(false);
            entity.Property(e => e.IsThursdayCendana).HasDefaultValue(false);
            entity.Property(e => e.IsTuesday).HasDefaultValue(false);
            entity.Property(e => e.IsTuesdayCendana).HasDefaultValue(false);
            entity.Property(e => e.IsWednesday).HasDefaultValue(false);
            entity.Property(e => e.IsWednesdayCendana).HasDefaultValue(false);
            entity.Property(e => e.QuotaOnlineBpjs).HasDefaultValue(0);
            entity.Property(e => e.QuotaOnlineCendana).HasDefaultValue(0);
            entity.Property(e => e.ServiceUnitIdcendana)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitIDCendana");
        });

        modelBuilder.Entity<ParamedicSchedulePerDate>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId, e.PeriodYear, e.ScheduleDate }).HasName("PK__Paramedi__874CB5E43967E1A2");

            entity.ToTable("ParamedicSchedulePerDate");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.IsSetPrimary).HasDefaultValue((byte)0);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ParamedicScheduleSlot>(entity =>
        {
            entity.HasKey(e => new { e.SlotId, e.ParamedicId, e.ServiceUnitId }).HasName("PK__Paramedi__0A124A4F3C6C7234");

            entity.ToTable("ParamedicScheduleSlot");

            entity.Property(e => e.SlotId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SlotID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<ParamedicSoaptemplate>(entity =>
        {
            entity.HasKey(e => e.SoaptemplateId).HasName("PK__Paramedi__7F2DF5A403FF0294");

            entity.ToTable("ParamedicSOAPTemplate");

            entity.Property(e => e.SoaptemplateId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOAPTemplateID");
            entity.Property(e => e.A).IsUnicode(false);
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.O).IsUnicode(false);
            entity.Property(e => e.P).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.S).IsUnicode(false);
            entity.Property(e => e.SrmedicalNotesInputType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalNotesInputType");
        });

        modelBuilder.Entity<ParamedicTeam>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ParamedicId, e.StartDate });

            entity.ToTable("ParamedicTeam");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SourceType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrparamedicTeamStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicTeamStatus");
        });

        modelBuilder.Entity<ParamedicTransCharge>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ParamedicId });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PastMedicalHistory>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.SrmedicalDisease });

            entity.ToTable("PastMedicalHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.SrmedicalDisease)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalDisease");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PastSurgicalHistory>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PastSurgicalHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SurgicalHistory)
                .HasMaxLength(1500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PastTransfusionHistory>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PastTransfusionHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.AllergicReaction)
                .HasMaxLength(1500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PathologyAnatomy>(entity =>
        {
            entity.HasKey(e => e.ResultNo);

            entity.ToTable("PathologyAnatomy");

            entity.Property(e => e.ResultNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdditionalNotes).IsUnicode(false);
            entity.Property(e => e.AtrophyDescription).IsUnicode(false);
            entity.Property(e => e.ClinicalData)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateOfCompletion).HasColumnType("datetime");
            entity.Property(e => e.DiagnosisId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnosisID");
            entity.Property(e => e.DiagnosisName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Er)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ER");
            entity.Property(e => e.ExaminationMaterial)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Her2Neu)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Impression).IsUnicode(false);
            entity.Property(e => e.ImpressionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ImpressionGroupID");
            entity.Property(e => e.ImpressionGroupItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ImpressionGroupItemID");
            entity.Property(e => e.InterpretationOfResults).IsUnicode(false);
            entity.Property(e => e.Ki67)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Macroscopic).IsUnicode(false);
            entity.Property(e => e.Microscopic).IsUnicode(false);
            entity.Property(e => e.MorphologyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MorphologyID");
            entity.Property(e => e.NonEpithelialMalignancies).IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OtherInfectionsDescription).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PathologyAnatomyDiagnoses).IsUnicode(false);
            entity.Property(e => e.PathologyNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Pr)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PR");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferralAddress)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferralDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Result).IsUnicode(false);
            entity.Property(e => e.ResultDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ResultTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ResultType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SourceOfTissueId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SourceOfTissueID");
            entity.Property(e => e.SrpaReexaminationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaReexaminationType");
            entity.Property(e => e.Suggestion).IsUnicode(false);
            entity.Property(e => e.TissueId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TissueID");
            entity.Property(e => e.Tophology)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PathologyAnatomyDiagnosis>(entity =>
        {
            entity.HasKey(e => new { e.ResultType, e.DiagnosisId });

            entity.ToTable("PathologyAnatomyDiagnosis");

            entity.Property(e => e.ResultType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiagnosisId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnosisID");
            entity.Property(e => e.DiagnosisName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PathologyAnatomyImage>(entity =>
        {
            entity.HasKey(e => new { e.ResultNo, e.ImageNo });

            entity.ToTable("PathologyAnatomyImage");

            entity.Property(e => e.ResultNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DocumentImage).HasColumnType("image");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNotes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PathologyAnatomyImpressionGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId);

            entity.ToTable("PathologyAnatomyImpressionGroup");

            entity.Property(e => e.GroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PathologyAnatomyImpressionGroupItem>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.ItemId });

            entity.ToTable("PathologyAnatomyImpressionGroupItem");

            entity.Property(e => e.GroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PathologyAnatomyLocationOfCytology>(entity =>
        {
            entity.HasKey(e => e.LocationId);

            entity.ToTable("PathologyAnatomyLocationOfCytology");

            entity.Property(e => e.LocationId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationName).IsUnicode(false);
        });

        modelBuilder.Entity<PathologyAnatomySourceOfTissue>(entity =>
        {
            entity.HasKey(e => e.SourceOfTissueId);

            entity.ToTable("PathologyAnatomySourceOfTissue");

            entity.Property(e => e.SourceOfTissueId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SourceOfTissueID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SourceOfTissueName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PathologyAnatomyTissue>(entity =>
        {
            entity.HasKey(e => e.TissueId).HasName("PK_PathologyAnatomyTissue_1");

            entity.ToTable("PathologyAnatomyTissue");

            entity.Property(e => e.TissueId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TissueID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SourceOfTissueId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SourceOfTissueID");
            entity.Property(e => e.TissueName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pathway>(entity =>
        {
            entity.ToTable("Pathway");

            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.Alos).HasColumnName("ALOS");
            entity.Property(e => e.CoverageValue1).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoverageValue2).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoverageValue3).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PathwayName).IsUnicode(false);
            entity.Property(e => e.StartingDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PathwayDiagnoseItem>(entity =>
        {
            entity.HasKey(e => new { e.PathwayId, e.DiagnoseId });

            entity.ToTable("PathwayDiagnoseItem");

            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PathwayItem>(entity =>
        {
            entity.HasKey(e => new { e.PathwayId, e.PathwayItemSeqNo });

            entity.ToTable("PathwayItem");

            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.AssesmentGroupName).IsUnicode(false);
            entity.Property(e => e.AssesmentHeaderName).IsUnicode(false);
            entity.Property(e => e.AssesmentName).IsUnicode(false);
            entity.Property(e => e.CoverageValue1).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoverageValue2).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoverageValue3).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
        });

        modelBuilder.Entity<PathwayItemExecution>(entity =>
        {
            entity.HasKey(e => new { e.PathwayId, e.PathwayItemSeqNo, e.DayNo });

            entity.ToTable("PathwayItemExecution");

            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrpathwayExecutionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPathwayExecutionType");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.ToTable("Patient");

            entity.HasIndex(e => e.FullName, "IX_Patient_FullName");

            entity.HasIndex(e => e.ReverseMedicalNo, "IX_Patient_ReverseMedicalNo");

            entity.HasIndex(e => e.ReverseOldMedicalNo, "IX_Patient_ReverseOldMedicalNo");

            entity.HasIndex(e => e.MedicalNo, "UX_Patient_MedicalNo")
                .IsUnique()
                .HasFilter("([MedicalNo]<>'')");

            entity.HasIndex(e => new { e.PatientId, e.MedicalNo }, "_dta_index_Patient_15_419636688__K5_K1_K68_2_4_6_7_10_11_26_28_29_31_32_35_45_51_52_53_60_76_84");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("PatientID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BloodRhesus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("+")
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CityOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.Company)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CompanyAddress).IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(0)))")
                .HasColumnType("datetime");
            entity.Property(e => e.DeathCertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DeceasedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnosticNo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.EmployeeJobDepartementName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeJobTitleName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FamilyRegisterNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherOccupationDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.FullName)
                .HasMaxLength(150)
                .HasComputedColumnSql("(CONVERT([nvarchar](150),(Trim([FirstName])+case when [MiddleName]<>'' then ' '+Trim([MiddleName]) else '' end)+case when [LastName]<>'' then ' '+Trim([LastName]) else '' end))", false);
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsAlive).HasDefaultValue(true);
            entity.Property(e => e.IsDonor).HasDefaultValue(false);
            entity.Property(e => e.IsNonPatient).HasDefaultValue(false);
            entity.Property(e => e.IsNotPaidOff).HasDefaultValue(false);
            entity.Property(e => e.LastDonorDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastVisitDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MemberId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MemberID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MotherMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MotherName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MotherOccupationDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.NumberOfDonor)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(3, 0)");
            entity.Property(e => e.OldMedicalNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PackageBalance)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParentSpouseMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParentSpouseName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParentSpouseOccupationDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PassportNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PictureFileName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponTime).HasPrecision(0);
            entity.Property(e => e.ReverseMedicalNo)
                .HasMaxLength(15)
                .HasComputedColumnSql("(CONVERT([nvarchar](15),reverse(replace([MedicalNo],'-',''))))", false);
            entity.Property(e => e.ReverseOldMedicalNo)
                .HasMaxLength(20)
                .HasComputedColumnSql("(CONVERT([nvarchar](20),reverse(replace([OldMedicalNo],'-',''))))", false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("M")
                .IsFixedLength();
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRBloodType");
            entity.Property(e => e.Srbpjsclass)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("SRBPJSClass");
            entity.Property(e => e.Sreducation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SREducation");
            entity.Property(e => e.SremployeeRelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeRelationship");
            entity.Property(e => e.Srethnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SREthnic");
            entity.Property(e => e.SrfatherOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFatherOccupation");
            entity.Property(e => e.SrinformationFrom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInformationFrom");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrmedicalFileBin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRMedicalFileBin");
            entity.Property(e => e.SrmedicalFileStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRMedicalFileStatus");
            entity.Property(e => e.SrmotherOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMotherOccupation");
            entity.Property(e => e.Srnationality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRNationality");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrparentSpouseOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParentSpouseOccupation");
            entity.Property(e => e.SrpatienRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatienRelation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.SrrelationshipQuality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationshipQuality");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRReligion");
            entity.Property(e => e.SrresidentialHome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResidentialHome");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("SRSalutation");
            entity.Property(e => e.Srtitle)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTitle");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressCounty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressDistrict)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressPhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressStreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TempAddressZipCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ValuesOfTrust)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PatientAllergy>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.AllergyGroup, e.Allergen }).IsClustered(false);

            entity.ToTable("PatientAllergy");

            entity.HasIndex(e => e.PatientId, "_dta_index_PatientAllergy_c_13_116195464__K9").IsClustered();

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.AllergyGroup)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Allergen)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AllergenName)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Anaphylaxis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DescAndReaction)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Sranaphylaxis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRAnaphylaxis");
        });

        modelBuilder.Entity<PatientAssessment>(entity =>
        {
            entity.HasKey(e => e.RegistrationInfoMedicId);

            entity.ToTable("PatientAssessment");

            entity.HasIndex(e => new { e.PatientId, e.ServiceUnitId, e.SrassessmentType }, "IX_PatientAssessment_PatientID_ServiceUnitID_SRAssessmentType");

            entity.HasIndex(e => e.RegistrationNo, "IX_PatientAssessment_RegistrationNo");

            entity.Property(e => e.RegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoMedicID");
            entity.Property(e => e.AdditionalNotes).IsUnicode(false);
            entity.Property(e => e.AllowAnamnesisSource)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AnamnesisNotes).IsUnicode(false);
            entity.Property(e => e.AssessmentDateTime).HasColumnType("datetime");
            entity.Property(e => e.ConsulTo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ConsulToType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConsultDate).HasColumnType("datetime");
            entity.Property(e => e.ControlPlan)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Diagnose)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeDatePlan).HasColumnType("datetime");
            entity.Property(e => e.DischargeMedicalPlan)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.DoaDateTime).HasColumnType("datetime");
            entity.Property(e => e.DpjpInPatient)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DpjpInPatientId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DpjpInPatientID");
            entity.Property(e => e.Education)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpPlanType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Genogram).HasColumnType("image");
            entity.Property(e => e.HighRiskCriteria)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Hpi)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.InPatientRejectReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InpatientIndication)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.JobHistNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Medikamentosa)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OtherExam)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientSignImg).HasColumnType("image");
            entity.Property(e => e.Photo).HasColumnType("image");
            entity.Property(e => e.PhysicalExam).IsUnicode(false);
            entity.Property(e => e.Prognosis)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ReferReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferToFamilyDoctor)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ReferToHospital)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReviewOfSystem).IsUnicode(false);
            entity.Property(e => e.RoomInPatient)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SignImg).HasColumnType("image");
            entity.Property(e => e.SrassessmentType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRAssessmentType");
            entity.Property(e => e.SurgicalDateTime).HasColumnType("datetime");
            entity.Property(e => e.Therapy)
                .HasMaxLength(8000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientBiometric>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PK__PatientB__970EC3460958DEE7");

            entity.ToTable("PatientBiometric");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.DataF)
                .HasMaxLength(7500)
                .IsUnicode(false);
            entity.Property(e => e.IndexF)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientBirthRecord>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PatientBirthRecord");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.ApgarScore1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ApgarScore2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ApgarScore3).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.BirthMethod)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BirthMethodScIndication)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BirthPregnancyAge).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.BornAtDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CertificateNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChestCircumference).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentDiet)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherBirthOfDate).HasColumnType("datetime");
            entity.Property(e => e.FatherName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FatherSsn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrowthNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HeadCircumference).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Length).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MotherMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MotherRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SchoolAchievement)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SchoolClass)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SrbirthComplication)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBirthComplication");
            entity.Property(e => e.SrbirthIndication)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBirthIndication");
            entity.Property(e => e.SrbirthMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBirthMethod");
            entity.Property(e => e.SrbornAt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBornAt");
            entity.Property(e => e.SrbornCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBornCondition");
            entity.Property(e => e.SrcaesarMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCaesarMethod");
            entity.Property(e => e.SrdeathCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDeathCondition");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrsingleTwin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSingleTwin");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TimeOfBirth)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TwinNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Weight).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientBlackListHistory>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.IsBlackList, e.LastUpdateDateTime });

            entity.ToTable("PatientBlackListHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientChildBirthHistory>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.SequenceNo });

            entity.ToTable("PatientChildBirthHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Bbl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BBL");
            entity.Property(e => e.ChildBirth)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Complication)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Helper)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Hm)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("HM");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrbirthMethod)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRBirthMethod");
        });

        modelBuilder.Entity<PatientDischargeAppointment>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ParamedicId });

            entity.ToTable("PatientDischargeAppointment");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.AppointmentDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AppointmentTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.QueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<PatientDischargeHistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.BedId, e.DischargeDate, e.DischargeTime, e.LastUpdateDateTime }).HasName("PK_PatientDischargeHistory_1");

            entity.ToTable("PatientDischargeHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DischargeOperatorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DischargeOperatorID");
        });

        modelBuilder.Entity<PatientDocument>(entity =>
        {
            entity.HasKey(e => e.PatientDocumentId).IsClustered(false);

            entity.ToTable("PatientDocument");

            entity.HasIndex(e => e.PatientId, "IX_PatientDocument_PatientID");

            entity.HasIndex(e => e.RegistrationNo, "IX_PatientDocument_RegistrationNo");

            entity.Property(e => e.PatientDocumentId).HasColumnName("PatientDocumentID");
            entity.Property(e => e.DocumentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FileAttachName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OriFileName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OriPath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SmallImage).HasColumnType("image");
            entity.Property(e => e.SrdocumentCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDocumentCategory");
        });

        modelBuilder.Entity<PatientDocumentImage>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.SequenceNo });

            entity.ToTable("PatientDocumentImage");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Image).HasColumnType("image");
            entity.Property(e => e.ImageTemplateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ImageTemplateID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrimageTemplateType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRImageTemplateType");
        });

        modelBuilder.Entity<PatientEducation>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo });

            entity.ToTable("PatientEducation");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EducationByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EducationByUserID");
            entity.Property(e => e.EducationDateTime).HasColumnType("datetime");
            entity.Property(e => e.EducationType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FmSign).HasColumnType("image");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MethodOther)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PsSign).HasColumnType("image");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SrpatientEducationEvaluation)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRPatientEducationEvaluation");
            entity.Property(e => e.SrpatientEducationMethod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRPatientEducationMethod");
            entity.Property(e => e.SrpatientEducationProblem)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRPatientEducationProblem");
            entity.Property(e => e.SrpatientEducationRecipient)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRPatientEducationRecipient");
            entity.Property(e => e.SruserType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRUserType");
        });

        modelBuilder.Entity<PatientEducationLine>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo, e.SrpatientEducation });

            entity.ToTable("PatientEducationLine");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrpatientEducation)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRPatientEducation");
            entity.Property(e => e.EducationNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientEducationRsudt>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("PatientEducationRsudt");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Age)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BeliefValueExtraText)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EducationGivenToExtraText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EthicExtraText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LanguageExtraText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Others)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SrbeliefValue)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBeliefValue");
            entity.Property(e => e.Sreducation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducation");
            entity.Property(e => e.SreducationCarePlan)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SREducationCarePlan");
            entity.Property(e => e.SreducationEthnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationEthnic");
            entity.Property(e => e.SreducationGivenTo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationGivenTo");
            entity.Property(e => e.SreducationLanguage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLanguage");
            entity.Property(e => e.SreducationMedicalEquip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SREducationMedicalEquip");
            entity.Property(e => e.SreducationMedicalSupport)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SREducationMedicalSupport");
            entity.Property(e => e.SreducationProcedure)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SREducationProcedure");
            entity.Property(e => e.SreducationRehabilitation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SREducationRehabilitation");
            entity.Property(e => e.SreducationTherapy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SREducationTherapy");
            entity.Property(e => e.SreducationTranslatorNeeded)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationTranslatorNeeded");
            entity.Property(e => e.SremotionalProblem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SREmotionalProblem");
            entity.Property(e => e.SrinformationWillingToAccept)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInformationWillingToAccept");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.TranslatorExtraText)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientEducationRsudtDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId);

            entity.ToTable("PatientEducationRsudtDetail");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EducationDateTime).HasColumnType("datetime");
            entity.Property(e => e.EducationGivenToExtraText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EducationTopicName)
                .HasMaxLength(1500)
                .IsUnicode(false);
            entity.Property(e => e.EducatorName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EducatorProfessionText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EducatorSign).HasColumnType("image");
            entity.Property(e => e.EducatorSignThumbnail).HasColumnType("image");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientSign).HasColumnType("image");
            entity.Property(e => e.PatientSignThumbnail).HasColumnType("image");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SreducationEvaluation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationEvaluation");
            entity.Property(e => e.SreducationGivenTo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationGivenTo");
            entity.Property(e => e.SreducationInitLvlUnderstanding)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationInitLvlUnderstanding");
            entity.Property(e => e.SreducationMedia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationMedia");
            entity.Property(e => e.SreducationTopic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationTopic");
            entity.Property(e => e.SreducatorProfession)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducatorProfession");
            entity.Property(e => e.TargetName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientEmergencyContact>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PatientEmergencyContact_pk");

            entity.ToTable("PatientEmergencyContact");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("PatientID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.Srrelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRRelationship");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");

            entity.HasOne(d => d.Patient).WithOne(p => p.PatientEmergencyContact)
                .HasForeignKey<PatientEmergencyContact>(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PatientEmergencyContact_fk");
        });

        modelBuilder.Entity<PatientFace>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PatientFace");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.LastCreatedUserId)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.LastUpdatedUserId)
                .HasMaxLength(32)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientFluidBalance>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("PatientFluidBalance");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BodyWeight).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.LastTemp).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NormalTemp).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SchemaInfus)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientFluidBalanceDetail>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo, e.DetailSequenceNo }).HasName("PK_PatientFluidBalanceDetail_1");

            entity.ToTable("PatientFluidBalanceDetail");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FluidName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FluidQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.InOutDateTime).HasColumnType("datetime");
            entity.Property(e => e.InOutQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SrfluidInOutMethod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRFluidInOutMethod");
        });

        modelBuilder.Entity<PatientFluidBalanceSchemaInfu>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo, e.SchemaInfusNo });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SchemaInfusName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientGenogram>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PatientGenogram");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Genogram).HasColumnType("image");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientHealthRecord>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.RegistrationNo, e.QuestionFormId });

            entity.ToTable("PatientHealthRecord");

            entity.HasIndex(e => e.ReferenceNo, "IX_PatientHealthRecord_ReferenceNo");

            entity.HasIndex(e => new { e.RegistrationNo, e.QuestionFormId }, "IX_PatientHealthRecord_RegistrationNo_QuestionFormID");

            entity.HasIndex(e => e.TransactionNo, "_idx_TransNo");

            entity.HasIndex(e => new { e.RecordDate, e.TransactionNo, e.RegistrationNo }, "idx_PatientHealthRecord");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("000")
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDatetime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Examiner")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExaminerId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ExaminerID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LetterNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RecordDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RecordTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<PatientHealthRecordDeleted>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.RegistrationNo, e.QuestionFormId });

            entity.ToTable("PatientHealthRecordDeleted");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExaminerId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ExaminerID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RecordDate).HasColumnType("datetime");
            entity.Property(e => e.RecordTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<PatientHealthRecordLine>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.RegistrationNo, e.QuestionFormId, e.QuestionGroupId, e.QuestionId });

            entity.ToTable("PatientHealthRecordLine");

            entity.HasIndex(e => new { e.QuestionId, e.RegistrationNo }, "IX_PatientHealthRecordLine_QuestionID_RegistrationNo");

            entity.HasIndex(e => e.TransactionNo, "_idx_TransNo");

            entity.HasIndex(e => new { e.TransactionNo, e.QuestionId }, "_idx_TransNoQuestID");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("000")
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionAnswerNum).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.QuestionAnswerPrefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerSelectionLineID");
            entity.Property(e => e.QuestionAnswerSuffix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.QuestionAnswerText2)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PatientHealthRecordLineDeleted>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.RegistrationNo, e.QuestionFormId, e.QuestionGroupId, e.QuestionId });

            entity.ToTable("PatientHealthRecordLineDeleted");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionAnswerNum).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.QuestionAnswerPrefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionLineID");
            entity.Property(e => e.QuestionAnswerSuffix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText).IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText2).IsUnicode(false);
        });

        modelBuilder.Entity<PatientHealthRecordTemplate>(entity =>
        {
            entity.HasKey(e => e.QuestionFormTemplateId).HasName("PK__PatientH__499F548C73D4ADCD");

            entity.ToTable("PatientHealthRecordTemplate");

            entity.Property(e => e.QuestionFormTemplateId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionFormTemplateID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.TemplateData).IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientIdentificationCompliance>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("PatientIdentificationCompliance");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.DivisionId).HasColumnName("DivisionID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ObserverId).HasColumnName("ObserverID");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SubDivisionId).HasColumnName("SubDivisionID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIdentificationComplianceItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.QuestionFormId, e.QuestionGroupId, e.QuestionId });

            entity.ToTable("PatientIdentificationComplianceItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.QuestionAnswerNum).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.QuestionAnswerPrefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionLineID");
            entity.Property(e => e.QuestionAnswerSuffix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText).IsUnicode(false);
            entity.Property(e => e.QuestionAnswerText2).IsUnicode(false);
        });

        modelBuilder.Entity<PatientImage>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PatientImage");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Photo).HasColumnType("image");
        });

        modelBuilder.Entity<PatientImmunization>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.ImmunizationId, e.ImmunizationNo });

            entity.ToTable("PatientImmunization");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.ImmunizationId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ImmunizationID");
            entity.Property(e => e.ImmunizationDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferenceItemID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VaccineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VaccineID");
        });

        modelBuilder.Entity<PatientImmunizationOther>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PatientImmunizationOther");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Imunization)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIncident>(entity =>
        {
            entity.HasKey(e => e.PatientIncidentNo).HasName("PK__PatientI__362003DE313AA214");

            entity.ToTable("PatientIncident");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.Chronology).IsUnicode(false);
            entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Handling).IsUnicode(false);
            entity.Property(e => e.IncidentDateTime).HasColumnType("datetime");
            entity.Property(e => e.IncidentLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentName).IsUnicode(false);
            entity.Property(e => e.IncidentOccurredInPatientsWithName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.IncidentOccurredOnName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.InitialName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccurInOtherUnitsNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReportedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReportedByUserID");
            entity.Property(e => e.ReportingDateTime).HasColumnType("datetime");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitIdinCharge)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitIDInCharge");
            entity.Property(e => e.ServiceUnitIncidentLocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitIncidentLocationID");
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrclinicalImpact)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRClinicalImpact");
            entity.Property(e => e.SrclinicalImpactPrev)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalImpactPrev");
            entity.Property(e => e.SrincidentFollowUp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentFollowUp");
            entity.Property(e => e.SrincidentFollowUpPrev)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentFollowUpPrev");
            entity.Property(e => e.SrincidentGroup)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentGroup");
            entity.Property(e => e.SrincidentGroupPrev)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentGroupPrev");
            entity.Property(e => e.SrincidentHandledBy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentHandledBy");
            entity.Property(e => e.SrincidentOccurredInPatientsWith)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRIncidentOccurredInPatientsWith");
            entity.Property(e => e.SrincidentOccurredOn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRIncidentOccurredOn");
            entity.Property(e => e.SrincidentProbabilityFrequency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentProbabilityFrequency");
            entity.Property(e => e.SrincidentProbabilityFrequencyPrev)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentProbabilityFrequencyPrev");
            entity.Property(e => e.SrincidentType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentType");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIncidentCauseAnalysis>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.SrincidentCauseAnalysis });

            entity.ToTable("PatientIncidentCauseAnalysis");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrincidentCauseAnalysis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentCauseAnalysis");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientIncidentComponentType>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.SrincidentType, e.ComponentId, e.SubComponentId });

            entity.ToTable("PatientIncidentComponentType");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrincidentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentType");
            entity.Property(e => e.ComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ComponentID");
            entity.Property(e => e.SubComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubComponentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Modus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubComponentName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientIncidentInvestigation>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.ServiceUnitId, e.SeqNo });

            entity.ToTable("PatientIncidentInvestigation");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SeqNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.FollowUp)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpDateTime).HasColumnType("datetime");
            entity.Property(e => e.Implementation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ImplementationDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonInCharge)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Recomendation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RecomendationDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIncidentKtd>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.SrincidentKtd });

            entity.ToTable("PatientIncidentKTD");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrincidentKtd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncidentKTD");
            entity.Property(e => e.IncidentKtdname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IncidentKTDName");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIncidentRelatedUnit>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.ServiceUnitId });

            entity.ToTable("PatientIncidentRelatedUnit");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.IncidentChronologyCauses)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.IncidentDirectCause)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IncidentUnderlyingCauses)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InvestigationApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InvestigationApprovedByUserID");
            entity.Property(e => e.InvestigationApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.InvestigationByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InvestigationByUserID");
            entity.Property(e => e.InvestigationDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIncidentSafetyGoal>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.SrsafetyGoals });

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrsafetyGoals)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSafetyGoals");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientIncidentUnderlyingCausesItemComponent>(entity =>
        {
            entity.HasKey(e => new { e.PatientIncidentNo, e.ServiceUnitId, e.FactorId, e.FactorItemId, e.ComponentId });

            entity.ToTable("PatientIncidentUnderlyingCausesItemComponent");

            entity.Property(e => e.PatientIncidentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.FactorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorID");
            entity.Property(e => e.FactorItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FactorItemID");
            entity.Property(e => e.ComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ComponentID");
            entity.Property(e => e.ComponentName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientInfo>(entity =>
        {
            entity.HasKey(e => e.PatientInfoId).HasName("PK_PatientInfo_1");

            entity.ToTable("PatientInfo");

            entity.Property(e => e.PatientInfoId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientInfoID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Information).HasColumnType("text");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientInfos)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefPatientToPatientInfo");
        });

        modelBuilder.Entity<PatientInfoSumary>(entity =>
        {
            entity.HasKey(e => e.PatientId);

            entity.ToTable("PatientInfoSumary");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientMembership>(entity =>
        {
            entity.HasKey(e => e.MembershipNo);

            entity.ToTable("PatientMembership");

            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JoinDate).HasColumnType("datetime");
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.SrmembershipType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMembershipType");
        });

        modelBuilder.Entity<PatientMembershipDetail>(entity =>
        {
            entity.HasKey(e => e.MembershipDetailId);

            entity.ToTable("PatientMembershipDetail");

            entity.HasIndex(e => new { e.MembershipNo, e.StartDate, e.EndDate }, "idx_PatientMembershipDetail_MembershipNo_StartDate_EndDate");

            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.ClaimedPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RewardPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientMembershipItemRedeem>(entity =>
        {
            entity.HasKey(e => e.ItemReedemId);

            entity.ToTable("PatientMembershipItemRedeem");

            entity.Property(e => e.ItemReedemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemReedemID");
            entity.Property(e => e.ItemReedemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PointsUsed).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SritemReedemGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemReedemGroup");
        });

        modelBuilder.Entity<PatientMembershipItemRedemption>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("PatientMembershipItemRedemption");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientMembershipItemRedemptionDetail>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.MembershipDetailId });

            entity.ToTable("PatientMembershipItemRedemptionDetail");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.ClaimedPoint).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientMembershipItemRedemptionItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemReedemId });

            entity.ToTable("PatientMembershipItemRedemptionItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemReedemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemReedemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PointsUsed).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TotalPointsUsed).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<PatientMembershipMember>(entity =>
        {
            entity.HasKey(e => new { e.MembershipNo, e.PatientId });

            entity.ToTable("PatientMembershipMember");

            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientMrnnameHistory>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.UpdateDateTime, e.UpdateByUserId });

            entity.ToTable("PatientMRNNameHistory");

            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UpdateByUserID");
            entity.Property(e => e.FromFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FromMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToMedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ToMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientOdontogram>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.RegistrationNo });

            entity.ToTable("PatientOdontogram");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OdontogramDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.T11)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T1151notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T1151Notes");
            entity.Property(e => e.T12)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T1252notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T1252Notes");
            entity.Property(e => e.T13)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T1353notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T1353Notes");
            entity.Property(e => e.T14)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T1454notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T1454Notes");
            entity.Property(e => e.T15)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T1555notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T1555Notes");
            entity.Property(e => e.T16)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T16notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T16Notes");
            entity.Property(e => e.T17)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T17notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T17Notes");
            entity.Property(e => e.T18)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T18notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T18Notes");
            entity.Property(e => e.T21)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T22)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T23)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T24)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T25)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T26)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T26notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T26Notes");
            entity.Property(e => e.T27)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T27notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T27Notes");
            entity.Property(e => e.T28)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T28notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T28Notes");
            entity.Property(e => e.T31)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T32)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T33)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T34)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T35)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T36)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T36notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T36Notes");
            entity.Property(e => e.T37)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T37notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T37Notes");
            entity.Property(e => e.T38)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T38notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T38Notes");
            entity.Property(e => e.T41)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T4181notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T4181Notes");
            entity.Property(e => e.T42)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T4282notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T4282Notes");
            entity.Property(e => e.T43)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T4383notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T4383Notes");
            entity.Property(e => e.T44)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T4484notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T4484Notes");
            entity.Property(e => e.T45)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T4585notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T4585Notes");
            entity.Property(e => e.T46)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T46notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T46Notes");
            entity.Property(e => e.T47)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T47notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T47Notes");
            entity.Property(e => e.T48)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T48notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T48Notes");
            entity.Property(e => e.T51)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T52)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T53)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T54)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T55)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T61)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T6121notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T6121Notes");
            entity.Property(e => e.T62)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T6222notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T6222Notes");
            entity.Property(e => e.T63)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T6323notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T6323Notes");
            entity.Property(e => e.T64)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T6424notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T6424Notes");
            entity.Property(e => e.T65)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T6525notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T6525Notes");
            entity.Property(e => e.T71)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T7131notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T7131Notes");
            entity.Property(e => e.T72)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T7232notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T7232Notes");
            entity.Property(e => e.T73)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T7333notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T7333Notes");
            entity.Property(e => e.T74)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T7434notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T7434Notes");
            entity.Property(e => e.T75)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T7535notes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("T7535Notes");
            entity.Property(e => e.T81)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T82)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T83)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T84)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.T85)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientOtp>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("PK__PatientO__B4AB7FF91C1181ED");

            entity.ToTable("PatientOtp");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.LastCreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastWhatsappSendLogId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OtpCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.OtpCreatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientReceivableMonthlySummary>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PatientR__3214EC272FA9C706");

            entity.ToTable("PatientReceivableMonthlySummary");

            entity.HasIndex(e => e.Period, "_idx_Period");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DownPayment).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Period).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatientReceivableMonthlySummaryDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PK__PatientR__135C314D896FC096");

            entity.ToTable("PatientReceivableMonthlySummaryDetail");

            entity.HasIndex(e => e.Id, "_idx_id");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrbillingGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBillingGroup");
        });

        modelBuilder.Entity<PatientRelated>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.RelatedPatientId });

            entity.ToTable("PatientRelated");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RelatedPatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RelatedPatientID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientResearch>(entity =>
        {
            entity.HasKey(e => new { e.ResearchId, e.PatientId });

            entity.ToTable("PatientResearch");

            entity.Property(e => e.ResearchId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ResearchID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ResearchTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientScheduling>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.ServiceUnitId, e.ParamedicId, e.ScheduleDate, e.Srschedule });

            entity.ToTable("PatientScheduling");

            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ScheduleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Srschedule)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRSchedule");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PatientTransfer>(entity =>
        {
            entity.HasKey(e => e.TransferNo).IsClustered(false);

            entity.ToTable("PatientTransfer");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsApprove }, "IX_PatientTransfer_RegistrationNo_IsApprove");

            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.FromBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromBedID");
            entity.Property(e => e.FromChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromChargeClassID");
            entity.Property(e => e.FromClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromClassID");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.FromSpecialtyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromSpecialtyID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToBedID");
            entity.Property(e => e.ToChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToChargeClassID");
            entity.Property(e => e.ToClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToClassID");
            entity.Property(e => e.ToRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToRoomID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.ToSpecialtyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ToSpecialtyID");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.TransferDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TransferTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("")
                .IsFixedLength();
            entity.Property(e => e.ValidatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidatedByUserID");
            entity.Property(e => e.ValidatedDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.PatientTransfers)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefPatientTransferToRegistration");
        });

        modelBuilder.Entity<PatientTransferHistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.TransferNo });

            entity.ToTable("PatientTransferHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ArrivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DateOfEntry).HasColumnType("datetime");
            entity.Property(e => e.DateOfExit).HasColumnType("datetime");
            entity.Property(e => e.FromBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromBedID");
            entity.Property(e => e.FromChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromChargeClassID");
            entity.Property(e => e.FromClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromClassID");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedByUserID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SmfIdbefore)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfIDBefore");
            entity.Property(e => e.SrtransferredPatientWith)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTransferredPatientWith");
            entity.Property(e => e.TimeOfEntry)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TimeOfExit)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TransferredByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TransferredByUserID");
        });

        modelBuilder.Entity<PatientVisum>(entity =>
        {
            entity.HasKey(e => e.VisumId).HasName("PK__PatientV__370B2299235EE714");

            entity.ToTable("PatientVisum");

            entity.Property(e => e.VisumId).HasMaxLength(10);
            entity.Property(e => e.ApprovalBy).HasMaxLength(100);
            entity.Property(e => e.ApprovalCheckBy).HasMaxLength(100);
            entity.Property(e => e.ApprovalCheckDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.BornPlace).HasMaxLength(70);
            entity.Property(e => e.Checker).HasMaxLength(100);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Gender).HasMaxLength(50);
            entity.Property(e => e.GnrDateChecking).HasColumnType("datetime");
            entity.Property(e => e.GnrNsPol).HasMaxLength(30);
            entity.Property(e => e.GnrPol).HasMaxLength(100);
            entity.Property(e => e.IdCheker).HasMaxLength(50);
            entity.Property(e => e.Job).HasMaxLength(100);
            entity.Property(e => e.MedicalRecord).HasMaxLength(10);
            entity.Property(e => e.Nationality).HasMaxLength(50);
            entity.Property(e => e.PatientName).HasMaxLength(100);
            entity.Property(e => e.Religion).HasMaxLength(100);
            entity.Property(e => e.VisumNumber).HasMaxLength(30);
            entity.Property(e => e.VisumType).HasMaxLength(50);
        });

        modelBuilder.Entity<PatientVitalSignMonitoring>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.OrderNo })
                .HasName("PK_VitalSignMonitoringHd")
                .IsClustered(false);

            entity.ToTable("PatientVitalSignMonitoring");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.EndingDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.EndingTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.Interval)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.StartingDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.StartingTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
        });

        modelBuilder.Entity<PatientVitalSignMonitoringItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.OrderNo, e.VitalSignId })
                .HasName("PK_VitalSignMonitoringDt")
                .IsClustered(false);

            entity.ToTable("PatientVitalSignMonitoringItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.VitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VitalSignID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.PatientVitalSignMonitoring).WithMany(p => p.PatientVitalSignMonitoringItems)
                .HasForeignKey(d => new { d.RegistrationNo, d.OrderNo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefVitalSignMonitoringDtToVitalSignMonitoringHd");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => new { e.SrpaymentTypeId, e.SrpaymentMethodId });

            entity.ToTable("PaymentMethod");

            entity.Property(e => e.SrpaymentTypeId)
                .HasMaxLength(20)
                .HasColumnName("SRPaymentTypeID");
            entity.Property(e => e.SrpaymentMethodId)
                .HasMaxLength(20)
                .HasColumnName("SRPaymentMethodID");
            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethodName).HasMaxLength(100);
            entity.Property(e => e.SubledgerId).HasColumnName("SubledgerID");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.HasKey(e => e.SrpaymentTypeId);

            entity.ToTable("PaymentType");

            entity.Property(e => e.SrpaymentTypeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentTypeID");
            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.IsCashierFrontOffice)
                .HasDefaultValue(true)
                .HasColumnName("isCashierFrontOffice");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentTypeName).HasMaxLength(100);
            entity.Property(e => e.SubledgerId).HasColumnName("SubledgerID");
        });

        modelBuilder.Entity<PayrollPeriod>(entity =>
        {
            entity.ToTable("PayrollPeriod");

            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.IsMoslemThr).HasColumnName("IsMoslemTHR");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PayDate).HasColumnType("datetime");
            entity.Property(e => e.PayrollPeriodCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PayrollPeriodName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Sptmonth).HasColumnName("SPTMonth");
            entity.Property(e => e.Sptyear).HasColumnName("SPTYear");
            entity.Property(e => e.SrpaySequent)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaySequent");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.WageProcessTypeId).HasColumnName("WageProcessTypeID");
        });

        modelBuilder.Entity<PcareKunjungan>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("PCareKunjungan");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ErrorResponse)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.KdPoli)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.KunjunganPostData).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NoKartu)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NoKunjungan)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NoUrutPendaftaran)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PendaftaranPostData).IsUnicode(false);
        });

        modelBuilder.Entity<PcareKunjunganObat>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SequenceNo });

            entity.ToTable("PCareKunjunganObat");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ErrorResponse)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.KdObatSk).HasColumnName("KdObatSK");
            entity.Property(e => e.KdRacikan)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NoKunjungan)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PcareKunjunganTindakan>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo });

            entity.ToTable("PCareKunjunganTindakan");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ErrorResponse)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.KdTindakanSk).HasColumnName("KdTindakanSK");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NoKunjungan)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PcareReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("PCareReference");

            entity.Property(e => e.ReferenceId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PcareReferenceItem>(entity =>
        {
            entity.HasKey(e => new { e.ReferenceId, e.ItemId });

            entity.ToTable("PCareReferenceItem");

            entity.Property(e => e.ReferenceId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ResponseData).IsUnicode(false);
        });

        modelBuilder.Entity<PcareReferenceItemMapping>(entity =>
        {
            entity.HasKey(e => new { e.ReferenceId, e.MappingWithId });

            entity.ToTable("PCareReferenceItemMapping");

            entity.Property(e => e.ReferenceId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.MappingWithId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MappingWithID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PendolPrintJob>(entity =>
        {
            entity.HasKey(e => e.Sep).HasName("PK__PendolPr__CA1E3C89042907E1");

            entity.ToTable("PendolPrintJob");

            entity.HasIndex(e => new { e.IsPrinted, e.IpAddress, e.CreatedDate }, "IX_PendolPrintJob_IsPrinted_IpAddress_CreatedDate");

            entity.Property(e => e.Sep)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DataBarcode).HasMaxLength(4000);
            entity.Property(e => e.DataSep).HasMaxLength(4000);
            entity.Property(e => e.IpAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PensionTax>(entity =>
        {
            entity.ToTable("PensionTax");

            entity.Property(e => e.PensionTaxId).HasColumnName("PensionTaxID");
            entity.Property(e => e.AmountOfDeduction).HasColumnType("money");
            entity.Property(e => e.IsNpwp).HasColumnName("IsNPWP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LowerLimit).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TaxRate).HasColumnType("numeric(4, 2)");
            entity.Property(e => e.UpperLimit).HasColumnType("money");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<PerformancePlanActivity>(entity =>
        {
            entity.HasKey(e => e.ActivityId);

            entity.ToTable("PerformancePlanActivity");

            entity.HasIndex(e => new { e.PersonId, e.ActivityDate }, "IDX_PerformancePlanActivity_PersonID_ActivityDate").HasFillFactor(50);

            entity.Property(e => e.ActivityId).HasColumnName("ActivityID");
            entity.Property(e => e.Activity)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ActivityDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeletedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DeletedByUserID");
            entity.Property(e => e.DeletedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EffectiveTime).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RejectedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RejectedByUserID");
            entity.Property(e => e.RejectedDateTime).HasColumnType("datetime");
            entity.Property(e => e.SractivityCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRActivityCategory");
            entity.Property(e => e.StartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Volume).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.WorkPlanIndicators)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PerformancePlanAspectsOfBehavior>(entity =>
        {
            entity.HasKey(e => e.AspectsOfBehaviorId);

            entity.ToTable("PerformancePlanAspectsOfBehavior");

            entity.Property(e => e.AspectsOfBehaviorId).HasColumnName("AspectsOfBehaviorID");
            entity.Property(e => e.AspectsOfBehaviorCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AspectsOfBehaviorName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PerformancePlanAspectsOfBehaviorGrade>(entity =>
        {
            entity.HasKey(e => e.GradeId);

            entity.ToTable("PerformancePlanAspectsOfBehaviorGrade");

            entity.Property(e => e.GradeId).HasColumnName("GradeID");
            entity.Property(e => e.Categorization)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Explanation)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PerformancePlanAspectsOfBehaviorItem>(entity =>
        {
            entity.HasKey(e => e.AspectsOfBehaviorItemId);

            entity.ToTable("PerformancePlanAspectsOfBehaviorItem");

            entity.Property(e => e.AspectsOfBehaviorItemId)
                .ValueGeneratedNever()
                .HasColumnName("AspectsOfBehaviorItemID");
            entity.Property(e => e.AspectsOfBehaviorId).HasColumnName("AspectsOfBehaviorID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RatedAspectCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RatedAspectDescription)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RatedAspectName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PerformancePlanDocument>(entity =>
        {
            entity.ToTable("PerformancePlanDocument");

            entity.Property(e => e.PerformancePlanDocumentId).HasColumnName("PerformancePlanDocumentID");
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FileAttachName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.OriFileName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OriPath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.PerformancePlanType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SmallImage).HasColumnType("image");
            entity.Property(e => e.SrquarterPeriod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRQuarterPeriod");
        });

        modelBuilder.Entity<PerformancePlanJpt>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanId);

            entity.ToTable("PerformancePlanJpt");

            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
        });

        modelBuilder.Entity<PerformancePlanJptItem>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanItemId);

            entity.ToTable("PerformancePlanJptItem");

            entity.Property(e => e.PerformancePlanItemId).HasColumnName("PerformancePlanItemID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Measurement)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PerformanceIndicators)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.PerformancePlanNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Quarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrachievementFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAchievementFormula");
            entity.Property(e => e.SrperformancePlanDataSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPerformancePlanDataSource");
            entity.Property(e => e.SrperformancePlanIndicator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPerformancePlanIndicator");
            entity.Property(e => e.SrrealizationFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRealizationFormula");
            entity.Property(e => e.SrsectionPerspective)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSectionPerspective");
            entity.Property(e => e.Target)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.UnitTargets)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearTarget).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<PerformancePlanJptSchedule>(entity =>
        {
            entity.HasKey(e => e.YearPeriod);

            entity.ToTable("PerformancePlanJptSchedule");

            entity.Property(e => e.YearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenInputByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenInputByUserID");
            entity.Property(e => e.OpenInputDateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenRealizationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenRealizationQuarter1ByUserID");
            entity.Property(e => e.OpenRealizationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenRealizationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenRealizationQuarter2ByUserID");
            entity.Property(e => e.OpenRealizationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenRealizationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenRealizationQuarter3ByUserID");
            entity.Property(e => e.OpenRealizationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenRealizationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenRealizationQuarter4ByUserID");
            entity.Property(e => e.OpenRealizationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenValidationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenValidationQuarter1ByUserID");
            entity.Property(e => e.OpenValidationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenValidationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenValidationQuarter2ByUserID");
            entity.Property(e => e.OpenValidationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenValidationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenValidationQuarter3ByUserID");
            entity.Property(e => e.OpenValidationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenValidationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenValidationQuarter4ByUserID");
            entity.Property(e => e.OpenValidationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenVerificationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenVerificationQuarter1ByUserID");
            entity.Property(e => e.OpenVerificationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenVerificationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenVerificationQuarter2ByUserID");
            entity.Property(e => e.OpenVerificationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenVerificationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenVerificationQuarter3ByUserID");
            entity.Property(e => e.OpenVerificationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.OpenVerificationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OpenVerificationQuarter4ByUserID");
            entity.Property(e => e.OpenVerificationQuarter4DateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PerformancePlanJptTx>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanId);

            entity.ToTable("PerformancePlanJptTx");

            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.AchievementsYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Measurement)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PerformanceIndicators)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PerformancePlanNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Quarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationNotesQuarter1)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationNotesQuarter2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationNotesQuarter3)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationNotesQuarter4)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationQuarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter1ByUserID");
            entity.Property(e => e.RealizationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationQuarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter2ByUserID");
            entity.Property(e => e.RealizationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationQuarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter3ByUserID");
            entity.Property(e => e.RealizationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationQuarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter4ByUserID");
            entity.Property(e => e.RealizationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrachievementFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAchievementFormula");
            entity.Property(e => e.SrperformancePlanDataSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPerformancePlanDataSource");
            entity.Property(e => e.SrperformancePlanIndicator)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPerformancePlanIndicator");
            entity.Property(e => e.SrrealizationFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRealizationFormula");
            entity.Property(e => e.SrsectionPerspective)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSectionPerspective");
            entity.Property(e => e.Target)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.UnitTargets)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter1)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter3)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter4)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationQuarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter1ByUserID");
            entity.Property(e => e.ValidationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationQuarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter2ByUserID");
            entity.Property(e => e.ValidationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationQuarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter3ByUserID");
            entity.Property(e => e.ValidationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationQuarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter4ByUserID");
            entity.Property(e => e.ValidationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerificationNotesQuarter1)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNotesQuarter2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNotesQuarter3)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNotesQuarter4)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.VerificationQuarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerificationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerificationQuarter1ByUserID");
            entity.Property(e => e.VerificationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.VerificationQuarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerificationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerificationQuarter2ByUserID");
            entity.Property(e => e.VerificationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.VerificationQuarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerificationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerificationQuarter3ByUserID");
            entity.Property(e => e.VerificationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.VerificationQuarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerificationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerificationQuarter4ByUserID");
            entity.Property(e => e.VerificationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.VerificationYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.YearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.YearTarget).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<PerformancePlanNonJpt>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanId);

            entity.ToTable("PerformancePlanNonJpt");

            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EndMonth)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.StartMonth)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
        });

        modelBuilder.Entity<PerformancePlanNonJptItem>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanItemId);

            entity.ToTable("PerformancePlanNonJptItem");

            entity.Property(e => e.PerformancePlanItemId).HasColumnName("PerformancePlanItemID");
            entity.Property(e => e.Activity)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.PerformancePlanNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Quarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrachievementFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAchievementFormula");
            entity.Property(e => e.SrperformancePlanActivityType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPerformancePlanActivityType");
            entity.Property(e => e.SrrealizationFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRealizationFormula");
            entity.Property(e => e.UnitTargets)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearTarget).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<PerformancePlanNonJptTx>(entity =>
        {
            entity.HasKey(e => e.TxId);

            entity.ToTable("PerformancePlanNonJptTx");

            entity.Property(e => e.TxId).HasColumnName("TxID");
            entity.Property(e => e.ClosedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClosedByUserID");
            entity.Property(e => e.ClosedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.VerificationByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerificationByUserID");
            entity.Property(e => e.VerificationDateTime).HasColumnType("datetime");
            entity.Property(e => e.YearPeriod)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PerformancePlanNonJptTxItem>(entity =>
        {
            entity.HasKey(e => e.TxItemId);

            entity.ToTable("PerformancePlanNonJptTxItem");

            entity.Property(e => e.TxItemId).HasColumnName("TxItemID");
            entity.Property(e => e.AchievementsYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Activity)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PerformancePlanNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Quarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationNotesQuarter1)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationNotesQuarter2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationNotesQuarter3)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationNotesQuarter4)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RealizationQuarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter1ByUserID");
            entity.Property(e => e.RealizationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationQuarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter2ByUserID");
            entity.Property(e => e.RealizationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationQuarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter3ByUserID");
            entity.Property(e => e.RealizationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationQuarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RealizationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationQuarter4ByUserID");
            entity.Property(e => e.RealizationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RevisionQuarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RevisionQuarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RevisionQuarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RevisionQuarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RevisionYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrachievementFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAchievementFormula");
            entity.Property(e => e.SrperformancePlanActivityType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPerformancePlanActivityType");
            entity.Property(e => e.SrrealizationFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRealizationFormula");
            entity.Property(e => e.TxId).HasColumnName("TxID");
            entity.Property(e => e.UnitTargets)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter1)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter2)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter3)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationNotesQuarter4)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ValidationQuarter1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter1ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter1ByUserID");
            entity.Property(e => e.ValidationQuarter1DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationQuarter2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter2ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter2ByUserID");
            entity.Property(e => e.ValidationQuarter2DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationQuarter3).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter3ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter3ByUserID");
            entity.Property(e => e.ValidationQuarter3DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationQuarter4).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ValidationQuarter4ByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidationQuarter4ByUserID");
            entity.Property(e => e.ValidationQuarter4DateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidationYearTarget).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.YearTarget).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<PerformancePlanPppk>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanId);

            entity.ToTable("PerformancePlanPppk");

            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
        });

        modelBuilder.Entity<PerformancePlanPppkItem>(entity =>
        {
            entity.HasKey(e => e.PerformancePlanItemId);

            entity.ToTable("PerformancePlanPppkItem");

            entity.Property(e => e.PerformancePlanItemId).HasColumnName("PerformancePlanItemID");
            entity.Property(e => e.Activity)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Month01).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month02).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month03).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month04).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month05).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month06).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month07).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month08).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month09).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month10).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month11).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Month12).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PerformancePlanId).HasColumnName("PerformancePlanID");
            entity.Property(e => e.PerformancePlanNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SrachievementFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAchievementFormula");
            entity.Property(e => e.SrrealizationFormula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRealizationFormula");
            entity.Property(e => e.UnitTargets)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearTarget).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PermissionId).HasName("PKPermission");

            entity.ToTable("Permission");

            entity.Property(e => e.PermissionId).HasColumnName("PermissionID");
            entity.Property(e => e.Comment).HasMaxLength(1024);
            entity.Property(e => e.LoginSid)
                .HasMaxLength(85)
                .HasColumnName("LoginSID");
            entity.Property(e => e.Permission1).HasColumnName("Permission");
            entity.Property(e => e.WebAppPermission).HasDefaultValue(true);

            entity.HasMany(d => d.Sqlservers).WithMany(p => p.Permissions)
                .UsingEntity<Dictionary<string, object>>(
                    "PermissionServer",
                    r => r.HasOne<MonitoredSqlserver>().WithMany()
                        .HasForeignKey("SqlserverId")
                        .HasConstraintName("FKSPermissionServersMonitoredSQLServers"),
                    l => l.HasOne<Permission>().WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FKSPermissionServersPermission"),
                    j =>
                    {
                        j.HasKey("PermissionId", "SqlserverId").HasName("PKPermissionServers");
                        j.ToTable("PermissionServers");
                        j.IndexerProperty<int>("PermissionId").HasColumnName("PermissionID");
                        j.IndexerProperty<int>("SqlserverId").HasColumnName("SQLServerID");
                    });

            entity.HasMany(d => d.Tags).WithMany(p => p.Permissions)
                .UsingEntity<Dictionary<string, object>>(
                    "PermissionTag",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_PermissionTags_Tags"),
                    l => l.HasOne<Permission>().WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionTags_Permission"),
                    j =>
                    {
                        j.HasKey("PermissionId", "TagId");
                        j.ToTable("PermissionTags");
                    });
        });

        modelBuilder.Entity<PersonalAddress>(entity =>
        {
            entity.ToTable("PersonalAddress");

            entity.Property(e => e.PersonalAddressId).HasColumnName("PersonalAddressID");
            entity.Property(e => e.Address)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SraddressType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAddressType");
            entity.Property(e => e.Srcity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCity");
            entity.Property(e => e.Srstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRState");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonalContact>(entity =>
        {
            entity.ToTable("PersonalContact");

            entity.Property(e => e.PersonalContactId).HasColumnName("PersonalContactID");
            entity.Property(e => e.ContactValue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrcontactType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRContactType");
        });

        modelBuilder.Entity<PersonalDocument>(entity =>
        {
            entity.HasKey(e => e.PersonalDocumentId).IsClustered(false);

            entity.ToTable("PersonalDocument");

            entity.Property(e => e.PersonalDocumentId).HasColumnName("PersonalDocumentID");
            entity.Property(e => e.DocumentCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FileAttachName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OriFileName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OriPath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.RefferenceId).HasColumnName("RefferenceID");
            entity.Property(e => e.SmallImage).HasColumnType("image");
        });

        modelBuilder.Entity<PersonalEducationHistory>(entity =>
        {
            entity.ToTable("PersonalEducationHistory");

            entity.Property(e => e.PersonalEducationHistoryId).HasColumnName("PersonalEducationHistoryID");
            entity.Property(e => e.Achievement)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiplomaNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DiplomaVerificationNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EducationalAdjustmentDate).HasColumnType("datetime");
            entity.Property(e => e.EndYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gpa).HasColumnType("decimal(3, 2)");
            entity.Property(e => e.GraduateDate).HasColumnType("datetime");
            entity.Property(e => e.InstitutionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Majors)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.StartYear)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PersonalEmergencyContact>(entity =>
        {
            entity.ToTable("PersonalEmergencyContact");

            entity.Property(e => e.PersonalEmergencyContactId).HasColumnName("PersonalEmergencyContactID");
            entity.Property(e => e.Address)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Srcity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCity");
            entity.Property(e => e.SrfamilyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFamilyRelation");
            entity.Property(e => e.Srstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRState");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonalFamily>(entity =>
        {
            entity.HasKey(e => e.PersonalFamilyId).HasName("PersonalFamily_pk");

            entity.ToTable("PersonalFamily");

            entity.Property(e => e.PersonalFamilyId).HasColumnName("PersonalFamilyID");
            entity.Property(e => e.Address)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.BpjskesehatanNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPJSKesehatanNo");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CityOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateBirth).HasColumnType("datetime");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FamilyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Srcity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCity");
            entity.Property(e => e.SrcoverageType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCoverageType");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SrfamilyOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFamilyOccupation");
            entity.Property(e => e.SrfamilyRelation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFamilyRelation");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.Srstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRState");
            entity.Property(e => e.WeddingDate).HasColumnType("datetime");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonalIdentification>(entity =>
        {
            entity.ToTable("PersonalIdentification");

            entity.Property(e => e.PersonalIdentificationId).HasColumnName("PersonalIdentificationID");
            entity.Property(e => e.IdentificationName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.IdentificationValue)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PlaceOfIssue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SridentificationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIdentificationType");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<PersonalImage>(entity =>
        {
            entity.HasKey(e => e.PersonId);

            entity.ToTable("PersonalImage");

            entity.Property(e => e.PersonId)
                .ValueGeneratedNever()
                .HasColumnName("PersonID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Photo).HasColumnType("image");
        });

        modelBuilder.Entity<PersonalInfo>(entity =>
        {
            entity.HasKey(e => e.PersonId);

            entity.ToTable("PersonalInfo");

            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.BirthName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CoverageClass)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoverageClassBpjs)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CoverageClassBPJS");
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Picture)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PlaceBirth)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PostTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PreTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.Srethnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREthnic");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalutation");
        });

        modelBuilder.Entity<PersonalInfoGoogleForm>(entity =>
        {
            entity.HasKey(e => e.Timestamp);

            entity.ToTable("PersonalInfoGoogleForm");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
        });

        modelBuilder.Entity<PersonalLicence>(entity =>
        {
            entity.ToTable("PersonalLicence");

            entity.Property(e => e.PersonalLicenceId).HasColumnName("PersonalLicenceID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrlicenceType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLicenceType");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
            entity.Property(e => e.VerificationDate).HasColumnType("datetime");
            entity.Property(e => e.VerificationLetterNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonalOrganization>(entity =>
        {
            entity.ToTable("PersonalOrganization");

            entity.Property(e => e.PersonalOrganizationId).HasColumnName("PersonalOrganizationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrorganizationRole)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROrganizationRole");
            entity.Property(e => e.SrorganizationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROrganizationType");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<PersonalPhysical>(entity =>
        {
            entity.ToTable("PersonalPhysical");

            entity.Property(e => e.PersonalPhysicalId).HasColumnName("PersonalPhysicalID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhysicalValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmeasurementCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMeasurementCode");
            entity.Property(e => e.SrphysicalCharacteristic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicalCharacteristic");
        });

        modelBuilder.Entity<PersonalRecruitmentTest>(entity =>
        {
            entity.ToTable("PersonalRecruitmentTest");

            entity.Property(e => e.PersonalRecruitmentTestId).HasColumnName("PersonalRecruitmentTestID");
            entity.Property(e => e.Advantages)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Deficiency)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.SrrecruitmentTest)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRecruitmentTest");
            entity.Property(e => e.SrrecruitmentTestConclusion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRecruitmentTestConclusion");
            entity.Property(e => e.Suggestion)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.TestDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TestResult)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonalWorkExperience>(entity =>
        {
            entity.ToTable("PersonalWorkExperience");

            entity.Property(e => e.PersonalWorkExperienceId).HasColumnName("PersonalWorkExperienceID");
            entity.Property(e => e.Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Division)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EndYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.JobDesc)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastSalary).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.ReasonOfLeaving).HasColumnType("text");
            entity.Property(e => e.SrlineBisnis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLineBisnis");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StartYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.SupervisorName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PersonnelRequisition>(entity =>
        {
            entity.ToTable("PersonnelRequisition");

            entity.Property(e => e.PersonnelRequisitionId).HasColumnName("PersonnelRequisitionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiscellaneousSpec)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Reason)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RecruitmentPlanId).HasColumnName("RecruitmentPlanID");
            entity.Property(e => e.RequestedByPersonId).HasColumnName("RequestedByPersonID");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.SrpreferredSource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPreferredSource");
            entity.Property(e => e.SrrequestStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRequestStatus");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<PettyCash>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("PettyCash");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrpettyCashUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPettyCashUnitID");
            entity.Property(e => e.TotalCreditAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TotalDebitAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PettyCashItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo });

            entity.ToTable("PettyCashItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Credit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Debit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pio>(entity =>
        {
            entity.HasKey(e => e.PioNo);

            entity.ToTable("Pio");

            entity.Property(e => e.PioNo).ValueGeneratedNever();
            entity.Property(e => e.AnswerDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Information)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OtherCategory)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.OtherSources)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PioDateTime).HasColumnType("datetime");
            entity.Property(e => e.Question)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.QuestionerName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SranswerMethod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRAnswerMethod");
            entity.Property(e => e.SrdurationType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRDurationType");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrquestionMethod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRQuestionMethod");
        });

        modelBuilder.Entity<PioCategoryLine>(entity =>
        {
            entity.HasKey(e => new { e.PioNo, e.SrpioCategory });

            entity.ToTable("PioCategoryLine");

            entity.Property(e => e.SrpioCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRPioCategory");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PioSourceLine>(entity =>
        {
            entity.HasKey(e => new { e.PioNo, e.SrpioSource });

            entity.ToTable("PioSourceLine");

            entity.Property(e => e.SrpioSource)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRPioSource");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Pkp>(entity =>
        {
            entity.ToTable("Pkp");

            entity.Property(e => e.PkpId).HasColumnName("PkpID");
            entity.Property(e => e.AmountOfDeduction).HasColumnType("money");
            entity.Property(e => e.IsNpwp).HasColumnName("IsNPWP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LowerLimit).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TaxRate).HasColumnType("numeric(4, 2)");
            entity.Property(e => e.UpperLimit).HasColumnType("money");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<PoliklinikQueList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PoliklinikQueList");

            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.ToTable("Position");

            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.GeneralQualification)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionLevelId).HasColumnName("PositionLevelID");
            entity.Property(e => e.PositionName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Summary)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<PositionBenchmark>(entity =>
        {
            entity.ToTable("PositionBenchmark");

            entity.Property(e => e.PositionBenchmarkId).HasColumnName("PositionBenchmarkID");
            entity.Property(e => e.BenchmarkName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
        });

        modelBuilder.Entity<PositionDuty>(entity =>
        {
            entity.ToTable("PositionDuty");

            entity.Property(e => e.PositionDutyId).HasColumnName("PositionDutyID");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DutyName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
        });

        modelBuilder.Entity<PositionEducation>(entity =>
        {
            entity.ToTable("PositionEducation");

            entity.Property(e => e.PositionEducationId).HasColumnName("PositionEducationID");
            entity.Property(e => e.EducationNotes)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SreducationField)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationField");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.Srrequirement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRequirement");
        });

        modelBuilder.Entity<PositionEmploymentCompany>(entity =>
        {
            entity.ToTable("PositionEmploymentCompany");

            entity.Property(e => e.PositionEmploymentCompanyId).HasColumnName("PositionEmploymentCompanyID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.Srrequirement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRequirement");
        });

        modelBuilder.Entity<PositionFunctionalArea>(entity =>
        {
            entity.ToTable("PositionFunctionalArea");

            entity.Property(e => e.PositionFunctionalAreaId).HasColumnName("PositionFunctionalAreaID");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SrpositionFunctionalArea)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPositionFunctionalArea");
        });

        modelBuilder.Entity<PositionGoal>(entity =>
        {
            entity.ToTable("PositionGoal");

            entity.Property(e => e.PositionGoalId).HasColumnName("PositionGoalID");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.GoalName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
        });

        modelBuilder.Entity<PositionGrade>(entity =>
        {
            entity.HasKey(e => e.PositionGradeId).HasName("PK_PositionGrade1");

            entity.ToTable("PositionGrade");

            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.Interval)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LowerLimit).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PositionGradeCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PositionGradeName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.UpperLimit).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<PositionLevel>(entity =>
        {
            entity.ToTable("PositionLevel");

            entity.Property(e => e.PositionLevelId).HasColumnName("PositionLevelID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionLevelCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PositionLevelName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PositionLicense>(entity =>
        {
            entity.ToTable("PositionLicense");

            entity.Property(e => e.PositionLicenseId).HasColumnName("PositionLicenseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LicenseNotes)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SrlicenseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLicenseType");
            entity.Property(e => e.Srrequirement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRequirement");
        });

        modelBuilder.Entity<PositionPersonal>(entity =>
        {
            entity.ToTable("PositionPersonal");

            entity.Property(e => e.PositionPersonalId).HasColumnName("PositionPersonalID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
        });

        modelBuilder.Entity<PositionPhysical>(entity =>
        {
            entity.ToTable("PositionPhysical");

            entity.Property(e => e.PositionPhysicalId).HasColumnName("PositionPhysicalID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PhysicalValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SrmeasurementCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMeasurementCode");
            entity.Property(e => e.SroperandType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROperandType");
            entity.Property(e => e.SrphysicalCharacteristic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPhysicalCharacteristic");
        });

        modelBuilder.Entity<PositionPsychological>(entity =>
        {
            entity.ToTable("PositionPsychological");

            entity.Property(e => e.PositionPsychologicalId).HasColumnName("PositionPsychologicalID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.PsychologicalValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SroperandType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROperandType");
            entity.Property(e => e.Srpsychological)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPsychological");
        });

        modelBuilder.Entity<PositionRanking>(entity =>
        {
            entity.ToTable("PositionRanking");

            entity.Property(e => e.PositionRankingId).HasColumnName("PositionRankingID");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.RankingName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PositionResponsibility>(entity =>
        {
            entity.ToTable("PositionResponsibility");

            entity.Property(e => e.PositionResponsibilityId).HasColumnName("PositionResponsibilityID");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.ResponsibilityName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PositionWorkExperience>(entity =>
        {
            entity.ToTable("PositionWorkExperience");

            entity.Property(e => e.PositionWorkExperienceId).HasColumnName("PositionWorkExperienceID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SrlineBusiness)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLineBusiness");
            entity.Property(e => e.Srrequirement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRequirement");
            entity.Property(e => e.WorkExperienceNotes)
                .HasMaxLength(400)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PostingStatus>(entity =>
        {
            entity.HasKey(e => e.PostingId);

            entity.ToTable("PostingStatus");

            entity.Property(e => e.ConsolidationJournalId).HasColumnName("ConsolidationJournalID");
            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.IsFiscalYear)
                .HasDefaultValue(false)
                .HasColumnName("isFiscalYear");
            entity.Property(e => e.IsUncompleteAppr)
                .HasDefaultValue(false)
                .HasColumnName("isUncompleteAppr");
            entity.Property(e => e.JournalGroupId).HasColumnName("JournalGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PphProgressiveTax>(entity =>
        {
            entity.HasKey(e => e.CounterId);

            entity.ToTable("PphProgressiveTax");

            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.MinAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Percentage).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<PpiAntimicrobialApplication>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SrtherapyGroup, e.TherapyId });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrtherapyGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTherapyGroup");
            entity.Property(e => e.TherapyId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TherapyID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrantimicrobialApplicationTiming)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAntimicrobialApplicationTiming");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PpiDiseaseFactor>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Gds)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Led)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Leukocyte)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OtherDiseaseFactors)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RadiologyResult).IsUnicode(false);
            entity.Property(e => e.SrdiseaseFactorsAntiHcv)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiseaseFactorsAntiHcv");
            entity.Property(e => e.SrdiseaseFactorsAntiHiv)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiseaseFactorsAntiHiv");
            entity.Property(e => e.SrdiseaseFactorsHbsAg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiseaseFactorsHbsAg");
        });

        modelBuilder.Entity<PpiInfection>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SrinfectionType });

            entity.ToTable("PpiInfection");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrinfectionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInfectionType");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Cultures)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PpiNeedlePunctured>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("PpiNeedlePunctured");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CausePunctured)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Chronology)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DatePunctured).HasColumnType("datetime");
            entity.Property(e => e.Diagnose)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FollowUp)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpBy)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpDate).HasColumnType("datetime");
            entity.Property(e => e.KnownBy)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OfficerImunizationHistory)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OfficerName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PatientImunizationHistory)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PatientName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PuncturedAreas)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PpiProcedureSurveillance>(entity =>
        {
            entity.HasKey(e => e.BookingNo);

            entity.ToTable("PpiProcedureSurveillance");

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Culturs)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrasaScore)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAsaScore");
            entity.Property(e => e.SrprocedureClassification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureClassification");
            entity.Property(e => e.SrriskCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskCategory");
            entity.Property(e => e.Srttime)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTTime");
            entity.Property(e => e.SrtypesOfSurgery)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTypesOfSurgery");
            entity.Property(e => e.SrwoundClassification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWoundClassification");
        });

        modelBuilder.Entity<PpiProcedureSurveillanceUseOfAntibiotic>(entity =>
        {
            entity.HasKey(e => new { e.BookingNo, e.ItemId, e.StartDate });

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PpiRiskFactor>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateOfFinalInstallation).HasColumnType("datetime");
            entity.Property(e => e.DateOfInitialInstallation).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RiskFactorsId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RiskFactorsID");
            entity.Property(e => e.SrriskFactorsLocation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskFactorsLocation");
            entity.Property(e => e.SrriskFactorsType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskFactorsType");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PpiRiskFactorsItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo, e.DateOfInfection, e.SrsignsOfInfection });

            entity.ToTable("PpiRiskFactorsItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DateOfInfection).HasColumnType("datetime");
            entity.Property(e => e.SrsignsOfInfection)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSignsOfInfection");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PredictiveForecast>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.Metric, e.Severity, e.Timeframe });

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.Accuracy).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Expiration).HasColumnType("datetime");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.PredictiveForecasts)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKPredictiveForecastsServerID");
        });

        modelBuilder.Entity<PredictiveModel>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.Metric, e.Severity, e.Timeframe });

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.Model).HasColumnType("image");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.PredictiveModels)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKPredictiveModelsServerID");
        });

        modelBuilder.Entity<PrescriptionQueueDisplay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PrescriptionQueueDisplay");

            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<PrescriptionQueueDisplayByCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PrescriptionQueueDisplayByCode");

            entity.Property(e => e.Code)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<PrescriptionReview>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SrprescReview });

            entity.ToTable("PrescriptionReview");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrprescReview)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRPrescReview");
            entity.Property(e => e.Information)
                .HasMaxLength(800)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PrescriptiveAnalysis>(entity =>
        {
            entity.HasKey(e => e.AnalysisId);

            entity.ToTable("PrescriptiveAnalysis");

            entity.Property(e => e.AnalysisId).HasColumnName("AnalysisID");
            entity.Property(e => e.AnalysisTypeId).HasColumnName("AnalysisTypeID");
            entity.Property(e => e.RecordCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.RecordUpdateDateTimestamp).HasColumnType("datetime");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtcanalysisCompleteTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCAnalysisCompleteTime");
            entity.Property(e => e.UtcanalysisStartTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCAnalysisStartTime");

            entity.HasOne(d => d.AnalysisType).WithMany(p => p.PrescriptiveAnalyses)
                .HasForeignKey(d => d.AnalysisTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescriptiveAnalysis_PrescriptiveAnalysisType");
        });

        modelBuilder.Entity<PrescriptiveAnalysisDetail>(entity =>
        {
            entity.HasKey(e => e.PrescriptiveAnalysisDetailsId);

            entity.Property(e => e.PrescriptiveAnalysisDetailsId).HasColumnName("PrescriptiveAnalysisDetailsID");
            entity.Property(e => e.AnalysisId).HasColumnName("AnalysisID");
            entity.Property(e => e.AnalyzerId).HasColumnName("AnalyzerID");
            entity.Property(e => e.RecordCreatedTimestamp).HasColumnType("datetime");
            entity.Property(e => e.RecordUpdateDateTimestamp).HasColumnType("datetime");

            entity.HasOne(d => d.Analysis).WithMany(p => p.PrescriptiveAnalysisDetails)
                .HasForeignKey(d => d.AnalysisId)
                .HasConstraintName("FK_PrescriptiveAnalysisDetails_PrescriptiveAnalysis");

            entity.HasOne(d => d.Analyzer).WithMany(p => p.PrescriptiveAnalysisDetails)
                .HasForeignKey(d => d.AnalyzerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescriptiveAnalysisDetails_PrescriptiveAnalyzer");
        });

        modelBuilder.Entity<PrescriptiveAnalysisRecommendation>(entity =>
        {
            entity.ToTable("PrescriptiveAnalysisRecommendation");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.OptimizationStatusId).HasColumnName("OptimizationStatusID");
            entity.Property(e => e.PrescriptiveAnalysisDetailsId).HasColumnName("PrescriptiveAnalysisDetailsID");
            entity.Property(e => e.RecommendationId)
                .HasMaxLength(10)
                .HasColumnName("RecommendationID");

            entity.HasOne(d => d.OptimizationStatus).WithMany(p => p.PrescriptiveAnalysisRecommendations)
                .HasForeignKey(d => d.OptimizationStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OptimizationID");

            entity.HasOne(d => d.PrescriptiveAnalysisDetails).WithMany(p => p.PrescriptiveAnalysisRecommendations)
                .HasForeignKey(d => d.PrescriptiveAnalysisDetailsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PrescriptiveAnalysisRecommendation_PrescriptiveRecommendation");

            entity.HasOne(d => d.Recommendation).WithMany(p => p.PrescriptiveAnalysisRecommendations)
                .HasForeignKey(d => d.RecommendationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescriptiveAnalysisRecommendation_PrescriptiveRecommendation1");
        });

        modelBuilder.Entity<PrescriptiveAnalysisRecommendationProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_PrescriptiveAnalysisRecommendationPropertyID");

            entity.ToTable("PrescriptiveAnalysisRecommendationProperty");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AnalysisRecommendationId).HasColumnName("AnalysisRecommendationID");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");

            entity.HasOne(d => d.AnalysisRecommendation).WithMany(p => p.PrescriptiveAnalysisRecommendationProperties)
                .HasForeignKey(d => d.AnalysisRecommendationId)
                .HasConstraintName("fk_PrescriptiveAnalysisRecommendationID");

            entity.HasOne(d => d.Property).WithMany(p => p.PrescriptiveAnalysisRecommendationProperties)
                .HasForeignKey(d => d.PropertyId)
                .HasConstraintName("fk_PrescriptiveRecommendationPropertyID");
        });

        modelBuilder.Entity<PrescriptiveAnalysisSnapshotValuesPreviou>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.MonitoredServerId).HasColumnName("MonitoredServerID");
            entity.Property(e => e.ProductVersion).HasMaxLength(100);
            entity.Property(e => e.SqlversionString)
                .HasMaxLength(100)
                .HasColumnName("SQLVersionString");
            entity.Property(e => e.WindowsVersion).HasMaxLength(100);
        });

        modelBuilder.Entity<PrescriptiveAnalysisType>(entity =>
        {
            entity.HasKey(e => e.AnalysisTypeId);

            entity.ToTable("PrescriptiveAnalysisType");

            entity.Property(e => e.AnalysisTypeId)
                .ValueGeneratedNever()
                .HasColumnName("AnalysisTypeID");
            entity.Property(e => e.AnalysisType).HasMaxLength(100);
        });

        modelBuilder.Entity<PrescriptiveAnalyzer>(entity =>
        {
            entity.ToTable("PrescriptiveAnalyzer");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.AnalyzerCategoryId).HasColumnName("AnalyzerCategoryID");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.AnalyzerCategory).WithMany(p => p.PrescriptiveAnalyzers)
                .HasForeignKey(d => d.AnalyzerCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescriptiveAnalyzer_PrescriptiveAnalyzerCategory");
        });

        modelBuilder.Entity<PrescriptiveAnalyzerCategory>(entity =>
        {
            entity.ToTable("PrescriptiveAnalyzerCategory");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Category)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PrescriptiveOptimiztionExecutionStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_PrescriptiveOptimiztionExecutionStatusID");

            entity.ToTable("PrescriptiveOptimiztionExecutionStatus");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Status).HasMaxLength(100);
        });

        modelBuilder.Entity<PrescriptiveRecommendation>(entity =>
        {
            entity.HasKey(e => e.RecommendationId).HasName("PK_PrescripivetRecommendation");

            entity.ToTable("PrescriptiveRecommendation");

            entity.Property(e => e.RecommendationId)
                .HasMaxLength(10)
                .HasColumnName("RecommendationID");
            entity.Property(e => e.AdditionalConsiderations).HasMaxLength(1500);
            entity.Property(e => e.Bitly)
                .HasMaxLength(500)
                .HasColumnName("bitly");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.Finding).HasMaxLength(500);
            entity.Property(e => e.ImpactExplanation).HasMaxLength(4000);
            entity.Property(e => e.InfoLinks).HasMaxLength(4000);
            entity.Property(e => e.PluralFormFinding).HasMaxLength(500);
            entity.Property(e => e.PluralFormImpactExplanation).HasMaxLength(4000);
            entity.Property(e => e.PluralFormRecommendation).HasMaxLength(4000);
            entity.Property(e => e.ProblemExplanation).HasMaxLength(4000);
            entity.Property(e => e.Tags).HasMaxLength(500);

            entity.HasOne(d => d.Category).WithMany(p => p.PrescriptiveRecommendations)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrescriptiveRecommendation_PrescriptiveRecommendationCategory");
        });

        modelBuilder.Entity<PrescriptiveRecommendationCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.ToTable("PrescriptiveRecommendationCategory");

            entity.Property(e => e.CategoryId)
                .ValueGeneratedNever()
                .HasColumnName("CategoryID");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<PrescriptiveRecommendationProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pk_PrescriptiveRecommendationPropertyID");

            entity.ToTable("PrescriptiveRecommendationProperty");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.PropertyName).HasMaxLength(200);
            entity.Property(e => e.RecommendationId)
                .HasMaxLength(10)
                .HasColumnName("RecommendationID");

            entity.HasOne(d => d.Recommendation).WithMany(p => p.PrescriptiveRecommendationProperties)
                .HasForeignKey(d => d.RecommendationId)
                .HasConstraintName("fk_PrescriptiveRecommendationPropertyRecommendation");
        });

        modelBuilder.Entity<PrintJob>(entity =>
        {
            entity.HasKey(e => e.PrintNo).HasName("PK_PrintManager");

            entity.ToTable("PrintJob", tb => tb.HasTrigger("PrintJob_RegistrationRpt"));

            entity.Property(e => e.PrintNo).ValueGeneratedNever();
            entity.Property(e => e.ApplicationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.PrintDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrinterId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PrinterID");
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.UserHostName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ZplCommand).IsUnicode(false);
        });

        modelBuilder.Entity<PrintJobLog>(entity =>
        {
            entity.HasKey(e => e.PrintNo).HasName("PK_PrintManagerLog");

            entity.ToTable("PrintJobLog");

            entity.Property(e => e.PrintNo).ValueGeneratedNever();
            entity.Property(e => e.ApplicationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.FailedMessage)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PrintDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrinterId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PrinterID");
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.UserHostName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ZplCommand).IsUnicode(false);
        });

        modelBuilder.Entity<PrintJobParameter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PrintJobParameter", tb => tb.HasTrigger("PrintJobParameter_tri"));

            entity.HasIndex(e => e.PrintNo, "_idx_printno");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValueDateTime).HasColumnType("datetime");
            entity.Property(e => e.ValueNumeric).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ValueString)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PrintJobParameterLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PrintJobParameterLog");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ValueDateTime).HasColumnType("datetime");
            entity.Property(e => e.ValueNumeric).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ValueString)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PrintSlipLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK_PrintSlipLog_1");

            entity.ToTable("PrintSlipLog");

            entity.HasIndex(e => new { e.ProgramId, e.ParameterName, e.ParameterValue }, "IDX_PrintSlipLog_ProgramID_ParameterName_ParameterValue");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParameterName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParameterValue)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
        });

        modelBuilder.Entity<Printer>(entity =>
        {
            entity.ToTable("Printer");

            entity.Property(e => e.PrinterId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PrinterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PrinterLocationHost)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PrinterManagerHost)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PrinterName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PrmrjFollowUp>(entity =>
        {
            entity.HasKey(e => e.RegistrationInfoMedicId);

            entity.ToTable("PrmrjFollowUp");

            entity.Property(e => e.RegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoMedicID");
            entity.Property(e => e.ImportantClinicalNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Planning)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Procedure>(entity =>
        {
            entity.ToTable("Procedure");

            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProcedureInaGroupper>(entity =>
        {
            entity.HasKey(e => e.ProcedureId);

            entity.ToTable("ProcedureInaGroupper");

            entity.Property(e => e.ProcedureId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductAccount>(entity =>
        {
            entity.ToTable("ProductAccount");

            entity.Property(e => e.ProductAccountId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProductAccountID");
            entity.Property(e => e.ChartOfAccountIdAcrualIgd).HasColumnName("ChartOfAccountIdAcrualIGD");
            entity.Property(e => e.ChartOfAccountIdAcrualIp).HasColumnName("ChartOfAccountIdAcrualIP");
            entity.Property(e => e.ChartOfAccountIdCogs).HasColumnName("ChartOfAccountIdCOGS");
            entity.Property(e => e.ChartOfAccountIdCogsigd).HasColumnName("ChartOfAccountIdCOGSIGD");
            entity.Property(e => e.ChartOfAccountIdCogsigdtemp).HasColumnName("ChartOfAccountIdCOGSIGDTemp");
            entity.Property(e => e.ChartOfAccountIdCogsip).HasColumnName("ChartOfAccountIdCOGSIP");
            entity.Property(e => e.ChartOfAccountIdCogsiptemp).HasColumnName("ChartOfAccountIdCOGSIPTemp");
            entity.Property(e => e.ChartOfAccountIdCogsoptemp).HasColumnName("ChartOfAccountIdCOGSOPTemp");
            entity.Property(e => e.ChartOfAccountIdCostIgd).HasColumnName("ChartOfAccountIdCostIGD");
            entity.Property(e => e.ChartOfAccountIdCostIp).HasColumnName("ChartOfAccountIdCostIP");
            entity.Property(e => e.ChartOfAccountIdDiscountIgd).HasColumnName("ChartOfAccountIdDiscountIGD");
            entity.Property(e => e.ChartOfAccountIdDiscountIp).HasColumnName("ChartOfAccountIdDiscountIP");
            entity.Property(e => e.ChartOfAccountIdIncomeIgd).HasColumnName("ChartOfAccountIdIncomeIGD");
            entity.Property(e => e.ChartOfAccountIdIncomeIp).HasColumnName("ChartOfAccountIdIncomeIP");
            entity.Property(e => e.ChartOfAccountIdInventoryIgd).HasColumnName("ChartOfAccountIdInventoryIGD");
            entity.Property(e => e.ChartOfAccountIdInventoryIp).HasColumnName("ChartOfAccountIdInventoryIP");
            entity.Property(e => e.ChartOfAccountIdPurchaseReturnIgd).HasColumnName("ChartOfAccountIdPurchaseReturnIGD");
            entity.Property(e => e.ChartOfAccountIdPurchaseReturnIp).HasColumnName("ChartOfAccountIdPurchaseReturnIP");
            entity.Property(e => e.ChartOfAccountIdSalesReturnIgd).HasColumnName("ChartOfAccountIdSalesReturnIGD");
            entity.Property(e => e.ChartOfAccountIdSalesReturnIp).HasColumnName("ChartOfAccountIdSalesReturnIP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProductAccountName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SubledgerIdAcrualIgd).HasColumnName("SubledgerIdAcrualIGD");
            entity.Property(e => e.SubledgerIdAcrualIp).HasColumnName("SubledgerIdAcrualIP");
            entity.Property(e => e.SubledgerIdCogs).HasColumnName("SubledgerIdCOGS");
            entity.Property(e => e.SubledgerIdCogsigd).HasColumnName("SubledgerIdCOGSIGD");
            entity.Property(e => e.SubledgerIdCogsigdtemp).HasColumnName("SubledgerIdCOGSIGDTemp");
            entity.Property(e => e.SubledgerIdCogsip).HasColumnName("SubledgerIdCOGSIP");
            entity.Property(e => e.SubledgerIdCogsiptemp).HasColumnName("SubledgerIdCOGSIPTemp");
            entity.Property(e => e.SubledgerIdCogsoptemp).HasColumnName("SubledgerIdCOGSOPTemp");
            entity.Property(e => e.SubledgerIdCostIgd).HasColumnName("SubledgerIdCostIGD");
            entity.Property(e => e.SubledgerIdCostIp).HasColumnName("SubledgerIdCostIP");
            entity.Property(e => e.SubledgerIdDiscountIgd).HasColumnName("SubledgerIdDiscountIGD");
            entity.Property(e => e.SubledgerIdDiscountIp).HasColumnName("SubledgerIdDiscountIP");
            entity.Property(e => e.SubledgerIdIncomeIgd).HasColumnName("SubledgerIdIncomeIGD");
            entity.Property(e => e.SubledgerIdIncomeIp).HasColumnName("SubledgerIdIncomeIP");
            entity.Property(e => e.SubledgerIdInventoryIgd).HasColumnName("SubledgerIdInventoryIGD");
            entity.Property(e => e.SubledgerIdInventoryIp).HasColumnName("SubledgerIdInventoryIP");
            entity.Property(e => e.SubledgerIdPurchaseReturnIgd).HasColumnName("SubledgerIdPurchaseReturnIGD");
            entity.Property(e => e.SubledgerIdPurchaseReturnIp).HasColumnName("SubledgerIdPurchaseReturnIP");
            entity.Property(e => e.SubledgerIdSalesReturnIgd).HasColumnName("SubledgerIdSalesReturnIGD");
            entity.Property(e => e.SubledgerIdSalesReturnIp).HasColumnName("SubledgerIdSalesReturnIP");
        });

        modelBuilder.Entity<ProductAccountGuarantorGroup>(entity =>
        {
            entity.HasKey(e => new { e.ProductAccountId, e.SrguarantorIncomeGroup }).HasName("PK__ProductA__48662C44EC70AFED");

            entity.ToTable("ProductAccountGuarantorGroup");

            entity.Property(e => e.ProductAccountId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProductAccountID");
            entity.Property(e => e.SrguarantorIncomeGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorIncomeGroup");
            entity.Property(e => e.ChartOfAccountIdAcrualIgd).HasColumnName("ChartOfAccountIdAcrualIGD");
            entity.Property(e => e.ChartOfAccountIdAcrualIp).HasColumnName("ChartOfAccountIdAcrualIP");
            entity.Property(e => e.ChartOfAccountIdCogs).HasColumnName("ChartOfAccountIdCOGS");
            entity.Property(e => e.ChartOfAccountIdCogsigd).HasColumnName("ChartOfAccountIdCOGSIGD");
            entity.Property(e => e.ChartOfAccountIdCogsigdtemp).HasColumnName("ChartOfAccountIdCOGSIGDTemp");
            entity.Property(e => e.ChartOfAccountIdCogsip).HasColumnName("ChartOfAccountIdCOGSIP");
            entity.Property(e => e.ChartOfAccountIdCogsiptemp).HasColumnName("ChartOfAccountIdCOGSIPTemp");
            entity.Property(e => e.ChartOfAccountIdCogsoptemp).HasColumnName("ChartOfAccountIdCOGSOPTemp");
            entity.Property(e => e.ChartOfAccountIdDiscountIgd).HasColumnName("ChartOfAccountIdDiscountIGD");
            entity.Property(e => e.ChartOfAccountIdDiscountIp).HasColumnName("ChartOfAccountIdDiscountIP");
            entity.Property(e => e.ChartOfAccountIdIncomeIgd).HasColumnName("ChartOfAccountIdIncomeIGD");
            entity.Property(e => e.ChartOfAccountIdIncomeIp).HasColumnName("ChartOfAccountIdIncomeIP");
            entity.Property(e => e.ChartOfAccountIdInventoryIgd).HasColumnName("ChartOfAccountIdInventoryIGD");
            entity.Property(e => e.ChartOfAccountIdInventoryIp).HasColumnName("ChartOfAccountIdInventoryIP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SubledgerIdAcrualIgd).HasColumnName("SubledgerIdAcrualIGD");
            entity.Property(e => e.SubledgerIdAcrualIp).HasColumnName("SubledgerIdAcrualIP");
            entity.Property(e => e.SubledgerIdCogs).HasColumnName("SubledgerIdCOGS");
            entity.Property(e => e.SubledgerIdCogsigd).HasColumnName("SubledgerIdCOGSIGD");
            entity.Property(e => e.SubledgerIdCogsigdtemp).HasColumnName("SubledgerIdCOGSIGDTemp");
            entity.Property(e => e.SubledgerIdCogsip).HasColumnName("SubledgerIdCOGSIP");
            entity.Property(e => e.SubledgerIdCogsiptemp).HasColumnName("SubledgerIdCOGSIPTemp");
            entity.Property(e => e.SubledgerIdCogsoptemp).HasColumnName("SubledgerIdCOGSOPTemp");
            entity.Property(e => e.SubledgerIdDiscountIgd).HasColumnName("SubledgerIdDiscountIGD");
            entity.Property(e => e.SubledgerIdDiscountIp).HasColumnName("SubledgerIdDiscountIP");
            entity.Property(e => e.SubledgerIdIncomeIgd).HasColumnName("SubledgerIdIncomeIGD");
            entity.Property(e => e.SubledgerIdIncomeIp).HasColumnName("SubledgerIdIncomeIP");
            entity.Property(e => e.SubledgerIdInventoryIgd).HasColumnName("SubledgerIdInventoryIGD");
            entity.Property(e => e.SubledgerIdInventoryIp).HasColumnName("SubledgerIdInventoryIP");
        });

        modelBuilder.Entity<ProductionFormula>(entity =>
        {
            entity.HasKey(e => e.FormulaId);

            entity.ToTable("ProductionFormula");

            entity.Property(e => e.FormulaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FormulaID");
            entity.Property(e => e.CostAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FormulaName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ProductionFormulaItem>(entity =>
        {
            entity.HasKey(e => new { e.FormulaId, e.ItemId });

            entity.ToTable("ProductionFormulaItem");

            entity.Property(e => e.FormulaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FormulaID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 4)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ProductionFormulaOtherItem>(entity =>
        {
            entity.HasKey(e => new { e.FormulaId, e.ItemId });

            entity.ToTable("ProductionFormulaOtherItem");

            entity.Property(e => e.FormulaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FormulaID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ProductionOfGood>(entity =>
        {
            entity.HasKey(e => e.ProductionNo);

            entity.Property(e => e.ProductionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CostAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.FormulaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FormulaID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ProductionDate).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductionOfGoodsItem>(entity =>
        {
            entity.HasKey(e => new { e.ProductionNo, e.ItemId });

            entity.ToTable("ProductionOfGoodsItem");

            entity.Property(e => e.ProductionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<Ptkp>(entity =>
        {
            entity.HasKey(e => e.PtkpId).HasName("PK_PTKP");

            entity.ToTable("Ptkp");

            entity.Property(e => e.PtkpId).HasColumnName("PtkpID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrtaxStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTaxStatus");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<Qty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QTY");

            entity.Property(e => e.AcuanIdi)
                .HasMaxLength(255)
                .HasColumnName("acuan_idi");
            entity.Property(e => e.Bulan)
                .HasMaxLength(255)
                .HasColumnName("bulan");
            entity.Property(e => e.Icd10)
                .HasMaxLength(255)
                .HasColumnName("icd_10");
            entity.Property(e => e.Icd9Cm)
                .HasMaxLength(255)
                .HasColumnName("icd_9_cm");
            entity.Property(e => e.IdDokter)
                .HasMaxLength(255)
                .HasColumnName("id_dokter");
            entity.Property(e => e.Jaminan)
                .HasMaxLength(255)
                .HasColumnName("jaminan");
            entity.Property(e => e.JasaId)
                .HasMaxLength(255)
                .HasColumnName("jasa_id");
            entity.Property(e => e.JenisLayanan)
                .HasMaxLength(255)
                .HasColumnName("jenis_layanan");
            entity.Property(e => e.KodeLayanan)
                .HasMaxLength(255)
                .HasColumnName("kode_layanan");
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(255)
                .HasColumnName("nama_dokter");
            entity.Property(e => e.NamaLayanan)
                .HasMaxLength(255)
                .HasColumnName("nama_layanan");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .HasColumnName("nama_pasien");
            entity.Property(e => e.NamaTindakanIdi)
                .HasMaxLength(255)
                .HasColumnName("nama_tindakan_idi");
            entity.Property(e => e.No)
                .HasMaxLength(255)
                .HasColumnName("no");
            entity.Property(e => e.NoRm)
                .HasMaxLength(255)
                .HasColumnName("no_rm");
            entity.Property(e => e.OrderId)
                .HasMaxLength(255)
                .HasColumnName("order_id");
            entity.Property(e => e.Rvu)
                .HasMaxLength(255)
                .HasColumnName("rvu");
            entity.Property(e => e.Skor)
                .HasMaxLength(255)
                .HasColumnName("skor");
            entity.Property(e => e.Tarif)
                .HasMaxLength(255)
                .HasColumnName("tarif");
            entity.Property(e => e.TglOrder)
                .HasMaxLength(255)
                .HasColumnName("tgl_order");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasColumnName("unit");
            entity.Property(e => e.UnitKunjungan)
                .HasMaxLength(255)
                .HasColumnName("unit_kunjungan");
        });

        modelBuilder.Entity<QualityIndicatorSurvey>(entity =>
        {
            entity.HasKey(e => e.SurveyId);

            entity.ToTable("QualityIndicatorSurvey");

            entity.Property(e => e.SurveyId).HasColumnName("SurveyID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.StandardReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("StandardReferenceID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QualityIndicatorSurveyDetail>(entity =>
        {
            entity.HasKey(e => e.DetailId);

            entity.ToTable("QualityIndicatorSurveyDetail");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.InputQueryDenum).IsUnicode(false);
            entity.Property(e => e.InputQueryNumer).IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SurveyId).HasColumnName("SurveyID");
        });

        modelBuilder.Entity<QueLocation>(entity =>
        {
            entity.HasKey(e => e.LocationId).HasName("PK__QueLocat__E7FEA4778322C78C");

            entity.ToTable("QueLocation");

            entity.Property(e => e.LocationId)
                .ValueGeneratedNever()
                .HasColumnName("LocationID");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationMedia)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LocationMediaStatus).HasDefaultValue(false);
            entity.Property(e => e.LocationName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LocationStatus).HasDefaultValue(false);
            entity.Property(e => e.ShowMedia).HasDefaultValue(true);
            entity.Property(e => e.UpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UpdateByUserID");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<QueLocationItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QueLocationItem");

            entity.HasIndex(e => new { e.LocationId, e.ServiceUnitId, e.ParamedicId }, "locIdxUnx").IsUnique();

            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.UpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UpdateByUserID");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.VisitingType).HasDefaultValue(false);
        });

        modelBuilder.Entity<QueryMonitorStatistic>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.StatementUtcstartTime, "IXQueryMonitorStatistics").IsClustered();

            entity.HasIndex(e => e.QueryStatisticsId, "IXQueryMonitorStatisticsQueryStatisticsID");

            entity.HasIndex(e => new { e.SqlserverId, e.DurationMilliseconds, e.StatementType }, "IXQueryMonitorStatisticsSQLServerID");

            entity.HasIndex(e => e.SqlserverId, "IXQueryMonitorStatisticsSQLServerIDGrooming");

            entity.Property(e => e.ApplicationNameId).HasColumnName("ApplicationNameID");
            entity.Property(e => e.CompletionTime)
                .HasComputedColumnSql("(dateadd(second,[DurationMilliseconds]/(1000),[StatementUTCStartTime]))", false)
                .HasColumnType("datetime");
            entity.Property(e => e.Cpumilliseconds).HasColumnName("CPUMilliseconds");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.HostNameId).HasColumnName("HostNameID");
            entity.Property(e => e.LoginNameId).HasColumnName("LoginNameID");
            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.QueryStatisticsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("QueryStatisticsID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");
            entity.Property(e => e.StatementLocalStartTime).HasColumnType("datetime");
            entity.Property(e => e.StatementUtcstartTime)
                .HasColumnType("datetime")
                .HasColumnName("StatementUTCStartTime");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");

            entity.HasOne(d => d.ApplicationName).WithMany()
                .HasForeignKey(d => d.ApplicationNameId)
                .HasConstraintName("FKQueryMonitorStatisticsApplicationNames");

            entity.HasOne(d => d.Database).WithMany()
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKQueryMonitorStatisticsSQLServerDatabaseNames");

            entity.HasOne(d => d.HostName).WithMany()
                .HasForeignKey(d => d.HostNameId)
                .HasConstraintName("FKQueryMonitorStatisticsHostNames");

            entity.HasOne(d => d.LoginName).WithMany()
                .HasForeignKey(d => d.LoginNameId)
                .HasConstraintName("FKQueryMonitorStatisticsLoginNames");

            entity.HasOne(d => d.Plan).WithMany()
                .HasForeignKey(d => d.PlanId)
                .HasConstraintName("FKQueryMonitorStatisticsSQLQueryPlans");

            entity.HasOne(d => d.Sqlserver).WithMany()
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKQueryMonitorStatisticsMonitoredSQLServers");

            entity.HasOne(d => d.Sqlsignature).WithMany()
                .HasForeignKey(d => d.SqlsignatureId)
                .HasConstraintName("FKQueryMonitorStatisticsSQLSignatures");

            entity.HasOne(d => d.Sqlstatement).WithMany()
                .HasForeignKey(d => d.SqlstatementId)
                .HasConstraintName("FKQueryMonitorStatisticsSQLStatements");
        });

        modelBuilder.Entity<QuerySignatureAggregation>(entity =>
        {
            entity.HasKey(e => e.QuerySignatureAggregationId).HasName("PKQuerySignatureAggregation");

            entity.ToTable("QuerySignatureAggregation");

            entity.HasIndex(e => e.SqlserverId, "QuerySignatureAggregation_SQLServerID");

            entity.Property(e => e.QuerySignatureAggregationId).HasColumnName("QuerySignatureAggregationID");
            entity.Property(e => e.ApplicationNameId).HasColumnName("ApplicationNameID");
            entity.Property(e => e.BlockingOcurrences).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.DeadlockOcurrences).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.EventUtcstartTime)
                .HasColumnType("datetime")
                .HasColumnName("EventUTCStartTime");
            entity.Property(e => e.MaxBlockingDurationMilliseconds).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.MaxCpumilliseconds)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MaxCPUMilliseconds");
            entity.Property(e => e.MaxDurationMilliseconds).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.MaxReads).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.MaxWaitDuration).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.MaxWrites).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.QueryMonitorOccurrences).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.TotalBlockingDurationMilliseconds).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.TotalCpumilliseconds)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("TotalCPUMilliseconds");
            entity.Property(e => e.TotalDurationMilliseconds).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.TotalReads).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.TotalWaitDuration).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.TotalWrites).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.WaitOcurrences).HasColumnType("decimal(38, 0)");

            entity.HasOne(d => d.ApplicationName).WithMany(p => p.QuerySignatureAggregations)
                .HasForeignKey(d => d.ApplicationNameId)
                .HasConstraintName("FKQuerySignatureAggregationApplicationNames");

            entity.HasOne(d => d.Database).WithMany(p => p.QuerySignatureAggregations)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKQuerySignatureAggregationSQLServerDatabaseNames");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.QuerySignatureAggregations)
                .HasForeignKey(d => d.SqlserverId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKQuerySignatureAggregationMonitoredSQLServers");

            entity.HasOne(d => d.Sqlsignature).WithMany(p => p.QuerySignatureAggregations)
                .HasForeignKey(d => d.SqlsignatureId)
                .HasConstraintName("FKQuerySignatureAggregationSQLSignatures");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK_HealthRecordQuestion");

            entity.ToTable("Question");

            entity.HasIndex(e => new { e.ParentQuestionId, e.SranswerType }, "IX_Question_ParentQuestionID_SRAnswerType");

            entity.HasIndex(e => e.VitalSignId, "IX_Question_VitalSignID");

            entity.Property(e => e.QuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.AnswerPrefix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AnswerSuffix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.EquivalentQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EquivalentQuestionID");
            entity.Property(e => e.Formula)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LookUpId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LookUpID");
            entity.Property(e => e.NursingDisplayAs)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParentQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentQuestionID");
            entity.Property(e => e.QuestionAnswerDefaultSelectionId)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerDefaultSelectionID");
            entity.Property(e => e.QuestionAnswerDefaultSelectionId2)
                .HasMaxLength(225)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerDefaultSelectionID2");
            entity.Property(e => e.QuestionAnswerSelectionId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionID");
            entity.Property(e => e.QuestionAnswerSelectionId2)
                .HasMaxLength(225)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionID2");
            entity.Property(e => e.QuestionShortText)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.QuestionText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferenceQuestionID");
            entity.Property(e => e.RelatedColumnName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RelatedEntityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SranswerType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRAnswerType");
            entity.Property(e => e.VitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VitalSignID");
        });

        modelBuilder.Entity<QuestionAnswerSelection>(entity =>
        {
            entity.HasKey(e => e.QuestionAnswerSelectionId).HasName("PK_QuestionSelectionAnswer");

            entity.ToTable("QuestionAnswerSelection");

            entity.Property(e => e.QuestionAnswerSelectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerSelectionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionAnswerSelectionText)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<QuestionAnswerSelectionLine>(entity =>
        {
            entity.HasKey(e => new { e.QuestionAnswerSelectionId, e.QuestionAnswerSelectionLineId });

            entity.ToTable("QuestionAnswerSelectionLine");

            entity.Property(e => e.QuestionAnswerSelectionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionAnswerSelectionID");
            entity.Property(e => e.QuestionAnswerSelectionLineId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QuestionAnswerSelectionLineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionAnswerSelectionLineText)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Score).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<QuestionDefaultValue>(entity =>
        {
            entity.HasKey(e => new { e.QuestionFormId, e.QuestionGroupId, e.QuestionId });

            entity.ToTable("QuestionDefaultValue");

            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.FromQuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromQuestionFormID");
            entity.Property(e => e.FromQuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromQuestionGroupID");
            entity.Property(e => e.FromQuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FromQuestionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<QuestionForm>(entity =>
        {
            entity.ToTable("QuestionForm");

            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.IsMcuform).HasColumnName("IsMCUForm");
            entity.Property(e => e.IsVsignForm).HasColumnName("IsVSignForm");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionFormName)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ReportProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ReportProgramID");
            entity.Property(e => e.RestrictionUserType)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.RmNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RmNO");
            entity.Property(e => e.SrautoNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAutoNumber");
            entity.Property(e => e.SrnsType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNsType");
            entity.Property(e => e.SrquestionFormType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRQuestionFormType");
        });

        modelBuilder.Entity<QuestionFormInServiceUnit>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.QuestionFormId }).HasName("PK_ServiceUnitQuestionForm");

            entity.ToTable("QuestionFormInServiceUnit");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<QuestionGroup>(entity =>
        {
            entity.ToTable("QuestionGroup");

            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.QuestionGroupName)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.QuestionGroupNameEn)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupNameEN");
            entity.Property(e => e.SoapType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<QuestionGroupInForm>(entity =>
        {
            entity.HasKey(e => new { e.QuestionFormId, e.QuestionGroupId }).HasName("PK_QuestionFormQuestionGroup");

            entity.ToTable("QuestionGroupInForm");

            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<QuestionInGroup>(entity =>
        {
            entity.HasKey(e => new { e.QuestionGroupId, e.QuestionId });

            entity.ToTable("QuestionInGroup");

            entity.Property(e => e.QuestionGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionGroupID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParentQuestionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParentQuestionID");
        });

        modelBuilder.Entity<QuestionRecord>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Question Record");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column10)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 10");
            entity.Property(e => e.Column11)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 11");
            entity.Property(e => e.Column12)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 12");
            entity.Property(e => e.Column13)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 13");
            entity.Property(e => e.Column14)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 14");
            entity.Property(e => e.Column15)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 15");
            entity.Property(e => e.Column16)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 16");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 4");
            entity.Property(e => e.Column5)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 5");
            entity.Property(e => e.Column6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 6");
            entity.Property(e => e.Column7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 7");
            entity.Property(e => e.Column8)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 8");
            entity.Property(e => e.Column9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 9");
        });

        modelBuilder.Entity<QueueingSound>(entity =>
        {
            entity.HasKey(e => e.SoundId);

            entity.ToTable("QueueingSound");

            entity.Property(e => e.SoundId).HasColumnName("SoundID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FilePath)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Raspro>(entity =>
        {
            entity.HasKey(e => e.RasproLineId);

            entity.ToTable("Raspro");

            entity.Property(e => e.RasproLineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RasproLineID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NoAction)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.NoActionDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Spesification)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Srraspro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRRaspro");
            entity.Property(e => e.YesAction)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.YesActionDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RasproAction>(entity =>
        {
            entity.HasKey(e => new { e.RasproLineId, e.ActionNo, e.Condition });

            entity.ToTable("RasproAction");

            entity.Property(e => e.RasproLineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RasproLineID");
            entity.Property(e => e.Condition)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ActionDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ReasonsForTreatment>(entity =>
        {
            entity.HasKey(e => new { e.SrreasonVisit, e.ReasonsForTreatmentId });

            entity.ToTable("ReasonsForTreatment");

            entity.Property(e => e.SrreasonVisit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReasonVisit");
            entity.Property(e => e.ReasonsForTreatmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentID");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonsForTreatmentName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReasonsForTreatmentDesc>(entity =>
        {
            entity.HasKey(e => new { e.SrreasonVisit, e.ReasonsForTreatmentId, e.ReasonsForTreatmentDescId });

            entity.ToTable("ReasonsForTreatmentDesc");

            entity.Property(e => e.SrreasonVisit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReasonVisit");
            entity.Property(e => e.ReasonsForTreatmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentID");
            entity.Property(e => e.ReasonsForTreatmentDescId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentDescID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReasonsForTreatmentDescName)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RecalculationProcessHistory>(entity =>
        {
            entity.HasKey(e => e.RecalculationProcessNo);

            entity.ToTable("RecalculationProcessHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromGuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromGuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RecalculationProcessDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToGuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToGuarantorID");
        });

        modelBuilder.Entity<RecipeMarginValue>(entity =>
        {
            entity.HasKey(e => e.CounterId);

            entity.ToTable("RecipeMarginValue");

            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.EndingValue).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RecipeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StartingValue).HasColumnType("numeric(6, 2)");
        });

        modelBuilder.Entity<RecommedationClassification>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RecommedationClassification");

            entity.Property(e => e.Aws).HasColumnName("AWS");
            entity.Property(e => e.RecommendationId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RecommendationID");
        });

        modelBuilder.Entity<RecruitmentMethod>(entity =>
        {
            entity.ToTable("RecruitmentMethod");

            entity.Property(e => e.RecruitmentMethodId).HasColumnName("RecruitmentMethodID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PersonnelRequisitionId).HasColumnName("PersonnelRequisitionID");
            entity.Property(e => e.SrrecruitmentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRecruitmentMethod");
        });

        modelBuilder.Entity<RecruitmentPlan>(entity =>
        {
            entity.ToTable("RecruitmentPlan");

            entity.Property(e => e.RecruitmentPlanId).HasColumnName("RecruitmentPlanID");
            entity.Property(e => e.DivisionId).HasColumnName("DivisionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.RecruitmentPlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SectionId).HasColumnName("SectionID");
            entity.Property(e => e.SubDivisionId).HasColumnName("SubDivisionID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<ReferExternal>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("ReferExternal");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactOfficer)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ContactTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OtherInformation)
                .HasMaxLength(1500)
                .IsUnicode(false);
            entity.Property(e => e.ReferReasonOther)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferralAgreedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralAgreedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferralID");
            entity.Property(e => e.SrreferReason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRReferReason");
            entity.Property(e => e.UnitOfficer)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReferExternalBak>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("ReferExternalBak");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OtherInformation)
                .HasMaxLength(1500)
                .IsUnicode(false);
            entity.Property(e => e.ReferReasonOther)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferralAgreedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralAgreedTime).HasColumnType("datetime");
            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferralID");
            entity.Property(e => e.SrreferReason)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRReferReason");
        });

        modelBuilder.Entity<ReferInPatient>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SequenceNo });

            entity.ToTable("ReferInPatient");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ActionExamTreatment)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Answer)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FromParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromParamedicID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferDateTime).HasColumnType("datetime");
            entity.Property(e => e.ToParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToParamedicID");
        });

        modelBuilder.Entity<ReferLetter>(entity =>
        {
            entity.HasKey(e => e.RegApptNo);

            entity.ToTable("ReferLetter");

            entity.Property(e => e.RegApptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ActionExamTreatment)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Answer)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Referral>(entity =>
        {
            entity.HasKey(e => e.ReferralId).IsClustered(false);

            entity.ToTable("Referral");

            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReferralID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DepartmentName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.District)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsPkp).HasColumnName("IsPKP");
            entity.Property(e => e.IsRefferalFrom).HasDefaultValue(true);
            entity.Property(e => e.IsRefferalTo).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReferralName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SrreferralGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRReferralGroup");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaxRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TermId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TermID");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Registration>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).IsClustered(false);

            entity.ToTable("Registration");

            entity.HasIndex(e => new { e.SrregistrationType, e.DischargeDate, e.IsClosed }, "<Name of Missing Index, sysname,>");

            entity.HasIndex(e => new { e.AppointmentNo, e.IsVoid }, "DPA_RECIDX_523");

            entity.HasIndex(e => new { e.RegistrationDate, e.IsVoid, e.IsClosed, e.IsFromDispensary, e.IsNonPatient, e.SrregistrationType }, "IX_Registration_IsVoid_IsClosed_IsFromDispensary");

            entity.HasIndex(e => new { e.SrregistrationType, e.IsVoid, e.IsClosed, e.IsFromDispensary, e.IsNonPatient }, "IX_Registration_SRRegistrationType_IsVoid_IsClosed_IsFromDispensary_IsNonPatient");

            entity.HasIndex(e => new { e.SrregistrationType, e.ServiceUnitId, e.DischargeDate, e.IsVoid, e.IsClosed, e.IsFromDispensary, e.IsNonPatient }, "IX_Registration_SRRegistrationType_ServiceUnitID_DischargeDate_IsVoid_IsClosed_IsFromDispensary_IsNonPatient");

            entity.HasIndex(e => new { e.RegistrationNo, e.SrregistrationType, e.IsNonPatient, e.IsVoid, e.IsFromDispensary }, "_dta_index_Registration_13_1125579048__K1_K2_K103_K59_K68_7_35");

            entity.HasIndex(e => new { e.GuarantorId, e.ParamedicId, e.SrregistrationType, e.IsVoid, e.RegistrationNo }, "_dta_index_Registration_13_1125579048__K4_K3_K2_K59_K1_7_22_35");

            entity.HasIndex(e => new { e.IsVoid, e.GuarantorId, e.SrregistrationType, e.RegistrationNo, e.IsNonPatient, e.IsFromDispensary }, "_dta_index_Registration_13_1125579048__K59_K4_K2_K1_K103_K68_7_35");

            entity.HasIndex(e => e.PatientId, "_dta_index_Registration_15_1125579048__K5_59_64");

            entity.HasIndex(e => new { e.PatientId, e.BpjsSepNo, e.IsVoid, e.RegistrationNo }, "_dta_index_Registration_15_1125579048__K5_K122_K59_K1");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsNonPatient, e.SrregistrationType, e.IsVoid, e.IsFromDispensary, e.IsClosed, e.PatientId }, "_dta_index_Registration_5_158115804__K1_K103_K2_K59_K68_K64_K5_3");

            entity.HasIndex(e => new { e.SrregistrationType, e.IsNonPatient, e.IsVoid, e.IsFromDispensary }, "_dta_index_Registration_c_5_885018334__K2_K106_K59_K68").IsClustered();

            entity.HasIndex(e => e.FromRegistrationNo, "idx_Registration_FromRegistrationNo");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ActualVisitDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AdjustLog).IsUnicode(false);
            entity.Property(e => e.AdministrationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AllowPatientCheckOutByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AllowPatientCheckOutByUserID");
            entity.Property(e => e.AllowPatientCheckOutDateTime).HasColumnType("datetime");
            entity.Property(e => e.Anamnesis)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproximatePlafondAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BedID");
            entity.Property(e => e.BpjsCoverageFormula).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BpjsPackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsPackageID");
            entity.Property(e => e.BpjsSepNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CauseOfAccident)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.Complaint)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConfirmedAttendanceByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConfirmedAttendanceByUserID");
            entity.Property(e => e.ConfirmedAttendanceDateTime).HasColumnType("datetime");
            entity.Property(e => e.CoverageClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CoverageClassID");
            entity.Property(e => e.CrashSiteDetail)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DeathCertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DiscAdmGuarantor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscAdmPatient).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DischargeMedicalNotes)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DischargeNotes)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeOperatorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DischargeOperatorID");
            entity.Property(e => e.DischargePlanDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EmrDiagnoseId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EmrDiagnoseID");
            entity.Property(e => e.ExternalQueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinishedAttendanceByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FinishedAttendanceByUserID");
            entity.Property(e => e.FinishedAttendanceDateTime).HasColumnType("datetime");
            entity.Property(e => e.FirstResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.FirstResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Hpi)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.InitialDiagnose)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.InsuranceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InsuranceID");
            entity.Property(e => e.IsBackDate).HasDefaultValue(false);
            entity.Property(e => e.IsClosed).HasDefaultValue(false);
            entity.Property(e => e.IsClusterAssessment).HasDefaultValue(false);
            entity.Property(e => e.IsConfirmedAttendance).HasDefaultValue(false);
            entity.Property(e => e.IsConsul).HasDefaultValue(false);
            entity.Property(e => e.IsDhf).HasColumnName("IsDHF");
            entity.Property(e => e.IsDirectPrescriptionReturn).HasColumnName("isDirectPrescriptionReturn");
            entity.Property(e => e.IsEkg).HasColumnName("IsEKG");
            entity.Property(e => e.IsEmrvalid)
                .HasDefaultValue(false)
                .HasColumnName("IsEMRValid");
            entity.Property(e => e.IsEpisodeComplete).HasDefaultValue(false);
            entity.Property(e => e.IsGenerateHl7).HasColumnName("IsGenerateHL7");
            entity.Property(e => e.IsHoldTransactionEntryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IsHoldTransactionEntryByUserID");
            entity.Property(e => e.IsNonPatient).HasDefaultValue(false);
            entity.Property(e => e.IsOpenEntryMr)
                .HasComment("Status bisa entry MR jika registrasi sudah diclose")
                .HasColumnName("IsOpenEntryMR");
            entity.Property(e => e.IsQueueCalled).HasDefaultValue(false);
            entity.Property(e => e.IsQueueRecall).HasDefaultValue(false);
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LockVerifiedBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LockVerifiedBillingByUserID");
            entity.Property(e => e.LockVerifiedBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.LosinDay).HasColumnName("LOSInDay");
            entity.Property(e => e.LosinMonth).HasColumnName("LOSInMonth");
            entity.Property(e => e.LosinYear).HasColumnName("LOSInYear");
            entity.Property(e => e.MedicationPlanning)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientSign).HasColumnType("image");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhysicianResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PhysicianResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PlavonAmount)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PlavonAmount2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ProcedureChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureChargeClassID");
            entity.Property(e => e.QueueCalledDateTime).HasColumnType("datetime");
            entity.Property(e => e.QueueQr)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReasonsForTreatmentDescId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentDescID");
            entity.Property(e => e.ReasonsForTreatmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentID");
            entity.Property(e => e.ReferByParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferByParamedicID");
            entity.Property(e => e.ReferTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReferralID");
            entity.Property(e => e.ReferralIdTo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferralName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralNameTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.RemainingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RoomID");
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SentToBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SentToBillingByUserID");
            entity.Property(e => e.SentToBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SrbussinesMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRBussinesMethod");
            entity.Property(e => e.Srclassification)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRClassification");
            entity.Property(e => e.SrclassificationRoom)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRClassificationRoom");
            entity.Property(e => e.SrcovidComorbidStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCovidComorbidStatus");
            entity.Property(e => e.SrcovidStatus).HasColumnName("SRCovidStatus");
            entity.Property(e => e.SrcrashSite)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCrashSite");
            entity.Property(e => e.SrdischargeCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDischargeCondition");
            entity.Property(e => e.SrdischargeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDischargeMethod");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SremployeeRelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeRelationship");
            entity.Property(e => e.SrercaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRERCaseType");
            entity.Property(e => e.SrfatherOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFatherOccupation");
            entity.Property(e => e.SrkiaCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKiaCaseType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrobstetricType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRObstetricType");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.SrpatientInCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientInCondition");
            entity.Property(e => e.SrpatientInType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPatientInType");
            entity.Property(e => e.SrpatientRiskColor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientRiskColor");
            entity.Property(e => e.SrpatientRiskStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientRiskStatus");
            entity.Property(e => e.SrqueRoom)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRQueRoom");
            entity.Property(e => e.SrreferralGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReferralGroup");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.SrrelationshipQuality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationshipQuality");
            entity.Property(e => e.SrresidentialHome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResidentialHome");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRShift");
            entity.Property(e => e.Srtriage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTriage");
            entity.Property(e => e.SrvisitReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRVisitReason");
            entity.Property(e => e.SrvoidReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVoidReason");
            entity.Property(e => e.TransactionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.UsertInsertDischargePlan)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.VisiteRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes).IsUnicode(false);
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationAntrol>(entity =>
        {
            entity.HasKey(e => new { e.AppointmentNo, e.RegistrationNo }).HasName("PK__Registra__AD1C80CD0A6EE71D");

            entity.ToTable("RegistrationAntrol");

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskFiveResponse).IsUnicode(false);
            entity.Property(e => e.TaskFiveSentDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskFourResponse).IsUnicode(false);
            entity.Property(e => e.TaskFourSentDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskOneResponse).IsUnicode(false);
            entity.Property(e => e.TaskOneSentDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskSevenResponse).IsUnicode(false);
            entity.Property(e => e.TaskSevenSentDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskSixResponse).IsUnicode(false);
            entity.Property(e => e.TaskSixSentDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskThreeResponse).IsUnicode(false);
            entity.Property(e => e.TaskThreeSentDateTime).HasColumnType("datetime");
            entity.Property(e => e.TaskTwoResponse).IsUnicode(false);
            entity.Property(e => e.TaskTwoSentDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationApproximateCoverageDetail>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ClassId });

            entity.ToTable("RegistrationApproximateCoverageDetail");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CalculatedAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoverageAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationBpjsPackage>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PackageId });

            entity.ToTable("RegistrationBpjsPackage");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<RegistrationCounseling>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.CounselingNo });

            entity.ToTable("RegistrationCounseling");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.CounselingDateTime).HasColumnType("datetime");
            entity.Property(e => e.CounselingNotes)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<RegistrationCounselingLine>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.CounselingNo, e.SrdrugCounseling });

            entity.ToTable("RegistrationCounselingLine");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrdrugCounseling)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRDrugCounseling");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationCoverageDetail>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ClassId });

            entity.ToTable("RegistrationCoverageDetail");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.CalculatedAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CoverageAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
        });

        modelBuilder.Entity<RegistrationDischargeDetail>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("RegistrationDischargeDetail");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OtherExamination).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SrunitIntended)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRUnitIntended");
        });

        modelBuilder.Entity<RegistrationDiscountRule>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("RegistrationDiscountRule");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BhpPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.DiscountGlobalAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DrPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.ItemMedicalPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.ItemNonMedicalPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ResepPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.RoomPercentage).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.RsPercentage).HasColumnType("numeric(6, 2)");
        });

        modelBuilder.Entity<RegistrationDisplayEmergency>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RegistrationDisplayEmergency");

            entity.Property(e => e.Ip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IP");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<RegistrationDocumentCheckList>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.DocumentFilesId });

            entity.ToTable("RegistrationDocumentCheckList");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DocumentFilesId).HasColumnName("DocumentFilesID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationDrugOb>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.DrugObsNo });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DrugInteractionRisk)
                .HasMaxLength(800)
                .IsUnicode(false);
            entity.Property(e => e.DrugObsDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Recommendation)
                .HasMaxLength(800)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<RegistrationDrugObsDrp>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.DrugObsNo, e.Srdrps });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Srdrps)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRDrps");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationDrugObsItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.DrugObsNo, e.MedicationReceiveNo });

            entity.ToTable("RegistrationDrugObsItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FollowUp)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationDrugObsPto>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.DrugObsNo, e.Srpto });

            entity.ToTable("RegistrationDrugObsPto");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Srpto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRPto");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.YesNotes)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationEso>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.EsoNo });

            entity.ToTable("RegistrationEso");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssessmentNote)
                .HasMaxLength(800)
                .IsUnicode(false);
            entity.Property(e => e.BodyWeight).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EndDateTime).HasColumnType("datetime");
            entity.Property(e => e.EsoComorbidities)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EsoDateTime).HasColumnType("datetime");
            entity.Property(e => e.EsoManifestations)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EsoOtherManifestation)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LaboratoryTest)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MainDisease)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PregnantStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrevEsoHistory)
                .HasMaxLength(400)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SresoStatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SREsoStatus");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationEsoItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.EsoNo, e.MedicationReceiveNo });

            entity.ToTable("RegistrationEsoItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeIndication)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EndConsumeDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.StartConsumeDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationEsoScale>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.EsoNo, e.SresoScale });

            entity.ToTable("RegistrationEsoScale");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SresoScale)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SREsoScale");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ScaleStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<RegistrationEstimateAmount>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).HasName("PK__Registra__6EF5E043CD8BEDBB");

            entity.ToTable("RegistrationEstimateAmount");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CbgId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CbgID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<RegistrationEstimateLo>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).HasName("PK__Registra__6EF5E043F801438A");

            entity.ToTable("RegistrationEstimateLOS");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Los)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("LOS");
        });

        modelBuilder.Entity<RegistrationGeneralConsent>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).HasName("PK__Registra__6EF5E043691338AA");

            entity.ToTable("RegistrationGeneralConsent");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsenteeSsn)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NameOfConsentee)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NameOfOfficer)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NameOfWitness)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OfficerSign).HasColumnType("image");
            entity.Property(e => e.PatientSign).HasColumnType("image");
            entity.Property(e => e.Srrelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationship");
            entity.Property(e => e.WitnessSign).HasColumnType("image");
            entity.Property(e => e.WitnessSsn)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationGuarantor>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.GuarantorId });

            entity.ToTable("RegistrationGuarantor");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PlafondAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<RegistrationGuarantorHistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.FromGuarantorId, e.ToGuarantorId, e.LastUpdateDateTime });

            entity.ToTable("RegistrationGuarantorHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromGuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromGuarantorID");
            entity.Property(e => e.ToGuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToGuarantorID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
        });

        modelBuilder.Entity<RegistrationGyssen>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GyssensCreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("GyssensCreateByUserID");
            entity.Property(e => e.GyssensCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionDateEnd).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionDateStart).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.ZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZatActiveID");
        });

        modelBuilder.Entity<RegistrationGyssensLine>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo, e.RasproLineId });

            entity.ToTable("RegistrationGyssensLine");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RasproLineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RasproLineID");
            entity.Property(e => e.Condition)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.GyssensCategory)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationInfo>(entity =>
        {
            entity.HasKey(e => e.RegistrationInfoId).HasName("PK__Registra__85158C083925DC9F");

            entity.ToTable("RegistrationInfo");

            entity.Property(e => e.RegistrationInfoId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Information).HasColumnType("text");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.RegistrationInfos)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistrationToRegistrationInfo");
        });

        modelBuilder.Entity<RegistrationInfoMedic>(entity =>
        {
            entity.HasKey(e => e.RegistrationInfoMedicId).HasName("PK__Registra__19E641A74620B061");

            entity.ToTable("RegistrationInfoMedic");

            entity.HasIndex(e => e.RegistrationNo, "IX_RegistrationInfoMedic_RegistrationNo");

            entity.Property(e => e.RegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoMedicID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDatetime).HasColumnType("datetime");
            entity.Property(e => e.AttendingNotes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateTimeInfo).HasColumnType("datetime");
            entity.Property(e => e.DpjpNotes)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP437_CI_AS");
            entity.Property(e => e.Info1).IsUnicode(false);
            entity.Property(e => e.Info1Entry).IsUnicode(false);
            entity.Property(e => e.Info1Log).IsUnicode(false);
            entity.Property(e => e.Info2)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Info2Log).IsUnicode(false);
            entity.Property(e => e.Info3)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Info3Entry).IsUnicode(false);
            entity.Property(e => e.Info3Log).IsUnicode(false);
            entity.Property(e => e.Info4)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Info4Log).IsUnicode(false);
            entity.Property(e => e.Info5)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.IsPrmrj).HasColumnName("IsPRMRJ");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PpaInstruction)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionCurrentDay).IsUnicode(false);
            entity.Property(e => e.ReceiveBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrmedicalNotesInputType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalNotesInputType");
            entity.Property(e => e.SruserType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRUserType");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.RegistrationInfoMedics)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistrationToRegistrationInfoMedic");
        });

        modelBuilder.Entity<RegistrationInfoMedicBodyDiagram>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationInfoMedicId, e.BodyId }).HasName("PK_RegistrationInfoMedicBodyDiagram_1");

            entity.ToTable("RegistrationInfoMedicBodyDiagram");

            entity.Property(e => e.RegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoMedicID");
            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<RegistrationInfoMedicDiagnose>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationInfoMedicId, e.SequenceNo }).HasName("PK_RegistrationInfoMedicDiagnose_1");

            entity.ToTable("RegistrationInfoMedicDiagnose");

            entity.HasIndex(e => e.RegistrationNo, "IX_RegistrationInfoMedicDiagnose_RegistrationNo");

            entity.Property(e => e.RegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoMedicID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnoseDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.DiagnosisText)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ExternalCauseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ExternalCauseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrdiagnoseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiagnoseType");
        });

        modelBuilder.Entity<RegistrationInfoMedicVitalSign>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationInfoMedicId, e.VitalSignId });

            entity.ToTable("RegistrationInfoMedicVitalSign");

            entity.Property(e => e.RegistrationInfoMedicId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationInfoMedicID");
            entity.Property(e => e.VitalSignId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VitalSignID");
            entity.Property(e => e.EntryMask)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.VitalSignUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VitalSignValueNum).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.VitalSignValueText)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationInfoMedical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Registra__3214EC2710B8C3E9");

            entity.ToTable("RegistrationInfoMedical");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateTimeInfo).HasColumnType("datetime");
            entity.Property(e => e.Info1)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Info2)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Info3)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Info4)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrmedicalNotesInputType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalNotesInputType");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.RegistrationInfoMedicals)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistrationToRegistrationInfoMedical");
        });

        modelBuilder.Entity<RegistrationInfoSumary>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("RegistrationInfoSumary");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationItemRule>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ItemId }).IsClustered(false);

            entity.ToTable("RegistrationItemRule");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.AmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmergencyAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsValueInPercent)
                .IsRequired()
                .HasDefaultValueSql("('')");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OutpatientAmountValue).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrguarantorRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorRuleType");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.RegistrationItemRules)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefRegistrationToRegistrationItemRule");
        });

        modelBuilder.Entity<RegistrationMeasuredGoal>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo });

            entity.ToTable("RegistrationMeasuredGoal");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Goal)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Planning)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Problem)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SrtimeType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRTimeType");
            entity.Property(e => e.SruserType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRUserType");
        });

        modelBuilder.Entity<RegistrationMrnhistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.UpdateDateTime });

            entity.ToTable("RegistrationMRNHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromPatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FromPatientID");
            entity.Property(e => e.ToPatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToPatientID");
            entity.Property(e => e.UpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UpdateByUserID");
        });

        modelBuilder.Entity<RegistrationPathway>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PathwayId });

            entity.ToTable("RegistrationPathway");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PathwayStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationPathwayItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PathwayId, e.PathwayItemSeqNo });

            entity.ToTable("RegistrationPathwayItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationPathwayItemExecution>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PathwayId, e.PathwayItemSeqNo, e.DayNo });

            entity.ToTable("RegistrationPathwayItemExecution");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PathwayId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PathwayID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationPatientRiskStatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.FromSrpatientRiskStatus, e.ToSrpatientRiskStatus, e.LastUpdateDateTime });

            entity.ToTable("RegistrationPatientRiskStatusHistory");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromSrpatientRiskStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FromSRPatientRiskStatus");
            entity.Property(e => e.ToSrpatientRiskStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToSRPatientRiskStatus");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
        });

        modelBuilder.Entity<RegistrationPlafondHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("RegistrationPlafondHistory");

            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PlafondAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationPlafondRule>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("RegistrationPlafondRule");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PlafondAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<RegistrationPto>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PtoNo });

            entity.ToTable("RegistrationPto");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PtoA)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PtoDateTime).HasColumnType("datetime");
            entity.Property(e => e.PtoO)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PtoP)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PtoS)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<RegistrationRaspro>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo });

            entity.ToTable("RegistrationRaspro");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AbRestrictionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AbRestrictionID");
            entity.Property(e => e.AdviseByParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AdviseByParamedicID");
            entity.Property(e => e.AntibioticIndication)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Comorbid)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ComorbidOther)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Diagnose)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OtherInfection)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrevAbRestrictionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrevAbRestrictionID");
            entity.Property(e => e.RasproDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SignImage).HasColumnType("image");
            entity.Property(e => e.Srraspro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRRaspro");
            entity.Property(e => e.SrwoundClassification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRWoundClassification");
            entity.Property(e => e.SurgeryName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationRasproItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.RasproSeqNo, e.ItemId });

            entity.ToTable("RegistrationRasproItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.AcPcDc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DosageQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmbalaceQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrevRasproItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrevRasproItemID");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.StopDateTime).HasColumnType("datetime");
            entity.Property(e => e.ZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZatActiveID");
        });

        modelBuilder.Entity<RegistrationRasproLine>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SeqNo, e.RasproLineId });

            entity.ToTable("RegistrationRasproLine");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RasproLineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RasproLineID");
            entity.Property(e => e.Condition)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationResponsiblePerson>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("RegistrationResponsiblePerson");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HomeAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.JobDescription)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NameOfTheResponsible)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.OtherNameOfTheResponsibleTwo)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.OtherSsnTwo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.Srrelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationship");
            entity.Property(e => e.SrrelationshipTwo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationshipTwo");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationTariffComponentDiscountRule>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.TariffComponentId });

            entity.ToTable("RegistrationTariffComponentDiscountRule");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RegistrationVisit>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.VisitNo });

            entity.ToTable("RegistrationVisit");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.VisitDateTime).HasColumnType("datetime");
            entity.Property(e => e.VisitNotes)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReplicationTopology>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReplicationTopology");

            entity.Property(e => e.DistributorDb)
                .HasMaxLength(128)
                .HasColumnName("DistributorDB");
            entity.Property(e => e.DistributorDbid).HasColumnName("DistributorDBID");
            entity.Property(e => e.DistributorInstance).HasMaxLength(128);
            entity.Property(e => e.LastDistributorSnapshotDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastPublisherSnapshotDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastSubscriberSnapshotDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastSubscriberUpdate).HasColumnType("datetime");
            entity.Property(e => e.LastSyncSummary).HasMaxLength(128);
            entity.Property(e => e.LastSyncTime).HasColumnType("datetime");
            entity.Property(e => e.Publication).HasMaxLength(128);
            entity.Property(e => e.PublicationDescription).HasMaxLength(255);
            entity.Property(e => e.PublisherDb)
                .HasMaxLength(128)
                .HasColumnName("PublisherDB");
            entity.Property(e => e.PublisherDbid).HasColumnName("PublisherDBID");
            entity.Property(e => e.PublisherInstance).HasMaxLength(128);
            entity.Property(e => e.SubscriberDb)
                .HasMaxLength(128)
                .HasColumnName("SubscriberDB");
            entity.Property(e => e.SubscriberDbid).HasColumnName("SubscriberDBID");
            entity.Property(e => e.SubscriberInstance).HasMaxLength(128);
        });

        modelBuilder.Entity<ReportInterval>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReportPeriod>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReportPeriodInterval>(entity =>
        {
            entity.HasKey(e => new { e.ReportNumber, e.PeriodValue, e.IntervalValue });
        });

        modelBuilder.Entity<RepositoryInfo>(entity =>
        {
            entity.HasKey(e => e.Name).HasName("Name");

            entity.ToTable("RepositoryInfo");

            entity.Property(e => e.Name).HasMaxLength(30);
            entity.Property(e => e.CharacterValue)
                .HasMaxLength(1024)
                .HasColumnName("Character_Value");
            entity.Property(e => e.InternalValue).HasColumnName("Internal_Value");
        });

        modelBuilder.Entity<ResearchLetter>(entity =>
        {
            entity.HasKey(e => e.LetterId);

            entity.ToTable("ResearchLetter");

            entity.Property(e => e.LetterId).HasColumnName("LetterID");
            entity.Property(e => e.Attachment)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LetterDate).HasColumnType("datetime");
            entity.Property(e => e.LetterNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResearcherName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SreducationDegree)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationDegree");
            entity.Property(e => e.SrresearchDecision)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResearchDecision");
            entity.Property(e => e.SrresearchFaculty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResearchFaculty");
            entity.Property(e => e.SrresearchInstitution)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResearchInstitution");
            entity.Property(e => e.SrresearchMajors)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResearchMajors");
            entity.Property(e => e.SrresearchReviewerName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResearchReviewerName");
            entity.Property(e => e.Subject)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ResearchLetterDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId);

            entity.ToTable("ResearchLetterDocument");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FileAttachName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LetterId).HasColumnName("LetterID");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OriFileName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OriPath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SmallImage).HasColumnType("image");
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasKey(e => e.ReservationNo);

            entity.ToTable("Reservation");

            entity.Property(e => e.ReservationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BedID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FollowUpByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FollowUpByUserID");
            entity.Property(e => e.FollowUpDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromBedID");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReservationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrreservationStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRReservationStatus");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ResponseIh>(entity =>
        {
            entity.HasKey(e => e.IdResponseencounter).HasName("PK__response__140B0617DCFF84A9");

            entity.ToTable("response_ihs");

            entity.HasIndex(e => e.RegistrationNo, "response_ihs_registrationno");

            entity.Property(e => e.IdResponseencounter).HasColumnName("id_responseencounter");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Location)
                .HasColumnType("text")
                .HasColumnName("location");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("medicalNo");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("registrationNo");
            entity.Property(e => e.Resourceid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("resourceid");
            entity.Property(e => e.Resourcetype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("resourcetype");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<ResponseIhsDev>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("response_ihs_dev");

            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.IdResponseencounter)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_responseencounter");
            entity.Property(e => e.Location)
                .HasColumnType("text")
                .HasColumnName("location");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("medicalNo");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("registrationNo");
            entity.Property(e => e.Resourceid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("resourceid");
            entity.Property(e => e.Resourcetype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("resourcetype");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<ResponseLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__response__140B0617DCFF84A9_copy1");

            entity.ToTable("response_log");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Datakirim)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("datakirim");
            entity.Property(e => e.Dataquery)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dataquery");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
        });

        modelBuilder.Entity<RevenueByCashBasis>(entity =>
        {
            entity.HasKey(e => new { e.StartDate, e.EndDate, e.UserId, e.PaymentNo, e.PaymentReferenceNo, e.TransactionNo, e.SequenceNo, e.TariffComponentName, e.TxType });

            entity.ToTable("RevenueByCashBasis");

            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TxType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountGuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountPatientAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.TotalIncome).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<RewardDokterItemGroup>(entity =>
        {
            entity.HasKey(e => e.ItemGroupId).HasName("PK__RewardDo__CCB7CA9DD39F00D1");

            entity.ToTable("RewardDokterItemGroup");

            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
        });

        modelBuilder.Entity<Rincian>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Rincian");

            entity.Property(e => e.AcuanIdi)
                .HasMaxLength(255)
                .HasColumnName("acuan_idi");
            entity.Property(e => e.Bulan)
                .HasMaxLength(255)
                .HasColumnName("bulan");
            entity.Property(e => e.Icd10)
                .HasMaxLength(255)
                .HasColumnName("icd_10");
            entity.Property(e => e.Icd9Cm)
                .HasMaxLength(255)
                .HasColumnName("icd_9_cm");
            entity.Property(e => e.IdDokter)
                .HasMaxLength(255)
                .HasColumnName("id_dokter");
            entity.Property(e => e.Jaminan)
                .HasMaxLength(255)
                .HasColumnName("jaminan");
            entity.Property(e => e.JasaId)
                .HasMaxLength(255)
                .HasColumnName("jasa_id");
            entity.Property(e => e.JenisLayanan)
                .HasMaxLength(255)
                .HasColumnName("jenis_layanan");
            entity.Property(e => e.KodeLayanan)
                .HasMaxLength(255)
                .HasColumnName("kode_layanan");
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(255)
                .HasColumnName("nama_dokter");
            entity.Property(e => e.NamaLayanan)
                .HasMaxLength(255)
                .HasColumnName("nama_layanan");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .HasColumnName("nama_pasien");
            entity.Property(e => e.NamaTindakanIdi)
                .HasMaxLength(255)
                .HasColumnName("nama_tindakan_idi");
            entity.Property(e => e.No)
                .HasMaxLength(255)
                .HasColumnName("no");
            entity.Property(e => e.NoRm)
                .HasMaxLength(255)
                .HasColumnName("no_rm");
            entity.Property(e => e.OrderId)
                .HasMaxLength(255)
                .HasColumnName("order_id");
            entity.Property(e => e.Rvu)
                .HasMaxLength(255)
                .HasColumnName("rvu");
            entity.Property(e => e.Skor)
                .HasMaxLength(255)
                .HasColumnName("skor");
            entity.Property(e => e.Tarif)
                .HasMaxLength(255)
                .HasColumnName("tarif");
            entity.Property(e => e.TglOrder)
                .HasMaxLength(255)
                .HasColumnName("tgl_order");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasColumnName("unit");
            entity.Property(e => e.UnitKunjungan)
                .HasMaxLength(255)
                .HasColumnName("unit_kunjungan");
        });

        modelBuilder.Entity<Rincian1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("rincian", "guest");

            entity.Property(e => e.AcuanIdi)
                .HasMaxLength(255)
                .HasColumnName("acuan_idi");
            entity.Property(e => e.Bulan)
                .HasMaxLength(255)
                .HasColumnName("bulan");
            entity.Property(e => e.Icd10)
                .HasMaxLength(255)
                .HasColumnName("icd_10");
            entity.Property(e => e.Icd9Cm)
                .HasMaxLength(255)
                .HasColumnName("icd_9_cm");
            entity.Property(e => e.IdDokter)
                .HasMaxLength(255)
                .HasColumnName("id_dokter");
            entity.Property(e => e.Jaminan)
                .HasMaxLength(255)
                .HasColumnName("jaminan");
            entity.Property(e => e.JasaId)
                .HasMaxLength(255)
                .HasColumnName("jasa_id");
            entity.Property(e => e.JenisLayanan)
                .HasMaxLength(255)
                .HasColumnName("jenis_layanan");
            entity.Property(e => e.KodeLayanan)
                .HasMaxLength(255)
                .HasColumnName("kode_layanan");
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(255)
                .HasColumnName("nama_dokter");
            entity.Property(e => e.NamaLayanan)
                .HasMaxLength(255)
                .HasColumnName("nama_layanan");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .HasColumnName("nama_pasien");
            entity.Property(e => e.NamaTindakanIdi)
                .HasMaxLength(255)
                .HasColumnName("nama_tindakan_idi");
            entity.Property(e => e.No)
                .HasMaxLength(255)
                .HasColumnName("no");
            entity.Property(e => e.NoRm)
                .HasMaxLength(255)
                .HasColumnName("no_rm");
            entity.Property(e => e.OrderId)
                .HasMaxLength(255)
                .HasColumnName("order_id");
            entity.Property(e => e.Rvu)
                .HasMaxLength(255)
                .HasColumnName("rvu");
            entity.Property(e => e.Skor)
                .HasMaxLength(255)
                .HasColumnName("skor");
            entity.Property(e => e.Tarif)
                .HasMaxLength(255)
                .HasColumnName("tarif");
            entity.Property(e => e.TglOrder)
                .HasMaxLength(255)
                .HasColumnName("tgl_order");
            entity.Property(e => e.Unit)
                .HasMaxLength(255)
                .HasColumnName("unit");
            entity.Property(e => e.UnitKunjungan)
                .HasMaxLength(255)
                .HasColumnName("unit_kunjungan");
        });

        modelBuilder.Entity<RiskFactor>(entity =>
        {
            entity.HasKey(e => new { e.SrriskFactorsType, e.RiskFactorsId });

            entity.Property(e => e.SrriskFactorsType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskFactorsType");
            entity.Property(e => e.RiskFactorsId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RiskFactorsID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RiskFactorsName)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RiskGrading>(entity =>
        {
            entity.ToTable("RiskGrading");

            entity.Property(e => e.RiskGradingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RiskGradingID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RiskGradingColor)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RiskGradingName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RiskGradingMtx>(entity =>
        {
            entity.HasKey(e => new { e.SrclinicalImpact, e.SrincidentProbabilityFrequency });

            entity.ToTable("RiskGradingMtx");

            entity.Property(e => e.SrclinicalImpact)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRClinicalImpact");
            entity.Property(e => e.SrincidentProbabilityFrequency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentProbabilityFrequency");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RiskGradingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RiskGradingID");
            entity.Property(e => e.SrincidentFollowUp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRIncidentFollowUp");
        });

        modelBuilder.Entity<RiskManagement>(entity =>
        {
            entity.HasKey(e => e.RiskManagementNo);

            entity.ToTable("RiskManagement");

            entity.Property(e => e.RiskManagementNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<RiskManagementItem>(entity =>
        {
            entity.HasKey(e => new { e.RiskManagementNo, e.SequenceNo });

            entity.ToTable("RiskManagementItem");

            entity.Property(e => e.RiskManagementNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pic)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RiskManagementDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SrriskManagementBands)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskManagementBands");
            entity.Property(e => e.SrriskManagementCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskManagementCategory");
            entity.Property(e => e.SrriskManagementControlling)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskManagementControlling");
            entity.Property(e => e.SrriskManagementImpact)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskManagementImpact");
            entity.Property(e => e.SrriskManagementProbability)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRiskManagementProbability");
        });

        modelBuilder.Entity<Rl4education>(entity =>
        {
            entity.ToTable("RL4Education");

            entity.Property(e => e.Rl4educationId).HasColumnName("RL4EducationID");
            entity.Property(e => e.AcademicTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Rl4educationCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RL4EducationCode");
            entity.Property(e => e.Rl4educationName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RL4EducationName");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SrfieldLabor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFieldLabor");
        });

        modelBuilder.Entity<RlMasterReport>(entity =>
        {
            entity.ToTable("RlMasterReport");

            entity.Property(e => e.RlMasterReportId).HasColumnName("RlMasterReportID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RlMasterReportItem>(entity =>
        {
            entity.HasKey(e => e.RlMasterReportItemId).HasName("PK__RlMaster__D549D19D6F21FA9D");

            entity.ToTable("RlMasterReportItem");

            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParameterValue)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportId).HasColumnName("RlMasterReportID");
            entity.Property(e => e.RlMasterReportItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SrparamedicRl1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicRL1");
        });

        modelBuilder.Entity<RlTxReport>(entity =>
        {
            entity.HasKey(e => e.RlTxReportNo);

            entity.ToTable("RlTxReport");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PeriodMonthEnd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PeriodMonthStart)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportId).HasColumnName("RlMasterReportID");
        });

        modelBuilder.Entity<RlTxReport12>(entity =>
        {
            entity.HasKey(e => e.RlTxReportNo).HasName("PK_RlTxReport1_2_1");

            entity.ToTable("RlTxReport1_2");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Bor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Bto).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Gdr).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Los).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Ndr).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RataKunjungan).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RataRata).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Toi).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<RlTxReport12Item>(entity =>
        {
            entity.HasKey(e => new { e.PeriodMonth, e.PeriodYear });

            entity.ToTable("RlTxReport12Item");

            entity.Property(e => e.PeriodMonth)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Jtt).HasColumnName("JTt");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport13>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport1_3");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport2>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport2");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport31>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_1");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport310>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_10");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport311>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_11");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport312>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_12");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport313>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_13");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport313b>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_13b");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport314>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_14");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport315>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_15");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport32>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_2");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport33>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_3");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport34>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_4");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport35>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_5");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport36>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_6");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport37>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_7");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport38>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_8");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport39>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport3_9");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport4A>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport4A");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport4Asebab>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport4ASebab");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport4B>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport4B");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport4Bsebab>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport4BSebab");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport51>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport5_1");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport52>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.RlMasterReportItemId });

            entity.ToTable("RlTxReport5_2");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport53>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.DiagnosaId });

            entity.ToTable("RlTxReport5_3");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnosaID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RlTxReport54>(entity =>
        {
            entity.HasKey(e => new { e.RlTxReportNo, e.DiagnosaId });

            entity.ToTable("RlTxReport5_4");

            entity.Property(e => e.RlTxReportNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiagnosaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnosaID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<RoomBpjsBridgingClass>(entity =>
        {
            entity.HasKey(e => new { e.BpjsCode, e.ClassCode }).HasName("PK__RoomBpjs__226F6396DCB62717");

            entity.ToTable("RoomBpjsBridgingClass");

            entity.Property(e => e.BpjsCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClassCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.BpjsName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ClassName)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RunQueryScript>(entity =>
        {
            entity.HasKey(e => e.ScriptId);

            entity.Property(e => e.ScriptId).HasColumnName("ScriptID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Type).HasDefaultValue((short)1);
        });

        modelBuilder.Entity<SalaryComponent>(entity =>
        {
            entity.ToTable("SalaryComponent");

            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.FaktorRuleDisplay)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsAttedanceMatrixId).HasColumnName("IsAttedanceMatrixID");
            entity.Property(e => e.IsKwi).HasColumnName("IsKWI");
            entity.Property(e => e.IsServiceUnitId).HasColumnName("IsServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.MinAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NormalBalance)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NormalBalanceIndirect)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NormalBalanceThr)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NormalBalanceThrIndirect)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SalaryComponentCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalaryComponentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SalaryComponentRoundingId).HasColumnName("SalaryComponentRoundingID");
            entity.Property(e => e.SrdeductionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDeductionType");
            entity.Property(e => e.SrincomeTaxMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncomeTaxMethod");
            entity.Property(e => e.SrjamsostekType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRJamsostekType");
            entity.Property(e => e.SrsalaryCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalaryCategory");
            entity.Property(e => e.SrsalaryComponentGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalaryComponentGroup");
            entity.Property(e => e.SrsalaryType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalaryType");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<SalaryComponentRounding>(entity =>
        {
            entity.ToTable("SalaryComponentRounding");

            entity.Property(e => e.SalaryComponentRoundingId).HasColumnName("SalaryComponentRoundingID");
            entity.Property(e => e.Formula2).HasColumnName("Formula_2");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NearestValue).HasColumnType("money");
            entity.Property(e => e.NominalValue).HasColumnType("money");
            entity.Property(e => e.SalaryComponentRoundingName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SalaryComponentRuleDefinition>(entity =>
        {
            entity.ToTable("SalaryComponentRuleDefinition");

            entity.Property(e => e.SalaryComponentRuleDefinitionId).HasColumnName("SalaryComponentRuleDefinitionID");
            entity.Property(e => e.AttedanceMatrixId).HasColumnName("AttedanceMatrixID");
            entity.Property(e => e.EmployeeGradeId).HasColumnName("EmployeeGradeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NominalAmount).HasColumnType("money");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PercentageAmount).HasColumnType("numeric(6, 2)");
            entity.Property(e => e.PercentageComponentId).HasColumnName("PercentageComponentID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceYear)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SreducationLevelId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevelID");
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
            entity.Property(e => e.SremployeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeType");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<SalaryComponentRuleMatrix>(entity =>
        {
            entity.ToTable("SalaryComponentRuleMatrix");

            entity.Property(e => e.SalaryComponentRuleMatrixId).HasColumnName("SalaryComponentRuleMatrixID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.SalaryRuleComponentId).HasColumnName("SalaryRuleComponentID");
            entity.Property(e => e.SroperandType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROperandType");
        });

        modelBuilder.Entity<SalaryScale>(entity =>
        {
            entity.ToTable("SalaryScale");

            entity.Property(e => e.SalaryScaleId).HasColumnName("SalaryScaleID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.SalaryScaleCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalaryScaleName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SreducationGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationGroup");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.SrprofessionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionGroup");
        });

        modelBuilder.Entity<SalaryScaleFactor>(entity =>
        {
            entity.ToTable("SalaryScaleFactor");

            entity.Property(e => e.SalaryScaleFactorId).HasColumnName("SalaryScaleFactorID");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SalaryScaleId).HasColumnName("SalaryScaleID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<SalaryTemplate>(entity =>
        {
            entity.ToTable("SalaryTemplate");

            entity.Property(e => e.SalaryTemplateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SalaryTemplateID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SalaryTemplateName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SalaryTemplateItem>(entity =>
        {
            entity.HasKey(e => new { e.SalaryTemplateId, e.SalaryComponentId });

            entity.ToTable("SalaryTemplateItem");

            entity.Property(e => e.SalaryTemplateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SalaryTemplateID");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationMaintenanceActivity>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("SanitationMaintenanceActivity");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrworkTradeItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTradeItem");
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationMaintenanceActivitySchedule>(entity =>
        {
            entity.HasKey(e => new { e.SrworkTradeItem, e.ServiceUnitId, e.ScheduleDate }).HasName("PK_SanitationMaintenanceActivitySchedule_1");

            entity.ToTable("SanitationMaintenanceActivitySchedule");

            entity.Property(e => e.SrworkTradeItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTradeItem");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PeriodDate).HasColumnType("datetime");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationMaintenanceActivitySchedulePeriod>(entity =>
        {
            entity.HasKey(e => new { e.SrworkTradeItem, e.ServiceUnitId, e.PeriodYear });

            entity.ToTable("SanitationMaintenanceActivitySchedulePeriod");

            entity.Property(e => e.SrworkTradeItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTradeItem");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationMaintenanceActivitySchedulePeriodDate>(entity =>
        {
            entity.HasKey(e => new { e.SrworkTradeItem, e.ServiceUnitId, e.PeriodYear, e.PeriodDate });

            entity.ToTable("SanitationMaintenanceActivitySchedulePeriodDate");

            entity.Property(e => e.SrworkTradeItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWorkTradeItem");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.PeriodYear)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.PeriodDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationWasteItemBalance>(entity =>
        {
            entity.HasKey(e => e.SrwasteType);

            entity.ToTable("SanitationWasteItemBalance");

            entity.Property(e => e.SrwasteType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWasteType");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationWasteItemMovement>(entity =>
        {
            entity.HasKey(e => e.MovementId);

            entity.ToTable("SanitationWasteItemMovement");

            entity.Property(e => e.MovementId).HasColumnName("MovementID");
            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.InitialQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MovementDate).HasColumnType("datetime");
            entity.Property(e => e.QtyIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyOut).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrwasteType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWasteType");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SanitationWasteTran>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SanitationWasteTransItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SrwasteType });

            entity.ToTable("SanitationWasteTransItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrwasteType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWasteType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<SatuSehatKunjungan>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo);

            entity.ToTable("SatuSehatKunjungan");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EncounterId).HasColumnName("EncounterID");
            entity.Property(e => e.ErrorResponse).IsUnicode(false);
            entity.Property(e => e.KunjunganPostData).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SatuSehatMappingId>(entity =>
        {
            entity.HasKey(e => e.AvicennaId).HasName("PK__SatuSeha__970EC3465025916B");

            entity.ToTable("SatuSehatMappingID");

            entity.Property(e => e.AvicennaId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AvicennaID");
            entity.Property(e => e.MappingType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SatuSehatId)
                .HasMaxLength(128)
                .IsUnicode(false)
                .HasColumnName("SatuSehatID");
        });

        modelBuilder.Entity<SatuSehatResult>(entity =>
        {
            entity.HasKey(e => new { e.EncounterId, e.ResourceType, e.IndexNo }).HasName("PK_SatuSehatResult_1");

            entity.ToTable("SatuSehatResult");

            entity.Property(e => e.EncounterId).HasColumnName("EncounterID");
            entity.Property(e => e.ResourceType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ErrorResponse).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PostData).IsUnicode(false);
            entity.Property(e => e.ResultId).HasColumnName("ResultID");
        });

        modelBuilder.Entity<ScomalertEvent>(entity =>
        {
            entity.HasKey(e => new { e.RuleId, e.MetricId, e.IsInScomasAlert }).HasName("PK__SCOMAler__4CCAAC5661BC14DD");

            entity.ToTable("SCOMAlertEvent");

            entity.Property(e => e.RuleId).HasColumnName("RuleID");
            entity.Property(e => e.MetricId).HasColumnName("MetricID");
            entity.Property(e => e.IsInScomasAlert).HasColumnName("IsInSCOMAsAlert");

            entity.HasOne(d => d.Metric).WithMany(p => p.ScomalertEvents)
                .HasForeignKey(d => d.MetricId)
                .HasConstraintName("fk_SCOMMetric");

            entity.HasOne(d => d.Rule).WithMany(p => p.ScomalertEvents)
                .HasForeignKey(d => d.RuleId)
                .HasConstraintName("fk_RuleID");
        });

        modelBuilder.Entity<ServerActivity>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKServerActivity");

            entity.ToTable("ServerActivity");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.LockList).HasColumnType("image");
            entity.Property(e => e.LockStatistics).HasColumnType("image");
            entity.Property(e => e.SessionList).HasColumnType("image");
            entity.Property(e => e.SystemProcesses).HasColumnType("image");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.ServerActivities)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKServerActivityMonitoredSQLServers");
        });

        modelBuilder.Entity<ServerStatistic>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKServerStatistics");

            entity.HasIndex(e => new { e.SqlserverId, e.UtccollectionDateTime }, "IXServerStatistics");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.ClusterNodeName).HasMaxLength(256);
            entity.Property(e => e.CpuactivityPercentage).HasColumnName("CPUActivityPercentage");
            entity.Property(e => e.CpucreditBalance).HasColumnName("CPUCreditBalance");
            entity.Property(e => e.CpucreditUsage).HasColumnName("CPUCreditUsage");
            entity.Property(e => e.CputimeDelta).HasColumnName("CPUTimeDelta");
            entity.Property(e => e.CputimeRaw).HasColumnName("CPUTimeRaw");
            entity.Property(e => e.DataFileSpaceAllocatedInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DataFileSpaceUsedInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DataIorate).HasColumnName("DataIORate");
            entity.Property(e => e.DataIousage).HasColumnName("DataIOUsage");
            entity.Property(e => e.DtcserviceStatus).HasColumnName("DTCServiceStatus");
            entity.Property(e => e.IoactivityPercentage).HasColumnName("IOActivityPercentage");
            entity.Property(e => e.IotimeDelta).HasColumnName("IOTimeDelta");
            entity.Property(e => e.IotimeRaw).HasColumnName("IOTimeRaw");
            entity.Property(e => e.LogFileSpaceAllocatedInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LogFileSpaceUsedInKilobytes).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LogIorate).HasColumnName("LogIORate");
            entity.Property(e => e.LogIousage).HasColumnName("LogIOUsage");
            entity.Property(e => e.ManagedInstanceStorageLimit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OsStatisticAvailability).HasMaxLength(50);
            entity.Property(e => e.ProcessorType).HasMaxLength(20);
            entity.Property(e => e.RealServerName).HasMaxLength(100);
            entity.Property(e => e.RunningSince).HasColumnType("datetime");
            entity.Property(e => e.ServerHostName).HasMaxLength(50);
            entity.Property(e => e.ServerVersion).HasMaxLength(30);
            entity.Property(e => e.SqlServerEdition).HasMaxLength(30);
            entity.Property(e => e.SqlactiveDirectoryHelperServiceStatus).HasColumnName("SQLActiveDirectoryHelperServiceStatus");
            entity.Property(e => e.SqlbrowserServiceStatus).HasColumnName("SQLBrowserServiceStatus");
            entity.Property(e => e.SystemProcessesConsumingCpu).HasColumnName("SystemProcessesConsumingCPU");
            entity.Property(e => e.TempDbsizeInKilobytes).HasColumnName("TempDBSizeInKilobytes");
            entity.Property(e => e.TempDbsizePercent).HasColumnName("TempDBSizePercent");
            entity.Property(e => e.TempdbGamwaitTimeMilliseconds).HasColumnName("TempdbGAMWaitTimeMilliseconds");
            entity.Property(e => e.TempdbPfswaitTimeMilliseconds).HasColumnName("TempdbPFSWaitTimeMilliseconds");
            entity.Property(e => e.TempdbSgamwaitTimeMilliseconds).HasColumnName("TempdbSGAMWaitTimeMilliseconds");
            entity.Property(e => e.TotalLocks).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UserProcessesConsumingCpu).HasColumnName("UserProcessesConsumingCPU");
            entity.Property(e => e.WindowsVersion).HasMaxLength(128);

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.ServerStatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKServerStatisticsMonitoredSQLServers");
        });

        modelBuilder.Entity<ServiceFee>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("ServiceFee");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeDirektur).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeMedis).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeePemerataan).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeStruktural).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeUnit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RemunId).HasColumnName("RemunID");
        });

        modelBuilder.Entity<ServiceFeeExecutedFormula>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("ServiceFeeExecutedFormula");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.ExecutedFormula).IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceFeeRemunRsucdr>(entity =>
        {
            entity.HasKey(e => e.RemunId);

            entity.ToTable("ServiceFeeRemunRsucdr");

            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BudgetAllocation).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BudgetAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BudgetPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeductionAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DischargeDateFrom).HasColumnType("datetime");
            entity.Property(e => e.DischargeDateTo).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsBpjs).HasColumnName("IsBPJS");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RemunNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TotalFeeDirektur).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalFeeMedis).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalFeeMedisIgd).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalFeePemerataan).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalFeeStruktural).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalFeeUnit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceFeeRemunRsucdrDeduction>(entity =>
        {
            entity.HasKey(e => new { e.RemunId, e.SrremunDeduction });

            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.SrremunDeduction)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRRemunDeduction");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceFeeRemunRsucdrInvoice>(entity =>
        {
            entity.HasKey(e => new { e.RemunId, e.InvoiceNo });

            entity.Property(e => e.RemunId).HasColumnName("RemunID");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceFeeRsucdr>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("ServiceFeeRsucdr");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FeeDirektur).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeMedis).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeePemerataan).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeStruktural).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FeeUnit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RemunId).HasColumnName("RemunID");
        });

        modelBuilder.Entity<ServiceFeeSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ServiceF__3214EC0765D4A8BA");

            entity.ToTable("ServiceFeeSetting");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.FormulaDirektur)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormulaMedis)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormulaPemerataan)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormulaStruktural)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormulaUnit)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrguarantorType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorType");
            entity.Property(e => e.SritemConditionRuleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemConditionRuleType");
            entity.Property(e => e.SrparamedicStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicStatus");
            entity.Property(e => e.Srprocedure)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedure");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.Srspecialty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpecialty");
            entity.Property(e => e.SrtariffType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffType");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
        });

        modelBuilder.Entity<ServiceRoom>(entity =>
        {
            entity.HasKey(e => e.RoomId).HasName("PK_ServiceRoom_1");

            entity.ToTable("ServiceRoom");

            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RoomID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsShowOnBookingOt).HasColumnName("IsShowOnBookingOT");
            entity.Property(e => e.ItemBookedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemBookedID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID1");
            entity.Property(e => e.ParamedicId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID2");
            entity.Property(e => e.RoomName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.Srfloor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFloor");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.TariffDiscountForRoomIn).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ServiceRoomAutoBillItem>(entity =>
        {
            entity.HasKey(e => new { e.RoomId, e.ItemId });

            entity.ToTable("ServiceRoomAutoBillItem");

            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<ServiceRoomImage>(entity =>
        {
            entity.HasKey(e => new { e.RoomId, e.SeqNo }).HasName("PK__ServiceR__F52986510F508CBD");

            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.Photo).HasColumnType("image");
        });

        modelBuilder.Entity<ServiceUnit>(entity =>
        {
            entity.HasKey(e => e.ServiceUnitId).HasName("PK_ServiceUnit_1");

            entity.ToTable("ServiceUnit");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.CustomDisplay)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DefaultChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DefaultChargeClassID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.Email)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsDispensaryUnit).HasDefaultValue(false);
            entity.Property(e => e.IsPurchasingUnit).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationPharmacyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationPharmacyID");
            entity.Property(e => e.LocationPorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationPorID");
            entity.Property(e => e.MedicalFileFolderColor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.QueueCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.QueueName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceUnitOfficer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceUnitPharmacyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitPharmacyID");
            entity.Property(e => e.ServiceUnitPorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitPorID");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SoundFilePath)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SrassessmentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssessmentType");
            entity.Property(e => e.Srbuilding)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBuilding");
            entity.Property(e => e.SrcardexMonitoring)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardexMonitoring");
            entity.Property(e => e.Srclassification)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SRClassification");
            entity.Property(e => e.SrclassificationRoom)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SRClassificationRoom");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrinpatientClassificationUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRInpatientClassificationUnit");
            entity.Property(e => e.SrqueueingLocationPoli)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRQueueingLocation_Poli");
            entity.Property(e => e.SrqueueingLocationReg)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRQueueingLocation_Reg");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.SrserviceUnitGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRServiceUnitGroup");

            entity.HasOne(d => d.Department).WithMany(p => p.ServiceUnits)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefServiceUnitToDepartment");
        });

        modelBuilder.Entity<ServiceUnitAssessmentType>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.SrassessmentType });

            entity.ToTable("ServiceUnitAssessmentType");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrassessmentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssessmentType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitAutoBillItem>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ItemId }).HasName("PK_ServiceUnitAutoBillItem_1");

            entity.ToTable("ServiceUnitAutoBillItem");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.GenerateOnClassIds)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("GenerateOnClassIDs");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsGenerateOnRegistration).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<ServiceUnitBooking>(entity =>
        {
            entity.HasKey(e => e.BookingNo);

            entity.ToTable("ServiceUnitBooking");

            entity.HasIndex(e => new { e.IsExtendedSurgery, e.IsVoid, e.IsApproved, e.RegistrationNo }, "_dta_index_ServiceUnitBooking_13_2068202418__K39_K10_K9_K7_4_20_25_38");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsExtendedSurgery, e.ParamedicIdanestesi, e.ServiceUnitId }, "_dta_index_ServiceUnitBooking_13_2068202418__K7_K39_K20_K4_38");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsExtendedSurgery, e.AssistantIdanestesi, e.ServiceUnitId }, "_dta_index_ServiceUnitBooking_13_2068202418__K7_K39_K25_K4_38");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsExtendedSurgery, e.ParamedicId, e.IsVoid, e.IsApproved }, "_dta_index_ServiceUnitBooking_13_2068202418__K7_K39_K8_K10_K9_4_38");

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AnestesyNotes).IsUnicode(false);
            entity.Property(e => e.AnesthesiaByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AnesthesiaByUserID");
            entity.Property(e => e.AnesthesiaDateTime).HasColumnType("datetime");
            entity.Property(e => e.AnesthesiologistSign).HasColumnType("image");
            entity.Property(e => e.ArrivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.AssistantId1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID1");
            entity.Property(e => e.AssistantId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID2");
            entity.Property(e => e.AssistantId3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID3");
            entity.Property(e => e.AssistantId4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID4");
            entity.Property(e => e.AssistantId5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantID5");
            entity.Property(e => e.AssistantIdanestesi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDAnestesi");
            entity.Property(e => e.AssistantIdinstrumentator)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDInstrumentator");
            entity.Property(e => e.AssistantIdinstrumentator2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDInstrumentator2");
            entity.Property(e => e.AssistantIdinstrumentator3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDInstrumentator3");
            entity.Property(e => e.AssistantIdinstrumentator4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDInstrumentator4");
            entity.Property(e => e.AssistantIdinstrumentator5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AssistantIDInstrumentator5");
            entity.Property(e => e.BookingDateTimeFrom).HasColumnType("datetime");
            entity.Property(e => e.BookingDateTimeTo).HasColumnType("datetime");
            entity.Property(e => e.Diagnose)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.IncisionDateTime).HasColumnType("datetime");
            entity.Property(e => e.Instrumentator1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Instrumentator2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Instrumentator3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Instrumentator4)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Instrumentator5)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MoveToTheWardByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MoveToTheWardByUserID");
            entity.Property(e => e.MoveToTheWardDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OperatingNotes).IsUnicode(false);
            entity.Property(e => e.OperationType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaDate).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicId2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID2");
            entity.Property(e => e.ParamedicId3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID3");
            entity.Property(e => e.ParamedicId4)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID4");
            entity.Property(e => e.ParamedicIdanestesi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicIDAnestesi");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PostDiagnosis)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostSurgeryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PostSurgeryByUserID");
            entity.Property(e => e.PostSurgeryDateTime).HasColumnType("datetime");
            entity.Property(e => e.PreSurgeryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PreSurgeryByUserID");
            entity.Property(e => e.PreSurgeryDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProcedureChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureChargeClassID");
            entity.Property(e => e.RealizationDateTimeFrom).HasColumnType("datetime");
            entity.Property(e => e.RealizationDateTimeTo).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Resident)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SourceOfTissue)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SranestesiPlan)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAnestesiPlan");
            entity.Property(e => e.Srindication)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIndication");
            entity.Property(e => e.Srprocedure1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedure1");
            entity.Property(e => e.Srprocedure2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedure2");
            entity.Property(e => e.SrprocedureCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureCategory");
            entity.Property(e => e.SrprocedureDiagnoseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProcedureDiagnoseType");
            entity.Property(e => e.SurgeryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SurgeryByUserID");
            entity.Property(e => e.SurgeryDateTime).HasColumnType("datetime");
            entity.Property(e => e.ValidateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidateByUserID");
            entity.Property(e => e.ValidateDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidReason)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Paramedic).WithMany(p => p.ServiceUnitBookings)
                .HasForeignKey(d => d.ParamedicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceUnitBooking_Paramedic");

            entity.HasOne(d => d.Room).WithMany(p => p.ServiceUnitBookings)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceUnitBooking_ServiceRoom");

            entity.HasOne(d => d.ServiceUnit).WithMany(p => p.ServiceUnitBookings)
                .HasForeignKey(d => d.ServiceUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceUnitBooking_ServiceUnit");
        });

        modelBuilder.Entity<ServiceUnitBookingBodyImage>(entity =>
        {
            entity.HasKey(e => new { e.BookingNo, e.OpNotesSeqNo, e.BodyId });

            entity.ToTable("ServiceUnitBookingBodyImage");

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OpNotesSeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.BodyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BodyID");
            entity.Property(e => e.BodyImage).HasColumnType("image");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitBookingForm>(entity =>
        {
            entity.HasKey(e => new { e.BookingNo, e.QuestionFormId });

            entity.ToTable("ServiceUnitBookingForm");

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QuestionFormId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("QuestionFormID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceUnitBookingOperatingNote>(entity =>
        {
            entity.HasKey(e => new { e.BookingNo, e.OpNotesSeqNo });

            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OpNotesSeqNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocalistStatus).HasColumnType("image");
            entity.Property(e => e.OperatingNotes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PostSurgeryInstructions).IsUnicode(false);
            entity.Property(e => e.Regio)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceUnitBookingSmfMappingTmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ServiceUnitBookingSmfMappingTmp");

            entity.Property(e => e.SmfId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SurgerySpecialtyId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SurgerySpecialtyID");
        });

        modelBuilder.Entity<ServiceUnitBridging>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.SrbridgingType, e.BridgingId });

            entity.ToTable("ServiceUnitBridging");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.BridgingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BridgingID");
            entity.Property(e => e.BridgingName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitBridgingDefault>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.SrbridgingType, e.BridgingSubSpesialisId }).HasName("PK__ServiceU__645B1762243FB421");

            entity.ToTable("ServiceUnitBridgingDefault");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrbridgingType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("BridgingType-001")
                .HasColumnName("SRBridgingType");
            entity.Property(e => e.BridgingSubSpesialisId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BridgingSubSpesialisID");
            entity.Property(e => e.BridgingName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BridgingPoliId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BridgingPoliID");
            entity.Property(e => e.BridgingSubSpesialisName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(false);
            entity.Property(e => e.IsDefault).HasDefaultValue(false);
        });

        modelBuilder.Entity<ServiceUnitClassMealSetFoodGroupMenuSetting>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ClassId, e.SrmealSet, e.SrfoodGroup1 });

            entity.ToTable("ServiceUnitClassMealSetFoodGroupMenuSetting");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.SrfoodGroup1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFoodGroup1");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitClassMealSetMenuSetting>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ClassId, e.SrmealSet });

            entity.ToTable("ServiceUnitClassMealSetMenuSetting");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.SrmealSet)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMealSet");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitClassMenuExtraSetting>(entity =>
        {
            entity.HasKey(e => e.ServiceUnitId).HasName("PK_ServiceUnitClassMenuExtraSetting_1");

            entity.ToTable("ServiceUnitClassMenuExtraSetting");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MenuId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MenuID");
        });

        modelBuilder.Entity<ServiceUnitClassMenuSetting>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ClassId });

            entity.ToTable("ServiceUnitClassMenuSetting");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitImageTemplate>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ImageTemplateId });

            entity.ToTable("ServiceUnitImageTemplate");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ImageTemplateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ImageTemplateID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitItemService>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ItemId }).HasName("PK_ServiceUnitItem_1");

            entity.ToTable("ServiceUnitItemService");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.IdiCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitItemServiceClass>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ItemId, e.ClassId, e.TariffComponentId });

            entity.ToTable("ServiceUnitItemServiceClass");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitItemServiceCompMapping>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ItemId, e.TariffComponentId, e.SrregistrationType, e.SrguarantorIncomeGroup });

            entity.ToTable("ServiceUnitItemServiceCompMapping");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.SrguarantorIncomeGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("001")
                .HasColumnName("SRGuarantorIncomeGroup");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitItemType>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.SritemType });

            entity.ToTable("ServiceUnitItemType");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitLocation>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.LocationId });

            entity.ToTable("ServiceUnitLocation");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitNotOpr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ServiceUnit_NotOPR");

            entity.Property(e => e.ServiceUnitName).HasMaxLength(500);
            entity.Property(e => e.SeviceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceUnitParamedic>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId }).HasName("PK_ServiceUnitParamedic_1");

            entity.ToTable("ServiceUnitParamedic");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.DefaultRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DefaultRoomID");
            entity.Property(e => e.IsAcceptBpjs).HasColumnName("IsAcceptBPJS");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitProductAccountMapping>(entity =>
        {
            entity.HasKey(e => new { e.LocationId, e.ServiceUnitId, e.ProductAccountId, e.SrregistrationType });

            entity.ToTable("ServiceUnitProductAccountMapping");

            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProductAccountId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.ChartOfAccountIdCogs).HasColumnName("ChartOfAccountIdCOGS");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SubledgerIdCogs).HasColumnName("SubledgerIdCOGS");
        });

        modelBuilder.Entity<ServiceUnitQue>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.ParamedicId, e.QueDate, e.QueNo });

            entity.ToTable("ServiceUnitQue");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.QueDate).HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ServiceRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceRoomID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.ServiceUnitQues)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefServiceUnitQuetoRegistration");
        });

        modelBuilder.Entity<ServiceUnitSchedule>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.DayOfWeek });

            entity.ToTable("ServiceUnitSchedule");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.EndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ServiceUnitTransactionCode>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.SrtransactionCode });

            entity.ToTable("ServiceUnitTransactionCode");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrtransactionCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTransactionCode");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitVisitType>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.VisitTypeId }).HasName("PK_ServiceUnitVisitType_1");

            entity.ToTable("ServiceUnitVisitType");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ServiceUnitVitalSign>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.VitalSignId });

            entity.ToTable("ServiceUnitVitalSign");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.VitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VitalSignID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SettingRopHistory>(entity =>
        {
            entity.HasKey(e => e.RopHistoryId);

            entity.ToTable("SettingRopHistory");

            entity.Property(e => e.RopHistoryId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RopHistoryID");
            entity.Property(e => e.FromMaximum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.FromMinimum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.RopHistoryDateTime).HasColumnType("datetime");
            entity.Property(e => e.ToMaximum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ToMinimum).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<SeveranceTax>(entity =>
        {
            entity.ToTable("SeveranceTax");

            entity.Property(e => e.SeveranceTaxId).HasColumnName("SeveranceTaxID");
            entity.Property(e => e.AmountOfDeduction).HasColumnType("money");
            entity.Property(e => e.IsNpwp).HasColumnName("IsNPWP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LowerLimit).HasColumnType("money");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TaxRate).HasColumnType("numeric(4, 2)");
            entity.Property(e => e.UpperLimit).HasColumnType("money");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<Sheet1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Sheet1");

            entity.Property(e => e.Nama)
                .HasMaxLength(255)
                .HasColumnName("nama");
            entity.Property(e => e.No)
                .HasMaxLength(255)
                .HasColumnName("no");
            entity.Property(e => e.Norek)
                .HasMaxLength(255)
                .HasColumnName("norek");
            entity.Property(e => e.Npwp)
                .HasMaxLength(255)
                .HasColumnName("npwp");
        });

        modelBuilder.Entity<Sheet1Absen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Sheet1Absen$");

            entity.Property(e => e.Employeename)
                .HasMaxLength(255)
                .HasColumnName("employeename");
            entity.Property(e => e.Employeenumber)
                .HasMaxLength(255)
                .HasColumnName("employeenumber");
            entity.Property(e => e.Nama)
                .HasMaxLength(255)
                .HasColumnName("Nama ");
            entity.Property(e => e.Personid)
                .HasMaxLength(255)
                .HasColumnName("personid");
            entity.Property(e => e.PinAbsen)
                .HasMaxLength(255)
                .HasColumnName("PIN Absen");
        });

        modelBuilder.Entity<SickLetter>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.ParamedicId, e.SrletterType });

            entity.ToTable("SickLetter");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrletterType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("SL")
                .HasColumnName("SRLetterType");
            entity.Property(e => e.EndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<Smf>(entity =>
        {
            entity.ToTable("Smf");

            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SmfBackcolor)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SmfName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.SrassessmentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAssessmentType");
            entity.Property(e => e.SrparamedicFeeCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeCaseType");
        });

        modelBuilder.Entity<SmfDiagnose>(entity =>
        {
            entity.HasKey(e => new { e.SmfId, e.DiagnoseId });

            entity.ToTable("SmfDiagnose");

            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.DiagnoseId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DiagnoseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SmfItemService>(entity =>
        {
            entity.HasKey(e => new { e.SmfId, e.ItemId });

            entity.ToTable("SmfItemService");

            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Snack>(entity =>
        {
            entity.ToTable("Snack");

            entity.Property(e => e.SnackId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SnackID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SnackName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SnackOrder>(entity =>
        {
            entity.HasKey(e => e.SnackOrderNo);

            entity.ToTable("SnackOrder");

            entity.Property(e => e.SnackOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SnackOrderDate).HasColumnType("datetime");
            entity.Property(e => e.SnackOrderForDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SnackOrderItem>(entity =>
        {
            entity.HasKey(e => new { e.SnackOrderNo, e.SnackId });

            entity.ToTable("SnackOrderItem");

            entity.Property(e => e.SnackOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SnackId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SnackID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.QtyShift1).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyShift2).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyShift3).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<SpectaclePrescription>(entity =>
        {
            entity.HasKey(e => e.PrescriptionNo).HasName("PK_SpactaclePrescription");

            entity.ToTable("SpectaclePrescription");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DeliverDateTime).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrlensType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLensType");
            entity.Property(e => e.SrprescriptionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPrescriptionType");
            entity.Property(e => e.SrspectacleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpectacleType");
        });

        modelBuilder.Entity<SpectaclePrescriptionHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.PrescriptionNo }).HasName("PK_SpactaclePrescriptionHistory");

            entity.ToTable("SpectaclePrescriptionHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DeliverDateTime).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrlensType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRLensType");
            entity.Property(e => e.SrprescriptionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPrescriptionType");
            entity.Property(e => e.SrspectacleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpectacleType");
        });

        modelBuilder.Entity<SpectaclePrescriptionItem>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SequenceNo }).HasName("PK_SpactaclePrescriptionItem");

            entity.ToTable("SpectaclePrescriptionItem");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Bridge)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FrameA)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FrameB)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FrameDia)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InitialPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OdAdd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdAxis)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdBase)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdCyl)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdMpd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdPrism)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdPv)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdSh)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdSphere)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsAdd)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OsAxis)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsBase)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsCyl)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsMpd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsPrism)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsPv)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsSh)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsSphere)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<SpectaclePrescriptionItemHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.PrescriptionNo, e.SequenceNo }).HasName("PK_SpactaclePrescriptionItemHistory");

            entity.ToTable("SpectaclePrescriptionItemHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Bridge)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FrameA)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FrameB)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FrameDia)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InitialPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OdAdd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdAxis)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdBase)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdCyl)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdMpd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdPrism)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdPv)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdSh)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OdSphere)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsAdd)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OsAxis)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsBase)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsCyl)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsMpd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsPrism)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsPv)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsSh)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OsSphere)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<SqlqueryPlan>(entity =>
        {
            entity.HasKey(e => e.PlanId).HasName("PKSQLQueryPlans");

            entity.ToTable("SQLQueryPlans");

            entity.Property(e => e.PlanId).HasColumnName("PlanID");
            entity.Property(e => e.IsActualPlan).HasDefaultValue(true);
            entity.Property(e => e.PlanXml)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("PlanXML");
            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");

            entity.HasOne(d => d.Sqlstatement).WithMany(p => p.SqlqueryPlans)
                .HasForeignKey(d => d.SqlstatementId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKSQLQueryPlansSQLStatementID");
        });

        modelBuilder.Entity<SqlqueryPlansOverflow>(entity =>
        {
            entity.HasKey(e => e.PlanId).HasName("PKSQLQueryPlansOverflow");

            entity.ToTable("SQLQueryPlansOverflow");

            entity.Property(e => e.PlanId)
                .ValueGeneratedNever()
                .HasColumnName("PlanID");
            entity.Property(e => e.PlanXmloverflow).HasColumnName("PlanXMLOverflow");

            entity.HasOne(d => d.Plan).WithOne(p => p.SqlqueryPlansOverflow)
                .HasForeignKey<SqlqueryPlansOverflow>(d => d.PlanId)
                .HasConstraintName("PKSQLQueryPlansOverflowPlanID");
        });

        modelBuilder.Entity<SqlsafeConnection>(entity =>
        {
            entity.HasKey(e => e.RepositoryId).HasName("PKSQLsafeConnections");

            entity.ToTable("SQLsafeConnections");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.EncryptedPassword).HasMaxLength(128);
            entity.Property(e => e.FriendlyName).HasMaxLength(256);
            entity.Property(e => e.InstanceName).HasMaxLength(256);
            entity.Property(e => e.RegisteredDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(128);
        });

        modelBuilder.Entity<SqlserverDatabaseName>(entity =>
        {
            entity.HasKey(e => e.DatabaseId).HasName("PKSQLServerDatabaseNames");

            entity.ToTable("SQLServerDatabaseNames");

            entity.HasIndex(e => new { e.SqlserverId, e.DatabaseName }, "IXSQLServerDatabaseNameServerIDDBNameInclDBID");

            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.CreationDateTime)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.DatabaseName).HasMaxLength(255);
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.SqlserverDatabaseNames)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKSQLServerDatabaseNamesMonitoredSQLServers");
        });

        modelBuilder.Entity<SqlserverTableName>(entity =>
        {
            entity.HasKey(e => e.TableId).HasName("PKSQLServerTableNames");

            entity.ToTable("SQLServerTableNames");

            entity.HasIndex(e => new { e.DatabaseId, e.TableName }, "IXSQLServerTableNames1");

            entity.Property(e => e.TableId).HasColumnName("TableID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.SchemaName).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);

            entity.HasOne(d => d.Database).WithMany(p => p.SqlserverTableNames)
                .HasForeignKey(d => d.DatabaseId)
                .HasConstraintName("FKSQLServerTableNamesSQLServerDatabaseNames");
        });

        modelBuilder.Entity<SqlserverVersion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SQLServerVersions");

            entity.Property(e => e.ServicePackName).HasMaxLength(5);
            entity.Property(e => e.VersionName).HasMaxLength(30);
        });

        modelBuilder.Entity<Sqlsignature>(entity =>
        {
            entity.HasKey(e => e.SqlsignatureId).HasName("PKSQLSignatures");

            entity.ToTable("SQLSignatures");

            entity.HasIndex(e => e.SqlstatementExampleId, "IXSignatureExample");

            entity.HasIndex(e => e.SqlsignatureHash, "UKSQLSignatureHash").IsUnique();

            entity.Property(e => e.SqlsignatureId).HasColumnName("SQLSignatureID");
            entity.Property(e => e.Sqlsignature1)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SQLSignature");
            entity.Property(e => e.SqlsignatureHash)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SQLSignatureHash");
            entity.Property(e => e.SqlstatementExampleId).HasColumnName("SQLStatementExampleID");

            entity.HasOne(d => d.SqlstatementExample).WithMany(p => p.Sqlsignatures)
                .HasForeignKey(d => d.SqlstatementExampleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FKSQLSignaturesSQLStatements");
        });

        modelBuilder.Entity<SqlsignaturesOverflow>(entity =>
        {
            entity.HasKey(e => e.SqlsignatureId).HasName("PKSQLSignaturesUnicode");

            entity.ToTable("SQLSignaturesOverflow");

            entity.Property(e => e.SqlsignatureId)
                .ValueGeneratedNever()
                .HasColumnName("SQLSignatureID");
            entity.Property(e => e.SqlsignatureOverflow).HasColumnName("SQLSignatureOverflow");

            entity.HasOne(d => d.Sqlsignature).WithOne(p => p.SqlsignaturesOverflow)
                .HasForeignKey<SqlsignaturesOverflow>(d => d.SqlsignatureId)
                .HasConstraintName("FKSQLSignaturesUnicodeSQLSignatures");
        });

        modelBuilder.Entity<Sqlstatement>(entity =>
        {
            entity.HasKey(e => e.SqlstatementId).HasName("PKSQLStatements");

            entity.ToTable("SQLStatements");

            entity.HasIndex(e => e.SqlstatementHash, "UKSQLStatementHash").IsUnique();

            entity.Property(e => e.SqlstatementId).HasColumnName("SQLStatementID");
            entity.Property(e => e.Sqlstatement1)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SQLStatement");
            entity.Property(e => e.SqlstatementHash)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SQLStatementHash");
        });

        modelBuilder.Entity<SqlstatementsOverflow>(entity =>
        {
            entity.HasKey(e => e.SqlstatementId).HasName("PKSQLStatementsUnicode");

            entity.ToTable("SQLStatementsOverflow");

            entity.Property(e => e.SqlstatementId)
                .ValueGeneratedNever()
                .HasColumnName("SQLStatementID");
            entity.Property(e => e.SqlstatementOverflow).HasColumnName("SQLStatementOverflow");

            entity.HasOne(d => d.Sqlstatement).WithOne(p => p.SqlstatementsOverflow)
                .HasForeignKey<SqlstatementsOverflow>(d => d.SqlstatementId)
                .HasConstraintName("FKSQLStatementsUnicodeSQLStatements");
        });

        modelBuilder.Entity<StageDatabaseStatistic>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("stageDatabaseStatistics");

            entity.HasIndex(e => e.SourceId, "IXSourceIDIncServerDBNameSystemCreate");

            entity.HasIndex(e => new { e.SourceId, e.ServerId, e.UtccollectionDateTime }, "IXSourceServerIDUTCCollectionTime");

            entity.Property(e => e.AverageDataIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AverageDataIO");
            entity.Property(e => e.AverageLogIo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AverageLogIO");
            entity.Property(e => e.AvgCpuPercent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AvgDataIoPercent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AvgLogWritePercent).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AzureCloudAllocatedMemory).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AzureCloudStorageLimit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AzureCloudUsedMemory).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.BytesRead).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.BytesWritten).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.DatabaseAverageMemoryUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DatabaseCreateDate).HasColumnType("datetime");
            entity.Property(e => e.DatabaseName).HasMaxLength(255);
            entity.Property(e => e.ElasticPool).HasMaxLength(255);
            entity.Property(e => e.InMemoryStorageUsage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IoStallMs)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IoStallMS");
            entity.Property(e => e.LastBackupDateTime).HasColumnType("datetime");
            entity.Property(e => e.MaxSession).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MaxWorker).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberReads).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.NumberWrites).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
            entity.Property(e => e.SourceId).HasColumnName("SourceID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
        });

        modelBuilder.Entity<StandardSalary>(entity =>
        {
            entity.ToTable("StandardSalary");

            entity.Property(e => e.StandardSalaryId).HasColumnName("StandardSalaryID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<StandardSalaryFaktor>(entity =>
        {
            entity.ToTable("StandardSalaryFaktor");

            entity.Property(e => e.StandardSalaryFaktorId).HasColumnName("StandardSalaryFaktorID");
            entity.Property(e => e.AmountSalary).HasColumnType("money");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.StandardSalaryId).HasColumnName("StandardSalaryID");
        });

        modelBuilder.Entity<StandartSelectionProse>(entity =>
        {
            entity.HasKey(e => e.StandartSelectionProsesId);

            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ProsesName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrresultType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResultType");
        });

        modelBuilder.Entity<StructuralBenefit>(entity =>
        {
            entity.HasKey(e => new { e.OrganizationUnitId, e.PositionId, e.ValidFrom });

            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SubLedger>(entity =>
        {
            entity.HasIndex(e => e.GroupId, "_idx_GroupId");

            entity.HasIndex(e => e.Description, "_idx_SLDesc");

            entity.HasIndex(e => e.SubLedgerName, "_idx_SLName");

            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.HoDescription).HasMaxLength(255);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SubLedgerName).HasMaxLength(50);
            entity.Property(e => e.TempId).HasColumnName("tempID");

            entity.HasOne(d => d.Group).WithMany(p => p.SubLedgers)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubLedgers_SubLedgerGroups");
        });

        modelBuilder.Entity<SubLedgerBalance>(entity =>
        {
            entity.HasIndex(e => e.ChartOfAccountId, "_idx_CoaID");

            entity.HasIndex(e => e.SubLedgerId, "_idx_SLID");

            entity.HasIndex(e => new { e.Year, e.Month, e.SubLedgerId, e.ChartOfAccountId }, "_idx_Y_M_SLID_COAID");

            entity.HasIndex(e => new { e.Year, e.Month }, "_idx_YearMonth");

            entity.Property(e => e.CreditAmount).HasColumnType("money");
            entity.Property(e => e.DebitAmount).HasColumnType("money");
            entity.Property(e => e.FinalBalance).HasColumnType("money");
            entity.Property(e => e.InitialBalance).HasColumnType("money");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ChartOfAccount).WithMany(p => p.SubLedgerBalances)
                .HasForeignKey(d => d.ChartOfAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubLedgerBalances_ChartOfAccounts");

            entity.HasOne(d => d.SubLedger).WithMany(p => p.SubLedgerBalances)
                .HasForeignKey(d => d.SubLedgerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubLedgerBalances_SubLedgers");
        });

        modelBuilder.Entity<SubLedgerGroup>(entity =>
        {
            entity.Property(e => e.CreatedBy).HasMaxLength(25);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.GroupCode).HasMaxLength(10);
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(25)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TempId).HasColumnName("tempID");
        });

        modelBuilder.Entity<SubSpecialty>(entity =>
        {
            entity.ToTable("SubSpecialty");

            entity.Property(e => e.SubSpecialtyId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SubSpecialtyID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Srspecialty)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSpecialty");
            entity.Property(e => e.SubSpecialtyName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SukuRefDinke>(entity =>
        {
            entity.HasKey(e => e.SukuId);

            entity.Property(e => e.SukuId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SukuID");
            entity.Property(e => e.Srethnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREthnic");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.SupplierId).IsClustered(false);

            entity.ToTable("Supplier");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SupplierID");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Branch)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ChartOfAccountIdAp).HasColumnName("ChartOfAccountIdAP");
            entity.Property(e => e.ChartOfAccountIdApcost).HasColumnName("ChartOfAccountIdAPCost");
            entity.Property(e => e.ChartOfAccountIdApinProcess).HasColumnName("ChartOfAccountIdAPInProcess");
            entity.Property(e => e.ChartOfAccountIdApnonMedic).HasColumnName("ChartOfAccountIdAPNonMedic");
            entity.Property(e => e.ChartOfAccountIdAptemporary).HasColumnName("ChartOfAccountIdAPTemporary");
            entity.Property(e => e.ChartOfAccountIdAptemporaryNonMedic).HasColumnName("ChartOfAccountIdAPTemporaryNonMedic");
            entity.Property(e => e.ChartOfAccountIdPoreturn).HasColumnName("ChartOfAccountIdPOReturn");
            entity.Property(e => e.ChartOfAccountIdPoreturnNonMedic).HasColumnName("ChartOfAccountIdPOReturnNonMedic");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContractEnd)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ContractNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ContractStart)
                .HasDefaultValueSql("(CONVERT([smalldatetime],'19000101',(105)))")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ContractSummary)
                .HasDefaultValue("")
                .HasColumnType("text");
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CreditLimit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsPkp).HasColumnName("IsPKP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PbflicenseNo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PBFLicenseNo");
            entity.Property(e => e.PbflicenseValidDate)
                .HasColumnType("datetime")
                .HasColumnName("PBFLicenseValidDate");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ShortName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SrapAgingDateType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRApAgingDateType");
            entity.Property(e => e.SrsupplierType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRSupplierType");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SubledgerIdAp).HasColumnName("SubledgerIdAP");
            entity.Property(e => e.SubledgerIdApcost).HasColumnName("SubledgerIdAPCost");
            entity.Property(e => e.SubledgerIdApinProcess).HasColumnName("SubledgerIdAPInProcess");
            entity.Property(e => e.SubledgerIdApnonMedic).HasColumnName("SubledgerIdAPNonMedic");
            entity.Property(e => e.SubledgerIdAptemporary).HasColumnName("SubledgerIdAPTemporary");
            entity.Property(e => e.SubledgerIdAptemporaryNonMedic).HasColumnName("SubledgerIdAPTemporaryNonMedic");
            entity.Property(e => e.SubledgerIdPoreturn).HasColumnName("SubledgerIdPOReturn");
            entity.Property(e => e.SubledgerIdPoreturnNonMedic).HasColumnName("SubledgerIdPOReturnNonMedic");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TaxPercentage).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.TaxRegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TermOfPayment).HasColumnType("decimal(5, 0)");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<SupplierBank>(entity =>
        {
            entity.HasKey(e => new { e.SupplierId, e.BankAccountNo });

            entity.ToTable("SupplierBank");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SupplierContract>(entity =>
        {
            entity.HasKey(e => e.TransactionNo);

            entity.ToTable("SupplierContract");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContractAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ContractEnd).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractStart).HasColumnType("datetime");
            entity.Property(e => e.ContractSummary).HasColumnType("text");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PurchaseAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierContracts)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplierContract_Supplier");
        });

        modelBuilder.Entity<SupplierContractItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("SupplierContractItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PurchaseDiscount1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PurchaseDiscount2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPurchaseUnit");

            entity.HasOne(d => d.TransactionNoNavigation).WithMany(p => p.SupplierContractItems)
                .HasForeignKey(d => d.TransactionNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplierContractItem_SupplierContract");
        });

        modelBuilder.Entity<SupplierFabric>(entity =>
        {
            entity.HasKey(e => new { e.FabricId, e.SupplierId }).IsClustered(false);

            entity.ToTable("SupplierFabric");

            entity.Property(e => e.FabricId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FabricID");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SupplierID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Fabric).WithMany(p => p.SupplierFabrics)
                .HasForeignKey(d => d.FabricId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefFabricToSupplierFabric");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierFabrics)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SupplierFabric_Supplier");
        });

        modelBuilder.Entity<SupplierItem>(entity =>
        {
            entity.HasKey(e => new { e.SupplierId, e.ItemId })
                .HasName("PK_ItemSupplier")
                .IsClustered(false);

            entity.ToTable("SupplierItem");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SupplierID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.DrugDistributionLicenseNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PurchaseDiscount1).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.PurchaseDiscount2).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPurchaseUnit");
        });

        modelBuilder.Entity<SupplierLocation>(entity =>
        {
            entity.HasKey(e => new { e.SupplierId, e.LocationId });

            entity.ToTable("SupplierLocation");

            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SurgicalPackage>(entity =>
        {
            entity.HasKey(e => e.PackageId);

            entity.ToTable("SurgicalPackage");

            entity.Property(e => e.PackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PackageID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PackageName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TabelIdi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TabelIDI");

            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("Kode IDI");
            entity.Property(e => e.NamaPelayanan)
                .HasMaxLength(255)
                .HasColumnName("Nama Pelayanan");
            entity.Property(e => e.NamaTindakanIdi)
                .HasMaxLength(255)
                .HasColumnName("Nama Tindakan IDI");
            entity.Property(e => e.Rvu).HasColumnName("RVU");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.Smf)
                .HasMaxLength(255)
                .HasColumnName("SMF");
        });

        modelBuilder.Entity<TableGrowth>(entity =>
        {
            entity.HasKey(e => new { e.TableId, e.UtccollectionDateTime }).HasName("PKTableGrowth");

            entity.ToTable("TableGrowth");

            entity.Property(e => e.TableId).HasColumnName("TableID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.TimeDeltaInSeconds).HasDefaultValue(86400.0);

            entity.HasOne(d => d.Table).WithMany(p => p.TableGrowths)
                .HasForeignKey(d => d.TableId)
                .HasConstraintName("FKTableGrowth");
        });

        modelBuilder.Entity<TableGrowthAggregation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TableGrowthAggregation");

            entity.Property(e => e.AggregatedTableId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AggregatedTableID");
            entity.Property(e => e.MaxUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MaxUTCCollectionDateTime");
            entity.Property(e => e.MinUtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("MinUTCCollectionDateTime");
            entity.Property(e => e.TableId).HasColumnName("TableID");
        });

        modelBuilder.Entity<TableReorganization>(entity =>
        {
            entity.HasKey(e => new { e.TableId, e.UtccollectionDateTime }).HasName("PKTableReorganization");

            entity.ToTable("TableReorganization");

            entity.Property(e => e.TableId).HasColumnName("TableID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.TimeDeltaInSeconds).HasDefaultValue(86400.0);

            entity.HasOne(d => d.Table).WithMany(p => p.TableReorganizations)
                .HasForeignKey(d => d.TableId)
                .HasConstraintName("FKTableReorganization");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PKTags");

            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<TamAppLog>(entity =>
        {
            entity.HasKey(e => e.RegistrationNo).HasName("PK__TamAppLo__6EF5E0435878CE73");

            entity.ToTable("TamAppLog");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PrintCount).HasDefaultValue(1);
        });

        modelBuilder.Entity<TarifGabung>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tarifGabung");

            entity.Property(e => e.EklaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("EKlaimTarifGroup");
            entity.Property(e => e.F40).HasMaxLength(255);
            entity.Property(e => e.F41).HasMaxLength(255);
            entity.Property(e => e.F42).HasMaxLength(255);
            entity.Property(e => e.F43).HasMaxLength(255);
            entity.Property(e => e.F44).HasMaxLength(255);
            entity.Property(e => e.F45).HasMaxLength(255);
            entity.Property(e => e.F46).HasMaxLength(255);
            entity.Property(e => e.F47).HasMaxLength(255);
            entity.Property(e => e.ItemType).HasMaxLength(255);
            entity.Property(e => e.Jasa21DokterAnak).HasColumnName("Jasa 21_DokterAnak");
            entity.Property(e => e.Jasa31DokterAnastesi).HasColumnName("Jasa 31_DokterAnastesi");
            entity.Property(e => e.KodeGroup).HasMaxLength(255);
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaPelayanan).HasMaxLength(255);
            entity.Property(e => e.PJasaDokter).HasColumnName("p_JasaDokter");
            entity.Property(e => e.PJasaDokterAnak).HasColumnName("p_JasaDokterAnak");
            entity.Property(e => e.PJasaDokterAnastesi).HasColumnName("p_JasaDokterAnastesi");
            entity.Property(e => e.PSarana).HasColumnName("p_Sarana");
            entity.Property(e => e.Smf)
                .HasMaxLength(255)
                .HasColumnName("SMF");
            entity.Property(e => e.SreklaimTariffGroup)
                .HasMaxLength(255)
                .HasColumnName("SREklaimTariffGroup");
            entity.Property(e => e._01JasaDokter).HasColumnName("01_JasaDokter");
            entity.Property(e => e._01JasaDokterAnak).HasColumnName("01_JasaDokterAnak");
            entity.Property(e => e._01JasaDokterAnastesi).HasColumnName("01_JasaDokterAnastesi");
            entity.Property(e => e._01Sarana).HasColumnName("01_Sarana");
            entity.Property(e => e._01Total).HasColumnName("01_Total");
            entity.Property(e => e._02JasaDokter).HasColumnName("02_JasaDokter");
            entity.Property(e => e._02JasaDokterAnak).HasColumnName("02_JasaDokterAnak");
            entity.Property(e => e._02JasaDokterAnastesi).HasColumnName("02_JasaDokterAnastesi");
            entity.Property(e => e._02Sarana).HasColumnName("02_Sarana");
            entity.Property(e => e._02Total).HasColumnName("02_Total");
            entity.Property(e => e._11JasaDokter).HasColumnName("11_JasaDokter");
            entity.Property(e => e._11JasaDokterAnak).HasColumnName("11_JasaDokterAnak");
            entity.Property(e => e._11JasaDokterAnastesi).HasColumnName("11_JasaDokterAnastesi");
            entity.Property(e => e._11Sarana).HasColumnName("11_Sarana");
            entity.Property(e => e._11Total).HasColumnName("11_Total");
            entity.Property(e => e._21JasaDokter).HasColumnName("21_JasaDokter");
            entity.Property(e => e._21JasaDokterAnastesi).HasColumnName("21_JasaDokterAnastesi");
            entity.Property(e => e._21Sarana).HasColumnName("21_Sarana");
            entity.Property(e => e._21Total).HasColumnName("21_Total");
            entity.Property(e => e._31JasaDokter).HasColumnName("31_JasaDokter");
            entity.Property(e => e._31JasaDokterAnak).HasColumnName("31_JasaDokterAnak");
            entity.Property(e => e._31Sarana).HasColumnName("31_Sarana");
            entity.Property(e => e._31Total).HasColumnName("31_Total");
        });

        modelBuilder.Entity<TariffAmbulance>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TariffAmbulance");

            entity.Property(e => e.EKlaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("E-Klaim Tarif Group");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("Kode IDI");
        });

        modelBuilder.Entity<TariffComponent>(entity =>
        {
            entity.ToTable("TariffComponent");

            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.IsTariffParamedic).HasComment("Jika ya maka di transakasi harus diisi kode paramedic. Digunakan untuk perhitugan jasa paramedic");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SrpphType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPphType");
            entity.Property(e => e.SrtariffComponentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTariffComponentType");
            entity.Property(e => e.TariffComponentName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TariffItemVct>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TariffItemVCT");

            entity.Property(e => e.EKlaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("E-Klaim Tarif Group");
            entity.Property(e => e.KodeGroup).HasMaxLength(255);
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("Kode IDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.TaskId).HasName("PKTasks");

            entity.HasIndex(e => new { e.ServerName, e.CreatedOn, e.Status, e.Severity }, "IXTasks");

            entity.Property(e => e.TaskId).HasColumnName("TaskID");
            entity.Property(e => e.Comments).HasMaxLength(1024);
            entity.Property(e => e.CompletedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DatabaseName).HasMaxLength(255);
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.Message).HasMaxLength(1024);
            entity.Property(e => e.Owner).HasMaxLength(256);
            entity.Property(e => e.ServerName).HasMaxLength(256);
            entity.Property(e => e.Subject).HasMaxLength(256);
        });

        modelBuilder.Entity<TempdbFileDatum>(entity =>
        {
            entity.HasKey(e => new { e.UtccollectionDateTime, e.FileId }).HasName("PKTempdbFileData");

            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.FileId).HasColumnName("FileID");

            entity.HasOne(d => d.File).WithMany(p => p.TempdbFileData)
                .HasForeignKey(d => d.FileId)
                .HasConstraintName("FKTempdbFileActivityDatabaseFiles");
        });

        modelBuilder.Entity<Tempo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempo");

            entity.Property(e => e.Caption)
                .IsUnicode(false)
                .HasColumnName("caption");
        });

        modelBuilder.Entity<TerdugaTb>(entity =>
        {
            entity.HasKey(e => e.No)
                .HasName("PK__TerdugaT__3214D4A9DB887833")
                .IsClustered(false);

            entity.ToTable("TerdugaTB");

            entity.Property(e => e.No).HasMaxLength(1024);
            entity.Property(e => e.Address).HasMaxLength(1024);
            entity.Property(e => e.Barcode).HasMaxLength(1024);
            entity.Property(e => e.DirujukOleh).HasMaxLength(1024);
            entity.Property(e => e.FasyankesRujukan).HasMaxLength(1024);
            entity.Property(e => e.HasilDiagnosis).HasMaxLength(1024);
            entity.Property(e => e.Keterangan).HasMaxLength(1024);
            entity.Property(e => e.KriteriaTerdugaTb)
                .HasMaxLength(1024)
                .HasColumnName("KriteriaTerdugaTB");
            entity.Property(e => e.MedicalNo).HasMaxLength(1024);
            entity.Property(e => e.NoIdentitasSediaan).HasMaxLength(1024);
            entity.Property(e => e.PatientName).HasMaxLength(1024);
            entity.Property(e => e.RiwayatDm)
                .HasMaxLength(1024)
                .HasColumnName("RiwayatDM");
            entity.Property(e => e.Sex).HasMaxLength(1024);
            entity.Property(e => e.Ssn).HasMaxLength(1024);
            entity.Property(e => e.StatusDiagnosis).HasMaxLength(1024);
            entity.Property(e => e.StatusHiv)
                .HasMaxLength(1024)
                .HasColumnName("StatusHIV");
            entity.Property(e => e.TempatPengobatan).HasMaxLength(1024);
            entity.Property(e => e.TindakLanjut).HasMaxLength(1024);
            entity.Property(e => e.Umur).HasMaxLength(1024);
            entity.Property(e => e.Warning).HasMaxLength(1024);
        });

        modelBuilder.Entity<TestResult>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("TestResult");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ClinicalInfo).IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.SrradiologyCriticalResults)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRadiologyCriticalResults");
            entity.Property(e => e.TestResult1)
                .IsUnicode(false)
                .HasColumnName("TestResult");
            entity.Property(e => e.TestResultDateTime).HasColumnType("datetime");
            entity.Property(e => e.TestResultHistory).IsUnicode(false);
            entity.Property(e => e.TestResultOtherLang).IsUnicode(false);
            entity.Property(e => e.TestResultOtherLangHistory).IsUnicode(false);
            entity.Property(e => e.TestResultTemplateId).HasColumnName("TestResultTemplateID");
            entity.Property(e => e.TestSuggest).IsUnicode(false);
            entity.Property(e => e.TestSuggestHistory).IsUnicode(false);
            entity.Property(e => e.TestSuggestOtherLang).IsUnicode(false);
            entity.Property(e => e.TestSuggestOtherLangHistory).IsUnicode(false);
            entity.Property(e => e.TestSummary).IsUnicode(false);
            entity.Property(e => e.TestSummaryHistory).IsUnicode(false);
            entity.Property(e => e.TestSummaryOtherLang).IsUnicode(false);
            entity.Property(e => e.TestSummaryOtherLangHistory).IsUnicode(false);
        });

        modelBuilder.Entity<TestResultTemplate>(entity =>
        {
            entity.ToTable("TestResultTemplate");

            entity.Property(e => e.TestResultTemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TestResultTemplateID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.TestResult).IsUnicode(false);
            entity.Property(e => e.TestResultOtherLang).IsUnicode(false);
            entity.Property(e => e.TestResultTemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TestSuggest).IsUnicode(false);
            entity.Property(e => e.TestSuggestOtherLang).IsUnicode(false);
            entity.Property(e => e.TestSummary).IsUnicode(false);
            entity.Property(e => e.TestSummaryOtherLang).IsUnicode(false);
        });

        modelBuilder.Entity<TestResultTemplateItem>(entity =>
        {
            entity.HasKey(e => new { e.TestResultTemplateId, e.ItemId });

            entity.ToTable("TestResultTemplateItem");

            entity.Property(e => e.TestResultTemplateId).HasColumnName("TestResultTemplateID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Therapy>(entity =>
        {
            entity.HasKey(e => new { e.TherapyId, e.SrtherapyGroup });

            entity.ToTable("Therapy");

            entity.Property(e => e.TherapyId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TherapyID");
            entity.Property(e => e.SrtherapyGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTherapyGroup");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.TherapyName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Thr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("THR");

            entity.Property(e => e.Dpp).HasColumnType("money");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Pkp)
                .HasColumnType("money")
                .HasColumnName("PKP");
            entity.Property(e => e.Pph21)
                .HasColumnType("money")
                .HasColumnName("Pph_21");
            entity.Property(e => e.Pph21Setahun)
                .HasColumnType("money")
                .HasColumnName("Pph_21_Setahun");
            entity.Property(e => e.TaxAllowance)
                .HasColumnType("money")
                .HasColumnName("Tax_Allowance");
            entity.Property(e => e.Thr1)
                .HasColumnType("money")
                .HasColumnName("THR");
            entity.Property(e => e.TotalThr)
                .HasColumnType("money")
                .HasColumnName("Total_THR");
        });

        modelBuilder.Entity<ThrSchedule>(entity =>
        {
            entity.HasKey(e => e.CounterId);

            entity.ToTable("ThrSchedule");

            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PayDate).HasColumnType("datetime");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PayrollPeriodName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Sptyear).HasColumnName("SPTYear");
        });

        modelBuilder.Entity<ThrScheduleItem>(entity =>
        {
            entity.HasKey(e => e.CounterItemId);

            entity.ToTable("ThrScheduleItem");

            entity.Property(e => e.CounterItemId).HasColumnName("CounterItemID");
            entity.Property(e => e.CounterId).HasColumnName("CounterID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
        });

        modelBuilder.Entity<TmDatum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Amount).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Judul)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Kasir)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpAlke>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Alkes");

            entity.Property(e => e.BrandName).HasMaxLength(255);
            entity.Property(e => e.IsAso).HasMaxLength(255);
            entity.Property(e => e.IsGeneric).HasColumnName("isGeneric");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemIdexternal)
                .HasMaxLength(255)
                .HasColumnName("ItemIDExternal");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.MarginId)
                .HasMaxLength(255)
                .HasColumnName("MarginID");
            entity.Property(e => e.PriceInBasedUnitWvat).HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.SritemType).HasColumnName("SRItemType");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(255)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(255)
                .HasColumnName("SRPurchaseUnit");
            entity.Property(e => e.Srroute)
                .HasMaxLength(255)
                .HasColumnName("SRRoute");
            entity.Property(e => e.Venclass)
                .HasMaxLength(255)
                .HasColumnName("VENClass");
        });

        modelBuilder.Entity<TmpAppUserFarmasi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AppUserFarmasi");

            entity.Property(e => e.Nama)
                .HasMaxLength(255)
                .HasColumnName("NAMA");
            entity.Property(e => e.PenugasanTenagaFarmasi)
                .HasMaxLength(255)
                .HasColumnName("Penugasan Tenaga Farmasi");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.UserId)
                .HasMaxLength(255)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpAppUserUpdateAppUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_AppUserUpdateAppUser");

            entity.Property(e => e.UserId)
                .HasMaxLength(255)
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBank>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Bank");

            entity.Property(e => e.BankId)
                .HasMaxLength(255)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.CurrencyCode).HasMaxLength(255);
            entity.Property(e => e.JournalCode).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpBillInterm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm");

            entity.Property(e => e.BillingGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BillingGroupID");
            entity.Property(e => e.BillingGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CdiscountAmount)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmount");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Cprice)
                .HasColumnType("money")
                .HasColumnName("CPrice");
            entity.Property(e => e.GuarantorAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorDiscountAmount).HasColumnType("money");
            entity.Property(e => e.IntermbillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("money");
            entity.Property(e => e.PatientDiscountAmount).HasColumnType("money");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RregistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RRegistrationNo");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBillInterm2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm2");

            entity.Property(e => e.BillingGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BillingGroupID");
            entity.Property(e => e.BillingGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CdiscountAmount)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmount");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Cprice)
                .HasColumnType("money")
                .HasColumnName("CPrice");
            entity.Property(e => e.GuarantorAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorDiscountAmount).HasColumnType("money");
            entity.Property(e => e.IntermbillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoUrut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("money");
            entity.Property(e => e.PatientDiscountAmount).HasColumnType("money");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RregistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RRegistrationNo");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBillInterm3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm3");

            entity.Property(e => e.BillingGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BillingGroupID");
            entity.Property(e => e.BillingGroupName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CdiscountAmount)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmount");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Cprice)
                .HasColumnType("money")
                .HasColumnName("CPrice");
            entity.Property(e => e.GuarantorAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorDiscountAmount).HasColumnType("money");
            entity.Property(e => e.IntermbillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoUrut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("money");
            entity.Property(e => e.PatientDiscountAmount).HasColumnType("money");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RregistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RRegistrationNo");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBillInterm4>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm4");

            entity.Property(e => e.BillingGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BillingGroupID");
            entity.Property(e => e.BillingGroupName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CdiscountAmount)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmount");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Cprice)
                .HasColumnType("money")
                .HasColumnName("CPrice");
            entity.Property(e => e.GuarantorAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorDiscountAmount).HasColumnType("money");
            entity.Property(e => e.IntermbillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoUrut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("money");
            entity.Property(e => e.PatientDiscountAmount).HasColumnType("money");
            entity.Property(e => e.PkgSequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PkgTransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RregistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RRegistrationNo");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBillInterm5>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm5");

            entity.Property(e => e.BillingGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BillingGroupID");
            entity.Property(e => e.BillingGroupName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CdiscountAmount)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmount");
            entity.Property(e => e.CdiscountAmountTemp)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmountTemp");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Cprice)
                .HasColumnType("money")
                .HasColumnName("CPrice");
            entity.Property(e => e.CpriceTemp)
                .HasColumnType("money")
                .HasColumnName("CPriceTemp");
            entity.Property(e => e.GuarantorAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorDiscountAmount).HasColumnType("money");
            entity.Property(e => e.IntermbillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoUrut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("money");
            entity.Property(e => e.PatientDiscountAmount).HasColumnType("money");
            entity.Property(e => e.PkgSequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PkgTransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RregistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RRegistrationNo");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBillInterm7>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm7");

            entity.HasIndex(e => new { e.Ident, e.RegistrationNo, e.TransactionNo, e.ItemId, e.ItemName, e.BillingGroupId, e.BillingGroupName, e.TariffComponentId, e.RregistrationNo }, "idx_");

            entity.Property(e => e.AdjustedAmount).HasColumnType("money");
            entity.Property(e => e.BillingGroupId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BillingGroupID");
            entity.Property(e => e.BillingGroupName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CadjustedAmount)
                .HasColumnType("money")
                .HasColumnName("CAdjustedAmount");
            entity.Property(e => e.CdiscountAmount)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmount");
            entity.Property(e => e.CdiscountAmountTemp)
                .HasColumnType("money")
                .HasColumnName("CDiscountAmountTemp");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ClassId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Cprice)
                .HasColumnType("money")
                .HasColumnName("CPrice");
            entity.Property(e => e.CpriceTemp)
                .HasColumnType("money")
                .HasColumnName("CPriceTemp");
            entity.Property(e => e.GuarantorAmount).HasColumnType("money");
            entity.Property(e => e.GuarantorDiscountAmount).HasColumnType("money");
            entity.Property(e => e.IntermbillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NoUrut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("money");
            entity.Property(e => e.PatientDiscountAmount).HasColumnType("money");
            entity.Property(e => e.PkgSequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PkgTransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RecipeAmount).HasColumnType("money");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RregistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RRegistrationNo");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionDate2).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpBillIntermLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_bill_interm_log");

            entity.Property(e => e.ExecDate).HasColumnType("datetime");
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Tic).HasColumnType("datetime");
            entity.Property(e => e.Toc).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpChartOfAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ChartOfAccount");

            entity.Property(e => e.ChartOfAccountId).HasColumnName("ChartOfAccountID");
            entity.Property(e => e.GeneralAccount).HasMaxLength(255);
            entity.Property(e => e.NamaPerkiraan).HasMaxLength(255);
            entity.Property(e => e.NoPerkiraan).HasMaxLength(255);
            entity.Property(e => e.SaldoNormal).HasMaxLength(255);
            entity.Property(e => e.Type).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpCheckinBedHistory>(entity =>
        {
            entity.HasKey(e => e.CopyId).HasName("PK__Bed_copy__A8A710601734A496");

            entity.ToTable("TmpCheckinBedHistory");

            entity.HasIndex(e => new { e.RegistrationNo, e.SrbedStatus }, "_idx_bedSt_regNo_copy1");

            entity.HasIndex(e => e.RoomId, "_idx_roomid_copy1");

            entity.Property(e => e.CopyId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BedID");
            entity.Property(e => e.BedStatusUpdatedBy)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.BookingDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.DefaultChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DefaultChargeClassID");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IsNeedConfirmation).HasDefaultValue(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OldBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OldBedID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RoomID");
            entity.Property(e => e.SrbedStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRBedStatus");
        });

        modelBuilder.Entity<TmpCheckinBedRoomIn>(entity =>
        {
            entity.HasKey(e => e.CopyId).HasName("PK__BedRoomI__AE69AB9CE2130700");

            entity.ToTable("TmpCheckinBedRoomIn");

            entity.Property(e => e.CopyId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.BedStatusUpdatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfEntry).HasColumnType("smalldatetime");
            entity.Property(e => e.DateOfExit).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrbedStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBedStatus");
            entity.Property(e => e.TimeOfEntry)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TimeOfExit)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpCheckinPatientTransferHistory>(entity =>
        {
            entity.HasKey(e => e.CopyId).HasName("PK__PatientT__47A16BA54DCB2509");

            entity.ToTable("TmpCheckinPatientTransferHistory");

            entity.Property(e => e.CopyId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ArrivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DateOfEntry).HasColumnType("datetime");
            entity.Property(e => e.DateOfExit).HasColumnType("datetime");
            entity.Property(e => e.FromBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromBedID");
            entity.Property(e => e.FromChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromChargeClassID");
            entity.Property(e => e.FromClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromClassID");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReceivedByUserID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SmfIdbefore)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfIDBefore");
            entity.Property(e => e.SrtransferredPatientWith)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTransferredPatientWith");
            entity.Property(e => e.TimeOfEntry)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TimeOfExit)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferredByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TransferredByUserID");
        });

        modelBuilder.Entity<TmpCheckinRegistrationHistory>(entity =>
        {
            entity.HasKey(e => e.CopyId)
                .HasName("PK__Registra__6EF5E04238B436FE")
                .IsClustered(false);

            entity.ToTable("TmpCheckinRegistrationHistory");

            entity.Property(e => e.CopyId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ActualVisitDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AdjustLog).IsUnicode(false);
            entity.Property(e => e.AdministrationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AllowPatientCheckOutByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AllowPatientCheckOutByUserID");
            entity.Property(e => e.AllowPatientCheckOutDateTime).HasColumnType("datetime");
            entity.Property(e => e.Anamnesis)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproximatePlafondAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BedID");
            entity.Property(e => e.BpjsCoverageFormula).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BpjsPackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsPackageID");
            entity.Property(e => e.BpjsSepNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CauseOfAccident)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.Complaint)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ConfirmedAttendanceByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConfirmedAttendanceByUserID");
            entity.Property(e => e.ConfirmedAttendanceDateTime).HasColumnType("datetime");
            entity.Property(e => e.CoverageClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("CoverageClassID");
            entity.Property(e => e.CrashSiteDetail)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DeathCertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DiscAdmGuarantor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscAdmPatient).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DischargeMedicalNotes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DischargeNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeOperatorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("DischargeOperatorID");
            entity.Property(e => e.DischargePlanDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EmrDiagnoseId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EmrDiagnoseID");
            entity.Property(e => e.ExternalQueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.FirstResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Hpi)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.InitialDiagnose)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.InsuranceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("InsuranceID");
            entity.Property(e => e.IsBackDate).HasDefaultValue(false);
            entity.Property(e => e.IsClosed).HasDefaultValue(false);
            entity.Property(e => e.IsClusterAssessment).HasDefaultValue(false);
            entity.Property(e => e.IsConfirmedAttendance).HasDefaultValue(false);
            entity.Property(e => e.IsConsul).HasDefaultValue(false);
            entity.Property(e => e.IsDhf).HasColumnName("IsDHF");
            entity.Property(e => e.IsDirectPrescriptionReturn).HasColumnName("isDirectPrescriptionReturn");
            entity.Property(e => e.IsEkg).HasColumnName("IsEKG");
            entity.Property(e => e.IsEmrvalid)
                .HasDefaultValue(false)
                .HasColumnName("IsEMRValid");
            entity.Property(e => e.IsEpisodeComplete).HasDefaultValue(false);
            entity.Property(e => e.IsGenerateHl7).HasColumnName("IsGenerateHL7");
            entity.Property(e => e.IsHoldTransactionEntryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IsHoldTransactionEntryByUserID");
            entity.Property(e => e.IsNonPatient).HasDefaultValue(false);
            entity.Property(e => e.IsOpenEntryMr)
                .HasComment("Status bisa entry MR jika registrasi sudah diclose")
                .HasColumnName("IsOpenEntryMR");
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LockVerifiedBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LockVerifiedBillingByUserID");
            entity.Property(e => e.LockVerifiedBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.LosinDay).HasColumnName("LOSInDay");
            entity.Property(e => e.LosinMonth).HasColumnName("LOSInMonth");
            entity.Property(e => e.LosinYear).HasColumnName("LOSInYear");
            entity.Property(e => e.MedicationPlanning)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("PatientID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhysicianResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PhysicianResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PlavonAmount)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PlavonAmount2)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ProcedureChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureChargeClassID");
            entity.Property(e => e.ReasonsForTreatmentDescId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentDescID");
            entity.Property(e => e.ReasonsForTreatmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentID");
            entity.Property(e => e.ReferByParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferByParamedicID");
            entity.Property(e => e.ReferTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ReferralID");
            entity.Property(e => e.ReferralIdTo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferralName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralNameTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.RemainingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("RoomID");
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SentToBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SentToBillingByUserID");
            entity.Property(e => e.SentToBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SrbussinesMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRBussinesMethod");
            entity.Property(e => e.SrcovidComorbidStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCovidComorbidStatus");
            entity.Property(e => e.SrcovidStatus).HasColumnName("SRCovidStatus");
            entity.Property(e => e.SrcrashSite)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCrashSite");
            entity.Property(e => e.SrdischargeCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDischargeCondition");
            entity.Property(e => e.SrdischargeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDischargeMethod");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SremployeeRelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeRelationship");
            entity.Property(e => e.SrercaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRERCaseType");
            entity.Property(e => e.SrfatherOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFatherOccupation");
            entity.Property(e => e.SrkiaCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKiaCaseType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrobstetricType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRObstetricType");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.SrpatientInCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientInCondition");
            entity.Property(e => e.SrpatientInType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPatientInType");
            entity.Property(e => e.SrreferralGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReferralGroup");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.SrrelationshipQuality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationshipQuality");
            entity.Property(e => e.SrresidentialHome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResidentialHome");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRShift");
            entity.Property(e => e.Srtriage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRTriage");
            entity.Property(e => e.SrvisitReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRVisitReason");
            entity.Property(e => e.SrvoidReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVoidReason");
            entity.Property(e => e.TransactionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.UsertInsertDischargePlan)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.VisiteRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes).IsUnicode(false);
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpCorporationGrade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_CorporationGrade");
        });

        modelBuilder.Entity<TmpDataAtasanCuti>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_DataAtasanCuti");

            entity.Property(e => e.EmployeeName).HasMaxLength(255);
            entity.Property(e => e.EmployeeNumber).HasMaxLength(255);
            entity.Property(e => e.NameSupervisor).HasMaxLength(255);
            entity.Property(e => e.Namemanager).HasMaxLength(255);
            entity.Property(e => e.NikManager)
                .HasMaxLength(255)
                .HasColumnName("NIK manager");
            entity.Property(e => e.NikSupervisor)
                .HasMaxLength(255)
                .HasColumnName("NIK Supervisor");
            entity.Property(e => e.PersonId)
                .HasMaxLength(255)
                .HasColumnName("PersonID");
            entity.Property(e => e.PersonId1)
                .HasMaxLength(255)
                .HasColumnName("PersonID1");
            entity.Property(e => e.PersonIdmanager)
                .HasMaxLength(255)
                .HasColumnName("PersonIDmanager");
            entity.Property(e => e.PersonIdsupervisor)
                .HasMaxLength(255)
                .HasColumnName("PersonIDSupervisor");
        });

        modelBuilder.Entity<TmpDataKaryawan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_DataKaryawan");

            entity.Property(e => e.AgamaId)
                .HasMaxLength(255)
                .HasColumnName("AGAMA_ID");
            entity.Property(e => e.AgamaName)
                .HasMaxLength(255)
                .HasColumnName("AGAMA_NAME");
            entity.Property(e => e.AlamatEmail)
                .HasMaxLength(255)
                .HasColumnName("Alamat _email");
            entity.Property(e => e.AlamatPegawai)
                .HasMaxLength(255)
                .HasColumnName("ALAMAT PEGAWAI");
            entity.Property(e => e.Departemen)
                .HasMaxLength(255)
                .HasColumnName("DEPARTEMEN");
            entity.Property(e => e.Divisi)
                .HasMaxLength(255)
                .HasColumnName("DIVISI");
            entity.Property(e => e.JenisTenagaUuRiTenagaKesehatan)
                .HasMaxLength(255)
                .HasColumnName("JENIS_TENAGA_UU_RI_TENAGA_KESEHATAN");
            entity.Property(e => e.KelasRawatInap)
                .HasMaxLength(255)
                .HasColumnName("KELAS_RAWAT_INAP");
            entity.Property(e => e.LP)
                .HasMaxLength(255)
                .HasColumnName("L_P");
            entity.Property(e => e.MasaKerjaBulan)
                .HasMaxLength(255)
                .HasColumnName("MASA_KERJA_BULAN");
            entity.Property(e => e.MasaKerjaTahun)
                .HasMaxLength(255)
                .HasColumnName("MASA_KERJA_TAHUN");
            entity.Property(e => e.NamAnakIi)
                .HasMaxLength(255)
                .HasColumnName("Nam_Anak_II");
            entity.Property(e => e.Nama)
                .HasMaxLength(255)
                .HasColumnName("NAMA");
            entity.Property(e => e.NamaAnakI)
                .HasMaxLength(255)
                .HasColumnName("Nama_Anak_I");
            entity.Property(e => e.NamaAnakIii)
                .HasMaxLength(255)
                .HasColumnName("Nama_Anak_III");
            entity.Property(e => e.NamaSekolah)
                .HasMaxLength(255)
                .HasColumnName("NAMA_SEKOLAH");
            entity.Property(e => e.NamaSuamiIstri)
                .HasMaxLength(255)
                .HasColumnName("Nama_Suami_Istri");
            entity.Property(e => e.NikKtp)
                .HasMaxLength(255)
                .HasColumnName("NIK KTP");
            entity.Property(e => e.NipNikPegawai)
                .HasMaxLength(255)
                .HasColumnName("NIP/NIK PEGAWAI");
            entity.Property(e => e.No)
                .HasMaxLength(255)
                .HasColumnName("NO");
            entity.Property(e => e.NoBpjsKesehatan)
                .HasMaxLength(255)
                .HasColumnName("NO_BPJS_KESEHATAN");
            entity.Property(e => e.NoBpjsKetenagakerjaan)
                .HasMaxLength(255)
                .HasColumnName("NO_BPJS_KETENAGAKERJAAN");
            entity.Property(e => e.NoIjazah)
                .HasMaxLength(255)
                .HasColumnName("NO_IJAZAH");
            entity.Property(e => e.NoNpwp)
                .HasMaxLength(255)
                .HasColumnName("NO_NPWP");
            entity.Property(e => e.NoSip)
                .HasMaxLength(255)
                .HasColumnName("NO_SIP");
            entity.Property(e => e.NoStr)
                .HasMaxLength(255)
                .HasColumnName("NO_STR");
            entity.Property(e => e.NoTlp)
                .HasMaxLength(255)
                .HasColumnName("NO_TLP");
            entity.Property(e => e.NorekDki)
                .HasMaxLength(255)
                .HasColumnName("NOREK_DKI");
            entity.Property(e => e.NorekMandiri)
                .HasMaxLength(255)
                .HasColumnName("NOREK_MANDIRI");
            entity.Property(e => e.NrkPns)
                .HasMaxLength(255)
                .HasColumnName("NRK PNS");
            entity.Property(e => e.Pajak)
                .HasMaxLength(255)
                .HasColumnName("PAJAK");
            entity.Property(e => e.PendidikanId)
                .HasMaxLength(255)
                .HasColumnName("PENDIDIKAN_ID");
            entity.Property(e => e.PendidikanName)
                .HasMaxLength(255)
                .HasColumnName("PENDIDIKAN_NAME");
            entity.Property(e => e.Position)
                .HasMaxLength(255)
                .HasColumnName("POSITION");
            entity.Property(e => e.PositionGradeId)
                .HasMaxLength(255)
                .HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionGradeName).HasMaxLength(255);
            entity.Property(e => e.ProfesiId)
                .HasMaxLength(255)
                .HasColumnName("PROFESI_ID");
            entity.Property(e => e.ProfesiName)
                .HasMaxLength(255)
                .HasColumnName("PROFESI_NAME");
            entity.Property(e => e.Rumpun)
                .HasMaxLength(255)
                .HasColumnName("RUMPUN");
            entity.Property(e => e.Section)
                .HasMaxLength(255)
                .HasColumnName("SECTION");
            entity.Property(e => e.StatusKepegawaian)
                .HasMaxLength(255)
                .HasColumnName("STATUS_KEPEGAWAIAN");
            entity.Property(e => e.StatusPerkawinanId)
                .HasMaxLength(255)
                .HasColumnName("STATUS_PERKAWINAN_ID");
            entity.Property(e => e.StatusPerkawinanName)
                .HasMaxLength(255)
                .HasColumnName("STATUS_PERKAWINAN_NAME");
            entity.Property(e => e.Tempat)
                .HasMaxLength(255)
                .HasColumnName("TEMPAT");
            entity.Property(e => e.TempatLahir)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR");
            entity.Property(e => e.TempatLahirI)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR_I");
            entity.Property(e => e.TempatLahirIi)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR_II");
            entity.Property(e => e.TempatLahirIii)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR_III");
            entity.Property(e => e.TglIjazah)
                .HasColumnType("datetime")
                .HasColumnName("TGL_IJAZAH");
            entity.Property(e => e.TglLahir)
                .HasColumnType("datetime")
                .HasColumnName("TGL_LAHIR");
            entity.Property(e => e.TglLahir1)
                .HasColumnType("datetime")
                .HasColumnName("TGL LAHIR");
            entity.Property(e => e.TglLahirI)
                .HasColumnType("datetime")
                .HasColumnName("TGL_LAHIR_I");
            entity.Property(e => e.TglLahirIi)
                .HasColumnType("datetime")
                .HasColumnName("TGL_LAHIR_II");
            entity.Property(e => e.TglLahirIii)
                .HasMaxLength(255)
                .HasColumnName("TGL_LAHIR_III");
            entity.Property(e => e.TglMasaBerlakuSip)
                .HasColumnType("datetime")
                .HasColumnName("TGL_MASA_BERLAKU_SIP");
            entity.Property(e => e.TglMasaBerlakuStr)
                .HasColumnType("datetime")
                .HasColumnName("TGL_MASA_BERLAKU_STR");
            entity.Property(e => e.TglTerbitSip)
                .HasColumnType("datetime")
                .HasColumnName("TGL_TERBIT_SIP");
            entity.Property(e => e.TglTerbitStr)
                .HasColumnType("datetime")
                .HasColumnName("TGL_TERBIT_STR");
            entity.Property(e => e.TmtCpns)
                .HasColumnType("datetime")
                .HasColumnName("TMT_CPNS");
            entity.Property(e => e.TmtGolongan)
                .HasMaxLength(255)
                .HasColumnName("TMT_GOLONGAN");
            entity.Property(e => e.TmtMasukTarakan)
                .HasColumnType("datetime")
                .HasColumnName("TMT_MASUK_TARAKAN");
            entity.Property(e => e.TmtPns)
                .HasColumnType("datetime")
                .HasColumnName("TMT_PNS");
        });

        modelBuilder.Entity<TmpDataKaryawan3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_DataKaryawan3");

            entity.Property(e => e.AgamaId)
                .HasMaxLength(255)
                .HasColumnName("AGAMA_ID");
            entity.Property(e => e.AgamaName)
                .HasMaxLength(255)
                .HasColumnName("AGAMA_NAME");
            entity.Property(e => e.AlamatEmail)
                .HasMaxLength(255)
                .HasColumnName("Alamat _email");
            entity.Property(e => e.AlamatPegawai)
                .HasMaxLength(255)
                .HasColumnName("ALAMAT PEGAWAI");
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(255);
            entity.Property(e => e.DivisiId).HasColumnName("DivisiID");
            entity.Property(e => e.DivisiName).HasMaxLength(255);
            entity.Property(e => e.JenisTenagaUuRiTenagaKesehatan)
                .HasMaxLength(255)
                .HasColumnName("JENIS_TENAGA_UU_RI_TENAGA_KESEHATAN");
            entity.Property(e => e.KelasRawatInap)
                .HasMaxLength(255)
                .HasColumnName("KELAS_RAWAT_INAP");
            entity.Property(e => e.LP)
                .HasMaxLength(255)
                .HasColumnName("L_P");
            entity.Property(e => e.MasaKerjaBulan)
                .HasMaxLength(255)
                .HasColumnName("MASA_KERJA_BULAN");
            entity.Property(e => e.MasaKerjaTahun)
                .HasMaxLength(255)
                .HasColumnName("MASA_KERJA_TAHUN");
            entity.Property(e => e.NamAnakIi)
                .HasMaxLength(255)
                .HasColumnName("Nam_Anak_II");
            entity.Property(e => e.Nama)
                .HasMaxLength(255)
                .HasColumnName("NAMA");
            entity.Property(e => e.NamaAnakI)
                .HasMaxLength(255)
                .HasColumnName("Nama_Anak_I");
            entity.Property(e => e.NamaAnakIii)
                .HasMaxLength(255)
                .HasColumnName("Nama_Anak_III");
            entity.Property(e => e.NamaSekolah)
                .HasMaxLength(255)
                .HasColumnName("NAMA_SEKOLAH");
            entity.Property(e => e.NamaSuamiIstri)
                .HasMaxLength(255)
                .HasColumnName("Nama_Suami_Istri");
            entity.Property(e => e.NikKtp)
                .HasMaxLength(255)
                .HasColumnName("NIK KTP");
            entity.Property(e => e.NipNikPegawai)
                .HasMaxLength(255)
                .HasColumnName("NIP/NIK PEGAWAI");
            entity.Property(e => e.No)
                .HasMaxLength(255)
                .HasColumnName("NO");
            entity.Property(e => e.NoBpjsKesehatan)
                .HasMaxLength(255)
                .HasColumnName("NO_BPJS_KESEHATAN");
            entity.Property(e => e.NoBpjsKetenagakerjaan)
                .HasMaxLength(255)
                .HasColumnName("NO_BPJS_KETENAGAKERJAAN");
            entity.Property(e => e.NoIjazah)
                .HasMaxLength(255)
                .HasColumnName("NO_IJAZAH");
            entity.Property(e => e.NoNpwp)
                .HasMaxLength(255)
                .HasColumnName("NO_NPWP");
            entity.Property(e => e.NoSip)
                .HasMaxLength(255)
                .HasColumnName("NO_SIP");
            entity.Property(e => e.NoStr)
                .HasMaxLength(255)
                .HasColumnName("NO_STR");
            entity.Property(e => e.NoTlp)
                .HasMaxLength(255)
                .HasColumnName("NO_TLP");
            entity.Property(e => e.NorekDki)
                .HasMaxLength(255)
                .HasColumnName("NOREK_DKI");
            entity.Property(e => e.NorekMandiri)
                .HasMaxLength(255)
                .HasColumnName("NOREK_MANDIRI");
            entity.Property(e => e.NrkPns)
                .HasMaxLength(255)
                .HasColumnName("NRK PNS");
            entity.Property(e => e.Pajak)
                .HasMaxLength(255)
                .HasColumnName("PAJAK");
            entity.Property(e => e.PendidikanId)
                .HasMaxLength(255)
                .HasColumnName("PENDIDIKAN_ID");
            entity.Property(e => e.PendidikanName)
                .HasMaxLength(255)
                .HasColumnName("PENDIDIKAN_NAME");
            entity.Property(e => e.Position)
                .HasMaxLength(255)
                .HasColumnName("POSITION");
            entity.Property(e => e.PositionGradeId)
                .HasMaxLength(255)
                .HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionGradeName).HasMaxLength(255);
            entity.Property(e => e.ProfesiId)
                .HasMaxLength(255)
                .HasColumnName("PROFESI_ID");
            entity.Property(e => e.ProfesiName)
                .HasMaxLength(255)
                .HasColumnName("PROFESI_NAME");
            entity.Property(e => e.Rumpun)
                .HasMaxLength(255)
                .HasColumnName("RUMPUN");
            entity.Property(e => e.SectionId).HasColumnName("SectionID");
            entity.Property(e => e.SectionName).HasMaxLength(255);
            entity.Property(e => e.StatusKepegawaian)
                .HasMaxLength(255)
                .HasColumnName("STATUS_KEPEGAWAIAN");
            entity.Property(e => e.StatusPerkawinanId)
                .HasMaxLength(255)
                .HasColumnName("STATUS_PERKAWINAN_ID");
            entity.Property(e => e.StatusPerkawinanName)
                .HasMaxLength(255)
                .HasColumnName("STATUS_PERKAWINAN_NAME");
            entity.Property(e => e.SubDivisionId).HasColumnName("SubDivisionID");
            entity.Property(e => e.SubDivisionName).HasMaxLength(255);
            entity.Property(e => e.Tempat)
                .HasMaxLength(255)
                .HasColumnName("TEMPAT");
            entity.Property(e => e.TempatLahir)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR");
            entity.Property(e => e.TempatLahirI)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR_I");
            entity.Property(e => e.TempatLahirIi)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR_II");
            entity.Property(e => e.TempatLahirIii)
                .HasMaxLength(255)
                .HasColumnName("Tempat_LAHIR_III");
            entity.Property(e => e.TglIjazah)
                .HasColumnType("datetime")
                .HasColumnName("TGL_IJAZAH");
            entity.Property(e => e.TglLahir)
                .HasColumnType("datetime")
                .HasColumnName("TGL_LAHIR");
            entity.Property(e => e.TglLahir1)
                .HasColumnType("datetime")
                .HasColumnName("TGL LAHIR");
            entity.Property(e => e.TglLahirI)
                .HasColumnType("datetime")
                .HasColumnName("TGL_LAHIR_I");
            entity.Property(e => e.TglLahirIi)
                .HasColumnType("datetime")
                .HasColumnName("TGL_LAHIR_II");
            entity.Property(e => e.TglLahirIii)
                .HasMaxLength(255)
                .HasColumnName("TGL_LAHIR_III");
            entity.Property(e => e.TglMasaBerlakuSip)
                .HasColumnType("datetime")
                .HasColumnName("TGL_MASA_BERLAKU_SIP");
            entity.Property(e => e.TglMasaBerlakuStr)
                .HasColumnType("datetime")
                .HasColumnName("TGL_MASA_BERLAKU_STR");
            entity.Property(e => e.TglTerbitSip)
                .HasColumnType("datetime")
                .HasColumnName("TGL_TERBIT_SIP");
            entity.Property(e => e.TglTerbitStr)
                .HasColumnType("datetime")
                .HasColumnName("TGL_TERBIT_STR");
            entity.Property(e => e.TmtCpns)
                .HasColumnType("datetime")
                .HasColumnName("TMT_CPNS");
            entity.Property(e => e.TmtGolongan)
                .HasMaxLength(255)
                .HasColumnName("TMT_GOLONGAN");
            entity.Property(e => e.TmtMasukTarakan)
                .HasColumnType("datetime")
                .HasColumnName("TMT_MASUK_TARAKAN");
            entity.Property(e => e.TmtPns)
                .HasColumnType("datetime")
                .HasColumnName("TMT_PNS");
        });

        modelBuilder.Entity<TmpEmptyTransChargesItemComp>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo });

            entity.ToTable("TmpEmptyTransChargesItemComp");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DiscountAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PriceAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TmpFlagItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_FlagItem");

            entity.Property(e => e.Id)
                .HasMaxLength(255)
                .HasColumnName("ID");
            entity.Property(e => e.IsConsignment).HasMaxLength(255);
            entity.Property(e => e.IsGeneric).HasColumnName("isGeneric");
            entity.Property(e => e.IsHam).HasMaxLength(255);
            entity.Property(e => e.IsMorphine).HasMaxLength(255);
            entity.Property(e => e.IsNarcotic).HasMaxLength(255);
            entity.Property(e => e.IsOot).HasMaxLength(255);
            entity.Property(e => e.IsPrecursor).HasMaxLength(255);
            entity.Property(e => e.IsSupplement).HasMaxLength(255);
            entity.Property(e => e.IsTraditionalMedicine).HasMaxLength(255);
            entity.Property(e => e.NamaGenerik)
                .HasMaxLength(255)
                .HasColumnName("Nama Generik");
            entity.Property(e => e.NamaMaterial)
                .HasMaxLength(255)
                .HasColumnName("Nama Material");
            entity.Property(e => e.UkuranKemasanDanSatuanKekuatan)
                .HasMaxLength(255)
                .HasColumnName("Ukuran kemasan dan satuan kekuatan");
        });

        modelBuilder.Entity<TmpGabungan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_Gabungan");

            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(255)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasMaxLength(255);
            entity.Property(e => e.F1).HasMaxLength(255);
            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.F22).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasMaxLength(255);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(255)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasMaxLength(255);
            entity.Property(e => e.NursingDiagnosaCode).HasMaxLength(255);
            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(255)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.NursingDiagnosaName).HasMaxLength(255);
            entity.Property(e => e.NursingDiagnosaParentId)
                .HasMaxLength(255)
                .HasColumnName("NursingDiagnosaParentID");
            entity.Property(e => e.Prefix).HasMaxLength(255);
            entity.Property(e => e.RespondTemplate).HasMaxLength(255);
            entity.Property(e => e.SequenceNo).HasMaxLength(255);
            entity.Property(e => e.SrnsDiagnosaType)
                .HasMaxLength(255)
                .HasColumnName("SRNsDiagnosaType");
            entity.Property(e => e.SrnsEtiologyType)
                .HasMaxLength(255)
                .HasColumnName("SRNsEtiologyType");
            entity.Property(e => e.SrnursingDiagnosaLevel)
                .HasMaxLength(255)
                .HasColumnName("SRNursingDiagnosaLevel");
            entity.Property(e => e.SrnursingNicType)
                .HasMaxLength(255)
                .HasColumnName("SRNursingNicType");
            entity.Property(e => e.SrnursingNocType)
                .HasMaxLength(255)
                .HasColumnName("SRNursingNocType");
            entity.Property(e => e.Suffix).HasMaxLength(255);
            entity.Property(e => e.TemplateId)
                .HasMaxLength(255)
                .HasColumnName("TemplateID");
        });

        modelBuilder.Entity<TmpGabunganBaru>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_GabunganBaru");

            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(255)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasMaxLength(255);
            entity.Property(e => e.F1).HasMaxLength(255);
            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.F22).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasMaxLength(255);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(255)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasMaxLength(255);
            entity.Property(e => e.NursingDiagnosaCode).HasMaxLength(255);
            entity.Property(e => e.NursingDiagnosaId)
                .HasMaxLength(255)
                .HasColumnName("NursingDiagnosaID");
            entity.Property(e => e.NursingDiagnosaName).HasMaxLength(255);
            entity.Property(e => e.NursingDiagnosaParentId)
                .HasMaxLength(255)
                .HasColumnName("NursingDiagnosaParentID");
            entity.Property(e => e.Prefix).HasMaxLength(255);
            entity.Property(e => e.RespondTemplate).HasMaxLength(255);
            entity.Property(e => e.SequenceNo).HasMaxLength(255);
            entity.Property(e => e.SrnsDiagnosaType)
                .HasMaxLength(255)
                .HasColumnName("SRNsDiagnosaType");
            entity.Property(e => e.SrnsEtiologyType)
                .HasMaxLength(255)
                .HasColumnName("SRNsEtiologyType");
            entity.Property(e => e.SrnursingDiagnosaLevel)
                .HasMaxLength(255)
                .HasColumnName("SRNursingDiagnosaLevel");
            entity.Property(e => e.SrnursingNicType)
                .HasMaxLength(255)
                .HasColumnName("SRNursingNicType");
            entity.Property(e => e.SrnursingNocType)
                .HasMaxLength(255)
                .HasColumnName("SRNursingNocType");
            entity.Property(e => e.Suffix).HasMaxLength(255);
            entity.Property(e => e.TemplateId)
                .HasMaxLength(255)
                .HasColumnName("TemplateID");
        });

        modelBuilder.Entity<TmpGabunganPenunjang>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_GabunganPenunjang");

            entity.Property(e => e.EKlaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("E-Klaim Tarif Group");
            entity.Property(e => e.EklaimId)
                .HasMaxLength(255)
                .HasColumnName("EKlaimID");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("Kode IDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpGuarantor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Guarantor");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(255)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.GuarantorName).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpHisapp>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__TmpHisap__5E5499A8D2871099");

            entity.ToTable("TmpHisapp");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ModuleApp)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpIb>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpIb");

            entity.HasIndex(e => new { e.UserId, e.RegistrationNo }, "IX_TmpIb_UserID_RegistrationNo");

            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpItemMinmax>(entity =>
        {
            entity.HasKey(e => new { e.ItemId, e.LocationId, e.GeneratePeriod }).HasName("PK__tmp_item__26CD4D50D7130E0F");

            entity.ToTable("tmp_itemMinmax");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("LocationID");
            entity.Property(e => e.GeneratePeriod)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.GenerateType).HasDefaultValue(1);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Maximum).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Minimum).HasColumnType("numeric(10, 0)");
        });

        modelBuilder.Entity<TmpItemProductMedicGabungan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ItemProductMedicGabungan");

            entity.Property(e => e.DistockBukan).HasMaxLength(255);
            entity.Property(e => e.Etiket).HasColumnName("etiket");
            entity.Property(e => e.IsAntibiotic).HasMaxLength(255);
            entity.Property(e => e.IsControlExpired).HasMaxLength(255);
            entity.Property(e => e.IsFormularium).HasMaxLength(255);
            entity.Property(e => e.IsGeneric)
                .HasMaxLength(255)
                .HasColumnName("isGeneric");
            entity.Property(e => e.IsHam).HasMaxLength(255);
            entity.Property(e => e.IsLasa).HasMaxLength(255);
            entity.Property(e => e.IsMorphine).HasMaxLength(255);
            entity.Property(e => e.IsNarcotic).HasMaxLength(255);
            entity.Property(e => e.IsOot).HasMaxLength(255);
            entity.Property(e => e.IsPrecursor).HasMaxLength(255);
            entity.Property(e => e.IsPsychotropic).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.SatuanBesar).HasMaxLength(255);
            entity.Property(e => e.SatuanKecil).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpItemProductMedical>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ItemProductMedical");

            entity.Property(e => e.BrandName).HasMaxLength(255);
            entity.Property(e => e.HargaSatuan).HasColumnName("Harga Satuan");
            entity.Property(e => e.IsGeneric).HasColumnName("isGeneric");
            entity.Property(e => e.ItemGroup).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.PriceInBasedUnitWvat).HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(255)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(255)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(255)
                .HasColumnName("SRPurchaseUnit");
        });

        modelBuilder.Entity<TmpItemRequestMaintenance>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.TransDate, e.ToServiceUnitId, e.FollowUpId, e.TransactionNo, e.SequenceNo, e.ItemId });

            entity.ToTable("TmpItemRequestMaintenance");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.FollowUpId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("FollowUpID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<TmpItemTarffGabunganService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ItemTarffGabunganService");

            entity.Property(e => e.EKlaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("E-Klaim Tarif Group");
            entity.Property(e => e.EklaimId)
                .HasMaxLength(255)
                .HasColumnName("EKlaimID");
            entity.Property(e => e.ItemGroup).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpItemTariffEdelweise>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ItemTariffEdelweise");

            entity.Property(e => e.EKlaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("E-Klaim Tarif Group");
            entity.Property(e => e.EklaimId).HasColumnName("EKlaimID");
            entity.Property(e => e.F33).HasMaxLength(255);
            entity.Property(e => e.F34).HasMaxLength(255);
            entity.Property(e => e.F35).HasMaxLength(255);
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("Kode IDI");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpItemTariffUrologi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ItemTariffUrologi");

            entity.Property(e => e.EklaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("EKlaimTarifGroup");
            entity.Property(e => e.Group).HasMaxLength(255);
            entity.Property(e => e.GroupName).HasMaxLength(255);
            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.KodeIdi)
                .HasMaxLength(255)
                .HasColumnName("KodeIDI");
            entity.Property(e => e.NamaPelayanan).HasMaxLength(255);
            entity.Property(e => e.NamaTindakanIdi)
                .HasMaxLength(255)
                .HasColumnName("NamaTIndakanIDI");
        });

        modelBuilder.Entity<TmpKasirGdbaru>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_kasir_gdbaru");

            entity.Property(e => e.BiayaReg).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ByaAdmin).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CashierName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Diskon).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Dokter).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Kartu).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pelunasan).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Pembayaran)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Penjamin)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Piutang).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rounding).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Sarana).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Shift)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShiftName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.StampTime).HasColumnType("datetime");
            entity.Property(e => e.Tagihan).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Tindakan).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpObat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_obat");

            entity.Property(e => e.Antibiotic).HasMaxLength(255);
            entity.Property(e => e.Atc).HasColumnName("ATC");
            entity.Property(e => e.BentukDosisDosageForm)
                .HasMaxLength(255)
                .HasColumnName("Bentuk Dosis (Dosage Form)");
            entity.Property(e => e.CekExpired)
                .HasMaxLength(255)
                .HasColumnName("Cek Expired");
            entity.Property(e => e.Ddd)
                .HasMaxLength(255)
                .HasColumnName("DDD");
            entity.Property(e => e.DosageForm)
                .HasMaxLength(255)
                .HasColumnName("Dosage Form");
            entity.Property(e => e.DosageForms)
                .HasMaxLength(255)
                .HasColumnName("Dosage forms");
            entity.Property(e => e.EkatalogNonEkatalog)
                .HasMaxLength(255)
                .HasColumnName("Ekatalog/Non Ekatalog");
            entity.Property(e => e.F41).HasMaxLength(255);
            entity.Property(e => e.FormulariumNonFormularium)
                .HasMaxLength(255)
                .HasColumnName("Formularium/ Non Formularium");
            entity.Property(e => e.FornasNonFornas)
                .HasMaxLength(255)
                .HasColumnName("Fornas/Non Fornas");
            entity.Property(e => e.Generic).HasMaxLength(255);
            entity.Property(e => e.GolonganObat)
                .HasMaxLength(255)
                .HasColumnName("Golongan Obat");
            entity.Property(e => e.Group).HasMaxLength(255);
            entity.Property(e => e.HargaSatuan).HasColumnName("Harga Satuan");
            entity.Property(e => e.Id)
                .HasMaxLength(255)
                .HasColumnName("ID");
            entity.Property(e => e.InventoryNonInventory)
                .HasMaxLength(255)
                .HasColumnName("Inventory / Non Inventory");
            entity.Property(e => e.KekuatanObat).HasColumnName("Kekuatan Obat ");
            entity.Property(e => e.KelasTerapi)
                .HasMaxLength(255)
                .HasColumnName("Kelas Terapi");
            entity.Property(e => e.KeteranganKhusus)
                .HasMaxLength(255)
                .HasColumnName("Keterangan Khusus");
            entity.Property(e => e.KonversiJualBeli).HasColumnName("Konversi_Jual <> Beli");
            entity.Property(e => e.KronisNonKronis)
                .HasMaxLength(255)
                .HasColumnName("Kronis/ Non Kronis");
            entity.Property(e => e.LasaHighAlert)
                .HasMaxLength(255)
                .HasColumnName("Lasa/ High Alert");
            entity.Property(e => e.Morphine).HasMaxLength(255);
            entity.Property(e => e.NamaDagang)
                .HasMaxLength(255)
                .HasColumnName("Nama Dagang");
            entity.Property(e => e.NamaGenerik)
                .HasMaxLength(255)
                .HasColumnName("Nama Generik");
            entity.Property(e => e.NamaMaterial)
                .HasMaxLength(255)
                .HasColumnName("Nama Material");
            entity.Property(e => e.Narcotic).HasMaxLength(255);
            entity.Property(e => e.NonGeneric)
                .HasMaxLength(255)
                .HasColumnName("Non Generic");
            entity.Property(e => e.Pabrik).HasMaxLength(255);
            entity.Property(e => e.ParetoAbc)
                .HasMaxLength(255)
                .HasColumnName("Pareto ABC");
            entity.Property(e => e.Precursor).HasMaxLength(255);
            entity.Property(e => e.Psychotropic).HasMaxLength(255);
            entity.Property(e => e.RetriksiFornas)
                .HasMaxLength(255)
                .HasColumnName("Retriksi Fornas");
            entity.Property(e => e.RetriksiKronisBpjs)
                .HasMaxLength(255)
                .HasColumnName("Retriksi Kronis BPJS");
            entity.Property(e => e.SatuanBesar)
                .HasMaxLength(255)
                .HasColumnName("Satuan Besar");
            entity.Property(e => e.SatuanJual)
                .HasMaxLength(255)
                .HasColumnName("Satuan Jual");
            entity.Property(e => e.SatuanKekuatan)
                .HasMaxLength(255)
                .HasColumnName("Satuan Kekuatan");
            entity.Property(e => e.SatuanKemasan)
                .HasMaxLength(255)
                .HasColumnName("Satuan kemasan");
            entity.Property(e => e.UkuranKemasan).HasColumnName("Ukuran Kemasan");
            entity.Property(e => e.UkuranKemasanDanSatuanKekuatan)
                .HasMaxLength(255)
                .HasColumnName("Ukuran kemasan dan satuan kekuatan");
            entity.Property(e => e.Ven)
                .HasMaxLength(255)
                .HasColumnName("VEN");
        });

        modelBuilder.Entity<TmpOperationalDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_OperationalDate");

            entity.Property(e => e.EndTime1).HasColumnType("datetime");
            entity.Property(e => e.EndTime2).HasMaxLength(255);
            entity.Property(e => e.EndTime3).HasMaxLength(255);
            entity.Property(e => e.EndTime4).HasMaxLength(255);
            entity.Property(e => e.EndTime5).HasMaxLength(255);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(255)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OperationalTimeBackcolor).HasMaxLength(255);
            entity.Property(e => e.OperationalTimeId).HasColumnName("OperationalTimeID");
            entity.Property(e => e.OperationalTimeName).HasMaxLength(255);
            entity.Property(e => e.StartTime1).HasColumnType("datetime");
            entity.Property(e => e.StartTime2).HasMaxLength(255);
            entity.Property(e => e.StartTime3).HasMaxLength(255);
            entity.Property(e => e.StartTime4).HasMaxLength(255);
            entity.Property(e => e.StartTime5).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpOrganizationUnit2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_OrganizationUnit2");

            entity.Property(e => e.OrganizationName).HasMaxLength(255);
            entity.Property(e => e.OrganizationUnitCode).HasMaxLength(255);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
        });

        modelBuilder.Entity<TmpParamedicCooGrade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ParamedicCooGrade");

            entity.Property(e => e.ParamedicId)
                .HasMaxLength(255)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpParamedicFee>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_ParamedicFee");

            entity.Property(e => e.DokterYangMenjawab)
                .HasMaxLength(255)
                .HasColumnName("Dokter Yang Menjawab");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .HasColumnName("Nama Pasien");
            entity.Property(e => e.NamaPemeriksaan)
                .HasMaxLength(255)
                .HasColumnName("Nama Pemeriksaan");
            entity.Property(e => e.NoRm)
                .HasMaxLength(255)
                .HasColumnName("No# RM");
            entity.Property(e => e.NoTransaksi)
                .HasMaxLength(255)
                .HasColumnName("No Transaksi");
            entity.Property(e => e.Penjamin).HasMaxLength(255);
            entity.Property(e => e.Qty).HasColumnType("money");
            entity.Property(e => e.TglHasilTest)
                .HasColumnType("datetime")
                .HasColumnName("Tgl Hasil Test");
            entity.Property(e => e.TglPeriksa)
                .HasColumnType("datetime")
                .HasColumnName("Tgl Periksa");
            entity.Property(e => e.TglRealisasi)
                .HasColumnType("datetime")
                .HasColumnName("Tgl Realisasi");
        });

        modelBuilder.Entity<TmpParamedicSchedule>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ParamedicSchedule");

            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(255)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(255)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<TmpParamedicScheduleDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ParamedicScheduleDate");

            entity.Property(e => e.ClosedDateTime1).HasMaxLength(255);
            entity.Property(e => e.ClosedDateTime2).HasMaxLength(255);
            entity.Property(e => e.ClosedDateTime3).HasMaxLength(255);
            entity.Property(e => e.ClosedDateTime4).HasMaxLength(255);
            entity.Property(e => e.ClosedDateTime5).HasMaxLength(255);
            entity.Property(e => e.ClosedTime1ByUserId)
                .HasMaxLength(255)
                .HasColumnName("ClosedTime1ByUserID");
            entity.Property(e => e.ClosedTime2ByUserId)
                .HasMaxLength(255)
                .HasColumnName("ClosedTime2ByUserID");
            entity.Property(e => e.ClosedTime3ByUserId)
                .HasMaxLength(255)
                .HasColumnName("ClosedTime3ByUserID");
            entity.Property(e => e.ClosedTime4ByUserId)
                .HasMaxLength(255)
                .HasColumnName("ClosedTime4ByUserID");
            entity.Property(e => e.ClosedTime5ByUserId)
                .HasMaxLength(255)
                .HasColumnName("ClosedTime5ByUserID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(255)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(255)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OperationalTimeId).HasColumnName("OperationalTimeID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(255)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<TmpPasienTarakan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_PasienTarakan$");

            entity.Property(e => e.AccountNo).HasMaxLength(255);
            entity.Property(e => e.BloodRhesus).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.CityOfBirth).HasMaxLength(255);
            entity.Property(e => e.Company).HasMaxLength(255);
            entity.Property(e => e.CompanyAddress).HasMaxLength(255);
            entity.Property(e => e.County).HasMaxLength(255);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(255)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.DeathCertificateNo).HasMaxLength(255);
            entity.Property(e => e.DeceasedDateTime).HasMaxLength(255);
            entity.Property(e => e.DiagnosticNo).HasMaxLength(255);
            entity.Property(e => e.District).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.EmployeeJobDepartementName).HasMaxLength(255);
            entity.Property(e => e.EmployeeJobTitleName).HasMaxLength(255);
            entity.Property(e => e.EmployeeNo).HasMaxLength(255);
            entity.Property(e => e.EmployeeNumber).HasMaxLength(255);
            entity.Property(e => e.FamilyRegisterNo).HasMaxLength(255);
            entity.Property(e => e.FatherMedicalNo).HasMaxLength(255);
            entity.Property(e => e.FatherName).HasMaxLength(255);
            entity.Property(e => e.FatherOccupationDesc).HasMaxLength(255);
            entity.Property(e => e.FaxNo).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.GuarantorCardNo).HasMaxLength(255);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(255)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.HealthcareId).HasColumnName("HealthcareID");
            entity.Property(e => e.LastDonorDate).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(255)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastVisitDate).HasColumnType("datetime");
            entity.Property(e => e.MemberId)
                .HasMaxLength(255)
                .HasColumnName("MemberID");
            entity.Property(e => e.MiddleName).HasMaxLength(255);
            entity.Property(e => e.MobilePhoneNo).HasMaxLength(255);
            entity.Property(e => e.MotherMedicalNo).HasMaxLength(255);
            entity.Property(e => e.MotherName).HasMaxLength(255);
            entity.Property(e => e.MotherOccupationDesc).HasMaxLength(255);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.OldMedicalNo).HasMaxLength(255);
            entity.Property(e => e.ParentSpouseMedicalNo).HasMaxLength(255);
            entity.Property(e => e.ParentSpouseName).HasMaxLength(255);
            entity.Property(e => e.ParentSpouseOccupationDesc).HasMaxLength(255);
            entity.Property(e => e.PatientId).HasColumnName("PatientID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhoneNo).HasMaxLength(255);
            entity.Property(e => e.PictureFileName).HasMaxLength(255);
            entity.Property(e => e.ResponTime).HasColumnType("datetime");
            entity.Property(e => e.Sex).HasMaxLength(255);
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(255)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.Sreducation)
                .HasMaxLength(255)
                .HasColumnName("SREducation");
            entity.Property(e => e.SremployeeRelationship)
                .HasMaxLength(255)
                .HasColumnName("SREmployeeRelationship");
            entity.Property(e => e.Srethnic)
                .HasMaxLength(255)
                .HasColumnName("SREthnic");
            entity.Property(e => e.SrfatherOccupation)
                .HasMaxLength(255)
                .HasColumnName("SRFatherOccupation");
            entity.Property(e => e.SrinformationFrom)
                .HasMaxLength(255)
                .HasColumnName("SRInformationFrom");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(255)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrmedicalFileBin)
                .HasMaxLength(255)
                .HasColumnName("SRMedicalFileBin");
            entity.Property(e => e.SrmedicalFileStatus)
                .HasMaxLength(255)
                .HasColumnName("SRMedicalFileStatus");
            entity.Property(e => e.SrmotherOccupation)
                .HasMaxLength(255)
                .HasColumnName("SRMotherOccupation");
            entity.Property(e => e.Srnationality)
                .HasMaxLength(255)
                .HasColumnName("SRNationality");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(255)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrparentSpouseOccupation)
                .HasMaxLength(255)
                .HasColumnName("SRParentSpouseOccupation");
            entity.Property(e => e.SrpatienRelation)
                .HasMaxLength(255)
                .HasColumnName("SRPatienRelation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(255)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.SrrelationshipQuality)
                .HasMaxLength(255)
                .HasColumnName("SRRelationshipQuality");
            entity.Property(e => e.Srreligion).HasColumnName("SRReligion");
            entity.Property(e => e.SrresidentialHome)
                .HasMaxLength(255)
                .HasColumnName("SRResidentialHome");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(255)
                .HasColumnName("SRSalutation");
            entity.Property(e => e.Srtitle)
                .HasMaxLength(255)
                .HasColumnName("SRTitle");
            entity.Property(e => e.Ssn).HasMaxLength(255);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.StreetName).HasMaxLength(255);
            entity.Property(e => e.TempAddressCity).HasMaxLength(255);
            entity.Property(e => e.TempAddressCounty).HasMaxLength(255);
            entity.Property(e => e.TempAddressDistrict).HasMaxLength(255);
            entity.Property(e => e.TempAddressPhoneNo).HasMaxLength(255);
            entity.Property(e => e.TempAddressState).HasMaxLength(255);
            entity.Property(e => e.TempAddressStreetName).HasMaxLength(255);
            entity.Property(e => e.TempAddressZipCode).HasMaxLength(255);
            entity.Property(e => e.ValuesOfTrust).HasMaxLength(255);
            entity.Property(e => e.ZipCode).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpPaymentGdbaru>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_payment_gdbaru");

            entity.Property(e => e.Createdby)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StampTime).HasColumnType("datetime");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpPendapatanfartx>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pendapatanfartx");

            entity.Property(e => e.AmountPayment).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Aproval)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("aproval");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount2).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsPrescriptionReturn)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Isvoid)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("isvoid");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Shift)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stime).HasColumnType("datetime");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransSeqNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.UserInput)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserPayment)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpPendapatantx>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pendapatantx");

            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.DiscountAmount2).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.GuarantorAmount).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PatientAmount).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stime).HasColumnType("datetime");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransSeqNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.UserInput)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserPayment)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpPendapatantxBefore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_pendapatantxBefore");

            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stime).HasColumnType("datetime");
            entity.Property(e => e.TransSeqNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpPersonalInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmp_PersonalInfo");

            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.BirthName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CoverageClass)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoverageClassBpjs)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CoverageClassBPJS");
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.Picture)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PlaceBirth)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PostTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PreTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.Srethnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREthnic");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalutation");
        });

        modelBuilder.Entity<TmpPresc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpPresc");

            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ClassDt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClassNameDt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Idgroup)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IDGroup");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ItemIddetail)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemIDDetail");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Jenis)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NameBilling)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Su)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SU");
            entity.Property(e => e.Suname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUName");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TotalGa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TotalGA");
            entity.Property(e => e.TotalPa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TotalPA");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpQuePoli>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmpQuePoli");

            entity.Property(e => e.CallRegNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.QueueName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RecallRegNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<TmpReOrderPo>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.TransDate, e.SupplierId, e.ItemId });

            entity.ToTable("TmpReOrderPo");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SupplierID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Quantity).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<TmpReg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpReg");

            entity.HasIndex(e => new { e.UserId, e.RegistrationNo }, "IX_TmpReg_UserID_RegistrationNo");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoList)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpRekapitulasiRekeningFarmasi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_RekapitulasiRekeningFarmasi");

            entity.Property(e => e.Aproval)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("aproval");
            entity.Property(e => e.Batal)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("batal");
            entity.Property(e => e.Ga)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GA");
            entity.Property(e => e.GroupType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Jual).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Pa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PA");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Penjamin)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Potongan).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.Shift)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.Username)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<TmpRumusJasmed>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TmpRumusJasmed");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Pctg).HasColumnType("decimal(8, 2)");
        });

        modelBuilder.Entity<TmpServiceRoom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_ServiceRoom");

            entity.Property(e => e.BedId)
                .HasMaxLength(255)
                .HasColumnName("BedID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(255)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(255)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoomName).HasMaxLength(255);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(255)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName).HasMaxLength(255);
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(255)
                .HasColumnName("SRGenderType");
        });

        modelBuilder.Entity<TmpSupplier>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_Supplier");

            entity.Property(e => e.BankAccountNo).HasMaxLength(255);
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.ChartOfAccountIdAp).HasColumnName("ChartOfAccountIdAP");
            entity.Property(e => e.ChartOfAccountIdApcost).HasColumnName("ChartOfAccountIdAPCost");
            entity.Property(e => e.ChartOfAccountIdApinProcess).HasColumnName("ChartOfAccountIdAPInProcess");
            entity.Property(e => e.ChartOfAccountIdApnonMedic).HasColumnName("ChartOfAccountIdAPNonMedic");
            entity.Property(e => e.ChartOfAccountIdAptemporary).HasColumnName("ChartOfAccountIdAPTemporary");
            entity.Property(e => e.ChartOfAccountIdAptemporaryNonMedic).HasColumnName("ChartOfAccountIdAPTemporaryNonMedic");
            entity.Property(e => e.ChartOfAccountIdGrantReceive).HasMaxLength(255);
            entity.Property(e => e.ChartOfAccountIdGrantReceiveNmed).HasMaxLength(255);
            entity.Property(e => e.ChartOfAccountIdPoreturn).HasColumnName("ChartOfAccountIdPOReturn");
            entity.Property(e => e.ChartOfAccountIdPoreturnNonMedic).HasColumnName("ChartOfAccountIdPOReturnNonMedic");
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.ContactPerson).HasMaxLength(255);
            entity.Property(e => e.ContractEnd).HasColumnType("datetime");
            entity.Property(e => e.ContractNumber).HasMaxLength(255);
            entity.Property(e => e.ContractStart).HasColumnType("datetime");
            entity.Property(e => e.ContractSummary).HasMaxLength(255);
            entity.Property(e => e.County).HasMaxLength(255);
            entity.Property(e => e.District).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.F26).HasMaxLength(255);
            entity.Property(e => e.F27).HasMaxLength(255);
            entity.Property(e => e.FaxNo).HasMaxLength(255);
            entity.Property(e => e.IsPkp).HasColumnName("IsPKP");
            entity.Property(e => e.MobilePhoneNo).HasMaxLength(255);
            entity.Property(e => e.PbflicenseNo)
                .HasMaxLength(255)
                .HasColumnName("PBFLicenseNo");
            entity.Property(e => e.PbflicenseValidDate)
                .HasMaxLength(255)
                .HasColumnName("PBFLicenseValidDate");
            entity.Property(e => e.PhoneNo).HasMaxLength(255);
            entity.Property(e => e.ShortName).HasMaxLength(255);
            entity.Property(e => e.SrapAgingDateType).HasColumnName("SRApAgingDateType");
            entity.Property(e => e.SrsupplierType)
                .HasMaxLength(255)
                .HasColumnName("SRSupplierType");
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.StreetName).HasMaxLength(255);
            entity.Property(e => e.SubledgerIdAp).HasColumnName("SubledgerIdAP");
            entity.Property(e => e.SubledgerIdApcost).HasColumnName("SubledgerIdAPCost");
            entity.Property(e => e.SubledgerIdApinProcess).HasColumnName("SubledgerIdAPInProcess");
            entity.Property(e => e.SubledgerIdApnonMedic).HasColumnName("SubledgerIdAPNonMedic");
            entity.Property(e => e.SubledgerIdAptemporary).HasColumnName("SubledgerIdAPTemporary");
            entity.Property(e => e.SubledgerIdAptemporaryNonMedic).HasColumnName("SubledgerIdAPTemporaryNonMedic");
            entity.Property(e => e.SubledgerIdGrantReceive).HasMaxLength(255);
            entity.Property(e => e.SubledgerIdPoreturn).HasColumnName("SubledgerIdPOReturn");
            entity.Property(e => e.SubledgerIdPoreturnNonMedic).HasColumnName("SubledgerIdPOReturnNonMedic");
            entity.Property(e => e.SupplierId)
                .HasMaxLength(255)
                .HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName).HasMaxLength(255);
            entity.Property(e => e.TaxRegistrationNo).HasMaxLength(255);
            entity.Property(e => e.ZipCode).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpTariffSusulan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_TariffSusulan");

            entity.Property(e => e.EKlaimTarifGroup)
                .HasMaxLength(255)
                .HasColumnName("E-Klaim Tarif Group");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(255)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.JasaAnakVip).HasColumnName("JasaAnakVIP");
            entity.Property(e => e.JasaAnakVvip).HasColumnName("JasaAnakVVIP");
            entity.Property(e => e.JasaAnastesiVip).HasColumnName("JasaAnastesiVIP");
            entity.Property(e => e.JasaAnastesiVvip).HasColumnName("JasaAnastesiVVIP");
            entity.Property(e => e.JasaDokterVip).HasColumnName("JasaDokterVIP");
            entity.Property(e => e.JasaDokterVvip).HasColumnName("JasaDokterVVIP");
            entity.Property(e => e.KodeItem).HasMaxLength(255);
            entity.Property(e => e.NamaGroup).HasMaxLength(255);
            entity.Property(e => e.NamaItem).HasMaxLength(255);
            entity.Property(e => e.SaranaVip).HasColumnName("SaranaVIP");
            entity.Property(e => e.SaranaVvip).HasColumnName("SaranaVVIP");
            entity.Property(e => e.TotalVip).HasColumnName("TotalVIP");
            entity.Property(e => e.TotalVvip).HasColumnName("TotalVVIP");
        });

        modelBuilder.Entity<TmpTempDataKyw>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_tempDataKyw");

            entity.Property(e => e.Bayar).HasColumnType("money");
            entity.Property(e => e.DischargeDate).HasColumnType("datetime");
            entity.Property(e => e.Diskon).HasColumnType("money");
            entity.Property(e => e.Nilai).HasColumnType("money");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpTemptampungDataKurangMampu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_temptampungDataKurangMampu");

            entity.Property(e => e.Adm).HasColumnType("money");
            entity.Property(e => e.DiskonAdm).HasColumnType("money");
            entity.Property(e => e.DiskonDokter).HasColumnType("money");
            entity.Property(e => e.DiskonGlobal).HasColumnType("money");
            entity.Property(e => e.DiskonIgd)
                .HasColumnType("money")
                .HasColumnName("DiskonIGD");
            entity.Property(e => e.DiskonKartu).HasColumnType("money");
            entity.Property(e => e.DiskonObat).HasColumnType("money");
            entity.Property(e => e.DiskonPenunjang).HasColumnType("money");
            entity.Property(e => e.DiskonPoli).HasColumnType("money");
            entity.Property(e => e.DiskonRegistrasi).HasColumnType("money");
            entity.Property(e => e.Dokter).HasColumnType("money");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Igd)
                .HasColumnType("money")
                .HasColumnName("IGD");
            entity.Property(e => e.JmlBayar).HasColumnType("money");
            entity.Property(e => e.Kartu).HasColumnType("money");
            entity.Property(e => e.Obat).HasColumnType("money");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Penunjang).HasColumnType("money");
            entity.Property(e => e.Poli).HasColumnType("money");
            entity.Property(e => e.Registrasi).HasColumnType("money");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpTemptampungDataKurangMampuRekap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_temptampungDataKurangMampuRekap");

            entity.Property(e => e.Adm).HasColumnType("money");
            entity.Property(e => e.DiskonAdm).HasColumnType("money");
            entity.Property(e => e.DiskonDokter).HasColumnType("money");
            entity.Property(e => e.DiskonGlobal).HasColumnType("money");
            entity.Property(e => e.DiskonIgd)
                .HasColumnType("money")
                .HasColumnName("DiskonIGD");
            entity.Property(e => e.DiskonKartu).HasColumnType("money");
            entity.Property(e => e.DiskonObat).HasColumnType("money");
            entity.Property(e => e.DiskonPenunjang).HasColumnType("money");
            entity.Property(e => e.DiskonPoli).HasColumnType("money");
            entity.Property(e => e.DiskonRegistrasi).HasColumnType("money");
            entity.Property(e => e.Dokter).HasColumnType("money");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Igd)
                .HasColumnType("money")
                .HasColumnName("IGD");
            entity.Property(e => e.JmlBayar).HasColumnType("money");
            entity.Property(e => e.Kartu).HasColumnType("money");
            entity.Property(e => e.Obat).HasColumnType("money");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.Penunjang).HasColumnType("money");
            entity.Property(e => e.Poli).HasColumnType("money");
            entity.Property(e => e.Registrasi).HasColumnType("money");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpTemptampungDataPasien>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_temptampungDataPasien");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoIgd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationNoIGD");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpTemptampungDataPasienRekap>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmp_temptampungDataPasienRekap");

            entity.Property(e => e.GuarantorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoIgd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RegistrationNoIGD");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TmpTranChargesPerShift>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Tmp_TranChargesPerShift");

            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Shift)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ShiftName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StampTime).HasColumnType("datetime");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpTx>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpTx");

            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ClassDt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClassNameDt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Idgroup)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IDGroup");
            entity.Property(e => e.ItemDr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ItemDR");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ItemIddetail)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemIDDetail");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NameBilling)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Su)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SU");
            entity.Property(e => e.Suname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUName");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TotalGa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TotalGA");
            entity.Property(e => e.TotalPa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TotalPA");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Tmpregip>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tmpregip");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransCharge>(entity =>
        {
            entity.HasKey(e => e.TransactionNo)
                .HasName("PK_TransChargesHd")
                .IsClustered(false);

            entity.HasIndex(e => new { e.IsVoid, e.IsOrder }, "DPA_RECIDX_36");

            entity.HasIndex(e => new { e.IsApproved, e.IsOrder }, "DPA_RECIDX_4");

            entity.HasIndex(e => new { e.FromServiceUnitId, e.IsVoid, e.IsOrder }, "DPA_RECIDX_9");

            entity.HasIndex(e => new { e.IsApproved, e.IsVoid, e.ReferenceNo }, "IX_TransCharges_IsApproved_IsVoid_ReferenceNo");

            entity.HasIndex(e => new { e.RegistrationNo, e.ToServiceUnitId }, "IX_TransCharges_RegistrationNo_ToServiceUnitID");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsOrder, e.IsCorrection, e.PackageReferenceNo, e.ToServiceUnitId, e.FromServiceUnitId, e.TransactionNo }, "_dta_index_TransCharges_5_1730209314__K2_K17_K18_K30_K7_K6_K1_3_5_20_24_29");

            entity.HasIndex(e => new { e.PackageReferenceNo, e.FromServiceUnitId, e.RegistrationNo, e.IsOrder, e.IsCorrection, e.TransactionNo, e.ToServiceUnitId }, "_dta_index_TransCharges_5_1730209314__K30_K6_K2_K17_K18_K1_K7_3_5_20_24_29");

            entity.HasIndex(e => new { e.IsApproved, e.TransactionDate }, "idx_TransCharges_001");

            entity.HasIndex(e => new { e.IsApproved, e.IsVoid }, "idx_TransCharges_002");

            entity.HasIndex(e => new { e.IsApproved, e.IsVoid }, "idx_TransCharges_003");

            entity.HasIndex(e => new { e.IsApproved, e.IsOrder }, "idx_TransCharges_IsApproveIsOrder");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.AnalystId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AnalystID");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClassID");
            entity.Property(e => e.ClinicalDiagnosis)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DueDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ExecutionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.IsNonPatient).HasDefaultValue(false);
            entity.Property(e => e.LaboratoryParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LaboratoryParamedicID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PackageReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResponUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ResponUnitID");
            entity.Property(e => e.ResultReadByPhysicianDateTime).HasColumnType("datetime");
            entity.Property(e => e.ResultReadByPhysicianId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ResultReadByPhysicianID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitBookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrbloodSampleTakenBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodSampleTakenBy");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.SrorderStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROrderStatus");
            entity.Property(e => e.SrprodiaContractId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProdiaContractID");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.SrtypeResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTypeResult");
            entity.Property(e => e.SurgicalPackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SurgicalPackageID");
            entity.Property(e => e.TariffDiscountForRoomIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ValidatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidatedByUserID");
            entity.Property(e => e.ValidatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.RegistrationNoNavigation).WithMany(p => p.TransCharges)
                .HasForeignKey(d => d.RegistrationNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefTransHargesHdToRegistration");
        });

        modelBuilder.Entity<TransChargesExtramuralItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TransCha__3214EC275CC58DA7");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.GuarantyAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.SrextramuralItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRExtramuralItem");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransChargesHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.TransactionNo, e.RegistrationNo });

            entity.ToTable("TransChargesHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DueDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ExecutionDate).HasColumnType("datetime");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ResponUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ResponUnitID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.SrtypeResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTypeResult");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransChargesItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo }).HasName("PK_TransChargesDt");

            entity.ToTable("TransChargesItem");

            entity.HasIndex(e => new { e.ReferenceNo, e.IsVoid }, "IX_TransChargesItem_ReferenceNo_IsVoid");

            entity.HasIndex(e => new { e.TransactionNo, e.IsBillProceed, e.SequenceNo, e.ItemId, e.IsPackage, e.IsOrderRealization, e.Price, e.DiscountAmount, e.CitoAmount }, "_dta_index_TransChargesItem_13_686625489__K1_K23_K2_K5_K25_K24_K16_K17_K18_12");

            entity.HasIndex(e => new { e.IsPackage, e.IsBillProceed, e.ItemId, e.IsOrderRealization, e.Price, e.DiscountAmount, e.CitoAmount, e.TransactionNo }, "_dta_index_TransChargesItem_13_686625489__K25_K23_K5_K24_K16_K17_K18_K1_2_12");

            entity.HasIndex(e => new { e.TransactionNo, e.ParentNo, e.SequenceNo, e.IsExtraItem, e.IsSelectedExtraItem, e.ItemId, e.ToServiceUnitId }, "_dta_index_TransChargesItem_5_1038066884__K1_K32_K2_K44_K45_K5_K36_12_16_17_18_23_26_27_29_35");

            entity.HasIndex(e => new { e.SequenceNo, e.TransactionNo, e.ToServiceUnitId, e.ParentNo, e.IsSelectedExtraItem, e.IsExtraItem }, "_dta_index_TransChargesItem_5_1038066884__K2_K1_K36_K32_K45_K44_5_12_16_17_18_23_26_27_29_35");

            entity.HasIndex(e => new { e.ReferenceNo, e.ReferenceSequenceNo }, "idx_TransChargesItem_001");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("AssetID");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BasicCitoAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CasemixApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CasemixApprovedByUserID");
            entity.Property(e => e.CasemixApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ChargeQuantity)
                .HasDefaultValue(1m)
                .HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CitoAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CommunicationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CommunicationID");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FilmNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.IsAdminCalculation).HasDefaultValue(true);
            entity.Property(e => e.IsAssetUtilization).HasDefaultValue(false);
            entity.Property(e => e.IsCorrection).HasDefaultValue(false);
            entity.Property(e => e.IsSendToLis).HasColumnName("IsSendToLIS");
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.LastPaymentConfirmedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastPaymentConfirmedByUserID");
            entity.Property(e => e.LastPaymentConfirmedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PaymentConfirmedBy)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PaymentConfirmedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceAdjusted).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RealizationDateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationUserID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.ResultValue)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SecondParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Diisi untuk rawat inap oelh Dokter Pengganti atau dokter anestesi")
                .HasColumnName("SecondParamedicID");
            entity.Property(e => e.SpecimenReceivedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SpecimenReceivedByUserID");
            entity.Property(e => e.SpecimenReceivedDateTime).HasColumnType("datetime");
            entity.Property(e => e.SpecimenSubmittedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SpecimenSubmittedByUserID");
            entity.Property(e => e.SpecimenSubmittedDateTime).HasColumnType("datetime");
            entity.Property(e => e.SpecimenTakenByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SpecimenTakenByUserID");
            entity.Property(e => e.SpecimenTakenDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrcenterId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRCenterID");
            entity.Property(e => e.SrcitoPercentage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCitoPercentage");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.StockQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TariffDate).HasColumnType("datetime");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.UpdateRealizationDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateRealizationUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UpdateRealizationUserID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.TransactionNoNavigation).WithMany(p => p.TransChargesItems)
                .HasForeignKey(d => d.TransactionNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefTransChargesDtToTransChargesHd_");
        });

        modelBuilder.Entity<TransChargesItemComp>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("TransChargesItemComp", tb => tb.HasTrigger("TriggerTransChargesItemCompBeforeDelete"));

            entity.HasIndex(e => e.ParamedicId, "DPA_RECIDX_1");

            entity.HasIndex(e => new { e.TransactionNo, e.TariffComponentId, e.ParamedicId, e.SequenceNo, e.Price, e.CitoAmount, e.DiscountAmount }, "_dta_index_TransChargesItemComp_13_347148282__K1_K3_K6_K2_K4_K11_K5");

            entity.HasIndex(e => e.TariffComponentId, "idx_TransChargesItemComp_001");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CitoAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeCalculated).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeDiscount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeDiscountPercentage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeSettledNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceAdjusted).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TransChargesItemCompHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.TransactionNo, e.SequenceNo, e.TariffComponentId });

            entity.ToTable("TransChargesItemCompHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TransChargesItemCompTempPaymentReturn>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.TariffComponentId, e.IntermBillNo, e.PaymentNo });

            entity.ToTable("TransChargesItemCompTempPaymentReturn");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TransChargesItemConsumption>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.DetailItemId });

            entity.ToTable("TransChargesItemConsumption");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.DetailItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DetailItemID");
            entity.Property(e => e.AveragePrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FifoPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyRealization).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<TransChargesItemFilmConsumption>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.SrfilmId });

            entity.ToTable("TransChargesItemFilmConsumption");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.SrfilmId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFilmID");
            entity.Property(e => e.CineTime).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Ffd).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Kv).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.KvC)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("Kv_c");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Ma).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.MaC)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("Ma_c");
            entity.Property(e => e.Mas).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.MasC)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("Mas_c");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.S).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SC)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("S_c");
            entity.Property(e => e.ScreeningTime).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<TransChargesItemHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.TransactionNo, e.SequenceNo });

            entity.ToTable("TransChargesItemHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CitoAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FilmNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SecondParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SecondParamedicID");
            entity.Property(e => e.SrcenterId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRCenterID");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.StockQuantity).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<TransChargesItemImage>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.ImageNo });

            entity.ToTable("TransChargesItemImage");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DocumentImage).HasColumnType("image");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNotes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransChargesItemTempCoverage>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.TransactionNo, e.SequenceNo, e.ChargeClassId });

            entity.ToTable("TransChargesItemTempCoverage");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransChargesItemTempPaymentReturn>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.SequenceNo, e.IntermBillNo, e.PaymentNo });

            entity.ToTable("TransChargesItemTempPaymentReturn");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TransChargesItemTemplate>(entity =>
        {
            entity.HasKey(e => new { e.TemplateNo, e.SequenceNo });

            entity.ToTable("TransChargesItemTemplate");

            entity.Property(e => e.TemplateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransChargesLaboratoryCritical>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.LisTestId });

            entity.ToTable("TransChargesLaboratoryCritical");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LisTestId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LisTestID");
            entity.Property(e => e.CompletelyReportedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CompletelyReportedByUserID");
            entity.Property(e => e.CompletelyReportedDateTime).HasColumnType("datetime");
            entity.Property(e => e.NurseNotes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhysicianNotes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReadByPhysicianDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReadByPhysicianId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReadByPhysicianID");
            entity.Property(e => e.ReportedByNurseDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReportedByNurseId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReportedByNurseID");
        });

        modelBuilder.Entity<TransChargesTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateNo);

            entity.ToTable("TransChargesTemplate");

            entity.Property(e => e.TemplateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
        });

        modelBuilder.Entity<TransChargesVisiteItem>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId });

            entity.ToTable("TransChargesVisiteItem");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.CreatedDateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedDateByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransChargesVisiteItemRealization>(entity =>
        {
            entity.HasKey(e => new { e.TransactionNo, e.ItemId, e.RegistrationNo });

            entity.ToTable("TransChargesVisiteItemRealization");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransDocumentBpjsclaim>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).HasName("PK__TransDoc__554342D830FC8CC0");

            entity.ToTable("TransDocumentBPJSClaim");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransPayment>(entity =>
        {
            entity.HasKey(e => e.PaymentNo)
                .HasName("PK_TransPaymentHd")
                .IsClustered(false);

            entity.ToTable("TransPayment");

            entity.HasIndex(e => new { e.PaymentNo, e.IsApproved, e.IsVoid }, "_dta_index_TransPayment_13_398624463__K1_K16_K15");

            entity.HasIndex(e => new { e.RegistrationNo, e.TransactionCode, e.IsVoid, e.IsApproved, e.GuarantorId, e.PaymentNo }, "_dta_index_TransPayment_13_398624463__K3_K2_K15_K16_K21_K1");

            entity.HasIndex(e => new { e.IsApproved, e.IsToGuarantor, e.TransactionCode }, "idx_TransPayment_001");

            entity.HasIndex(e => new { e.PaymentNo, e.IsVoid }, "idx_TransPayment_PaymentNo_IsVoid").HasFillFactor(50);

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ApproveByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApproveByUserID");
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.CashManagementNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Initial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsPrinted)
                .IsRequired()
                .HasDefaultValueSql("('')");
            entity.Property(e => e.IsVisiteDownPayment).HasDefaultValue(false);
            entity.Property(e => e.LastPrintedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastPrintedByUserID");
            entity.Property(e => e.LastPrintedDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PaymentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PaymentReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PaymentReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PaymentTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.PrintReceiptAsName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RemainingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Srpromotion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRPromotion");
            entity.Property(e => e.TotalPaymentAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoidReason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransPaymentAdditionalCharge>(entity =>
        {
            entity.HasKey(e => new { e.SrcafeAdditionalCharges, e.PaymentNo }).HasName("PK__TransPay__4C28D5FABCDD4D29");

            entity.Property(e => e.SrcafeAdditionalCharges)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRCafeAdditionalCharges");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ChargeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransPaymentCorrection>(entity =>
        {
            entity.HasKey(e => e.PaymentCorrectionNo).HasName("PK__TransPay__FE364A32E4B768E9");

            entity.ToTable("TransPaymentCorrection");

            entity.Property(e => e.PaymentCorrectionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DateApproved).HasColumnType("datetime");
            entity.Property(e => e.DateVoid).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentCorrectionDate).HasColumnType("datetime");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
        });

        modelBuilder.Entity<TransPaymentItem>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.SequenceNo })
                .HasName("PK_TransPaymentDt")
                .IsClustered(false);

            entity.ToTable("TransPaymentItem");

            entity.HasIndex(e => new { e.PaymentNo, e.SrpaymentType }, "_dta_index_TransPaymentItem_13_206623779__K1_K3_13");

            entity.HasIndex(e => new { e.PaymentNo, e.SrpaymentType, e.SrpaymentMethod, e.SequenceNo }, "_dta_index_TransPaymentItem_13_206623779__K1_K3_K4_K2");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AmountReceived).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Balance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CardFeeAmount)
                .HasDefaultValue(0m)
                .HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CardHolderName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("000");
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardType");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRPaymentType");

            entity.HasOne(d => d.PaymentNoNavigation).WithMany(p => p.TransPaymentItems)
                .HasForeignKey(d => d.PaymentNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefTransPaymentDtToTransPaymentHd_");
        });

        modelBuilder.Entity<TransPaymentItemCorrection>(entity =>
        {
            entity.HasKey(e => new { e.PaymentCorrectionNo, e.PaymentNo, e.SequenceNo }).HasName("PK__TransPay__5C39CBF7770101FF");

            entity.ToTable("TransPaymentItemCorrection");

            entity.Property(e => e.PaymentCorrectionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CardFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardType");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
        });

        modelBuilder.Entity<TransPaymentItemIntermBill>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.IntermBillNo });

            entity.ToTable("TransPaymentItemIntermBill");

            entity.HasIndex(e => new { e.IntermBillNo, e.IsPaymentReturned }, "idx_TransPaymentItemIntermBill_IntermBillNo_IsPaymentReturned").HasFillFactor(50);

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPaymentItemIntermBillGuarantor>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.IntermBillNo });

            entity.ToTable("TransPaymentItemIntermBillGuarantor");

            entity.HasIndex(e => e.IsPaymentProceed, "_dta_index_TransPaymentItemIntermBillGuaran_13_2135678656__K3");

            entity.HasIndex(e => new { e.IntermBillNo, e.IsPaymentReturned }, "idx_TransPaymentItemIntermBillGuarantor_IntermBillNo_IsPaymentReturned").HasFillFactor(50);

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPaymentItemOrder>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.TransactionNo, e.SequenceNo }).HasName("PK_TransPaymentItemOrder_1");

            entity.ToTable("TransPaymentItemOrder");

            entity.HasIndex(e => new { e.IsPaymentProceed, e.PaymentNo }, "_dta_index_TransPaymentItemOrder_13_126623494__K9_K1_2_3");

            entity.HasIndex(e => new { e.IsPaymentProceed, e.IsPaymentReturned }, "idx_TransPaymentItemOrder_001");

            entity.HasIndex(e => new { e.TransactionNo, e.IsPaymentProceed, e.IsPaymentReturned }, "idx_TransPaymentItemOrder_002");

            entity.HasIndex(e => new { e.TransactionNo, e.SequenceNo, e.IsPaymentReturned }, "idx_TransPaymentItemOrder_TransactionNo_SequenceNo_IsPaymentReturned").HasFillFactor(50);

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.JournalIncomePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TransPaymentItemVisite>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.PatientId, e.ItemId }).HasName("PK_TransPaymentItemVisite_1");

            entity.ToTable("TransPaymentItemVisite");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Discount).HasColumnType("numeric(5, 2)");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<TransPaymentPatient>(entity =>
        {
            entity.HasKey(e => e.PaymentNo).IsClustered(false);

            entity.ToTable("TransPaymentPatient");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CashManagementNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PaymentDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PaymentTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrpatientDepositType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientDepositType");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TransPaymentPatientItem>(entity =>
        {
            entity.HasKey(e => new { e.PaymentNo, e.SequenceNo }).IsClustered(false);

            entity.ToTable("TransPaymentPatientItem");

            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.CardFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CardHolderName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardType");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
        });

        modelBuilder.Entity<TransPaymentReceipt>(entity =>
        {
            entity.HasKey(e => e.PaymentReceiptNo).IsClustered(false);

            entity.ToTable("TransPaymentReceipt");

            entity.Property(e => e.PaymentReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.IsPrinted)
                .IsRequired()
                .HasDefaultValueSql("('')");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PaymentReceiptDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PaymentReceiptTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("00:00")
                .IsFixedLength();
            entity.Property(e => e.PrintReceiptAsName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPaymentReceiptItem>(entity =>
        {
            entity.HasKey(e => new { e.PaymentReceiptNo, e.PaymentNo })
                .HasName("PK_TransPaymentReceiptDt")
                .IsClustered(false);

            entity.ToTable("TransPaymentReceiptItem");

            entity.Property(e => e.PaymentReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.PaymentNoNavigation).WithMany(p => p.TransPaymentReceiptItems)
                .HasForeignKey(d => d.PaymentNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefTransPaymentReceiptDtToTransPaymentHd");

            entity.HasOne(d => d.PaymentReceiptNoNavigation).WithMany(p => p.TransPaymentReceiptItems)
                .HasForeignKey(d => d.PaymentReceiptNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("RefTransPaymentReceiptDtToTransPaymentReceiptHd");
        });

        modelBuilder.Entity<TransPrescription>(entity =>
        {
            entity.HasKey(e => e.PrescriptionNo).HasName("PK116");

            entity.ToTable("TransPrescription");

            entity.HasIndex(e => new { e.IsApproval, e.IsPrescriptionReturn, e.ReferenceNo }, "DPA_RECIDX_35");

            entity.HasIndex(e => new { e.IsApproval, e.PrescriptionDate, e.SrprescriptionCategory }, "IX_TransPrescription_IsApproval_PrescriptionDate_SRPrescriptionCategory");

            entity.HasIndex(e => new { e.IsApproval, e.PrescriptionNo }, "IX_TransPrescription_IsApproval_PrescriptionNo");

            entity.HasIndex(e => new { e.RegistrationNo, e.IsApproval }, "IX_TransPrescription_RegistrationNo_IsApproval");

            entity.HasIndex(e => new { e.IsApproval, e.IsPrescriptionReturn, e.IsBillProceed, e.PrescriptionDate }, "idx_TransPrescription_001");

            entity.HasIndex(e => new { e.IsApproval, e.IsPrescriptionReturn, e.IsBillProceed, e.FromServiceUnitId, e.PrescriptionDate }, "idx_TransPrescription_002");

            entity.HasIndex(e => new { e.ServiceUnitId, e.IsApproval, e.IsPrescriptionReturn, e.IsFromSoap, e.IsUnitDosePrescription, e.IsProceedByPharmacist }, "idx_TransPrescription_003");

            entity.HasIndex(e => new { e.ServiceUnitId, e.IsApproval, e.IsPrescriptionReturn, e.IsFromSoap, e.IsUnitDosePrescription, e.IsProceedByPharmacist }, "idx_TransPrescription_004");

            entity.HasIndex(e => new { e.IsApproval, e.IsVoid, e.IsBillProceed }, "idx_TransPrescription_005");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdditionalNote)
                .HasMaxLength(800)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalDateTime).HasColumnType("datetime");
            entity.Property(e => e.ApprovedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CompleteByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CompleteByUserID");
            entity.Property(e => e.CompleteDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeliverByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DeliverByUserID");
            entity.Property(e => e.DeliverDateTime).HasColumnType("datetime");
            entity.Property(e => e.ExecutionDate).HasColumnType("datetime");
            entity.Property(e => e.FromBedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromBedID");
            entity.Property(e => e.FromRoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromRoomID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.InProgressByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InProgressByUserID");
            entity.Property(e => e.InProgressDateTime).HasColumnType("datetime");
            entity.Property(e => e.IsFromSoap).HasColumnName("IsFromSOAP");
            entity.Property(e => e.KioskQueueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.NoTelp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReviewByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReviewByUserID");
            entity.Property(e => e.ReviewedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ReviewedByUserID");
            entity.Property(e => e.ReviewedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Rtype)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.Srfloor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRFloor");
            entity.Property(e => e.SrkioskQueueType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKioskQueueType");
            entity.Property(e => e.SrprescriptionCategory)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRPrescriptionCategory");
            entity.Property(e => e.TextPrescription).IsUnicode(false);
            entity.Property(e => e.UnapprovedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UnapprovedByUserID");
            entity.Property(e => e.UnapprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VoidReason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransPrescriptionFloorSeqNo>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionDate, e.Srfloor, e.ServiceUnitId, e.ShiftId, e.Rtype });

            entity.ToTable("TransPrescriptionFloorSeqNo");

            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.Srfloor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFloor");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ShiftId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ShiftID");
            entity.Property(e => e.Rtype)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPrescriptionHighAlert>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SrprescriptionHalert });

            entity.ToTable("TransPrescriptionHighAlert");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrprescriptionHalert)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRPrescriptionHAlert");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPrescriptionHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.PrescriptionNo });

            entity.ToTable("TransPrescriptionHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalDateTime).HasColumnType("datetime");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.DeliverDateTime).HasColumnType("datetime");
            entity.Property(e => e.IsFromSoap).HasColumnName("IsFromSOAP");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<TransPrescriptionItem>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SequenceNo }).HasName("PK120");

            entity.ToTable("TransPrescriptionItem", tb => tb.HasTrigger("TriggerTransPrescriptionItemBeforeDelete"));

            entity.HasIndex(e => e.ItemInterventionId, "IX_TransPrescriptionItem_ItemInterventionID");

            entity.HasIndex(e => new { e.IsRflag, e.IsCompound }, "idx_TransPrescriptionItem_001");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Acpcdc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ACPCDC");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CasemixApprovedByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CasemixApprovedByUserID");
            entity.Property(e => e.CasemixApprovedDateTime).HasColumnType("datetime");
            entity.Property(e => e.ConsumeMethod)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeliveryQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DosageQty)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DosingPeriod)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DurationRelease).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EmbalaceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmbalaceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmbalaceID");
            entity.Property(e => e.EmbalaceQty)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.InitialPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsReturned).HasDefaultValue(false);
            entity.Property(e => e.IsRflag).HasColumnName("IsRFlag");
            entity.Property(e => e.IsUseSweetener).HasDefaultValue(false);
            entity.Property(e => e.IsUsingDosageUnit).HasDefaultValue(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemInterventionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ItemInterventionID");
            entity.Property(e => e.ItemQtyInString)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IterText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserHostName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumberOfDosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.OrderText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OriConsumeQty)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OriDosageQty)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OriItemQtyInString)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OriPrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.OriResultQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.OriSrconsumeMethod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OriSRConsumeMethod");
            entity.Property(e => e.OriSrconsumeUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OriSRConsumeUnit");
            entity.Property(e => e.OriSrdosageUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OriSRDosageUnit");
            entity.Property(e => e.OriSritemUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OriSRItemUnit");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty23Days).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.RecipeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ResultQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SrinterventionReason)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRInterventionReason");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.SweetenerAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TakenQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.VerifiedByUserHostName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VerifiedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VerifiedByUserID");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.PrescriptionNoNavigation).WithMany(p => p.TransPrescriptionItems)
                .HasForeignKey(d => d.PrescriptionNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransPrescriptionItem_TransPrescription");
        });

        modelBuilder.Entity<TransPrescriptionItemEtiquette>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SequenceNo }).HasName("PK__TransPre__FBBE5FF50A8AE947");

            entity.ToTable("TransPrescriptionItemEtiquette");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeMethod)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateUserID");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Keeping)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
            entity.Property(e => e.SpecificInfo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransPrescriptionItemHistory>(entity =>
        {
            entity.HasKey(e => new { e.RecalculationProcessNo, e.PrescriptionNo, e.SequenceNo });

            entity.ToTable("TransPrescriptionItemHistory");

            entity.Property(e => e.RecalculationProcessNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Acpcdc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ACPCDC");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ConsumeMethod)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeMethodText)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DosingPeriod)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DurationRelease).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.EmbalaceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmbalaceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmbalaceID");
            entity.Property(e => e.InitialPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsRflag).HasColumnName("IsRFlag");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemInterventionId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemInterventionID");
            entity.Property(e => e.ItemQtyInString)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumberOfDosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ResultQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.SweetenerAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TakenQty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<TransPrescriptionItemTempCoverage>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.PrescriptionNo, e.SequenceNo, e.ChargeClassId });

            entity.ToTable("TransPrescriptionItemTempCoverage");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ResultQty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<TransPrescriptionItemTempPaymentReturn>(entity =>
        {
            entity.HasKey(e => new { e.Prescription, e.SequenceNo, e.IntermBillNo, e.PaymentNo });

            entity.ToTable("TransPrescriptionItemTempPaymentReturn");

            entity.Property(e => e.Prescription)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IntermBillNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Discount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TransPrescriptionItemTemplate>(entity =>
        {
            entity.HasKey(e => new { e.TemplateNo, e.SequenceNo });

            entity.ToTable("TransPrescriptionItemTemplate");

            entity.Property(e => e.TemplateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DosageQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmbalaceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmbalaceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmbalaceID");
            entity.Property(e => e.EmbalaceQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsRflag).HasColumnName("IsRFlag");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemQtyInString)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ParentNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ResultQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrmedicationConsume)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationConsume");
            entity.Property(e => e.TakenQty).HasColumnType("numeric(10, 2)");
        });

        modelBuilder.Entity<TransPrescriptionItemUnitDose>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SequenceNo });

            entity.ToTable("TransPrescriptionItemUnitDose");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.EmbalaceAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ReleaseDate).HasColumnType("datetime");
            entity.Property(e => e.ResultQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SweetenerAmount).HasColumnType("numeric(18, 2)");
        });

        modelBuilder.Entity<TransPrescriptionOrder>(entity =>
        {
            entity.HasKey(e => e.OrderNo).HasName("tpoKey");

            entity.ToTable("TransPrescriptionOrder");

            entity.HasIndex(e => e.IsApproval, "_idx_IsApproval");

            entity.HasIndex(e => e.IsVoid, "_idx_IsVoid");

            entity.HasIndex(e => e.RegistrationNo, "_idx_RegNo");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPrescriptionOrderDetail>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.PrescriptionNo, e.SequenceNo }).HasName("tpodKey");

            entity.ToTable("TransPrescriptionOrderDetail");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreateBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateBy)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
        });

        modelBuilder.Entity<TransPrescriptionProgress>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SrprescriptionProgress });

            entity.ToTable("TransPrescriptionProgress");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrprescriptionProgress)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRPrescriptionProgress");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPrescriptionReview>(entity =>
        {
            entity.HasKey(e => new { e.PrescriptionNo, e.SrprescriptionReview });

            entity.ToTable("TransPrescriptionReview");

            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrprescriptionReview)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SRPrescriptionReview");
            entity.Property(e => e.DrugReviewByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DrugReviewByUserID");
            entity.Property(e => e.DrugReviewDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.NoteByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NoteByUserID");
            entity.Property(e => e.NoteDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrescriptionReviewByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PrescriptionReviewByUserID");
            entity.Property(e => e.PrescriptionReviewDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransPrescriptionTemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransPrescriptionTemplate");

            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TemplateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransaksiBku>(entity =>
        {
            entity.HasKey(e => e.Nomor).HasName("PK__Transaks__2DF24DF5ED21DCA0");

            entity.ToTable("TransaksiBku");

            entity.Property(e => e.Nomor)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsApproved).HasDefaultValue(false);
            entity.Property(e => e.IsVoid).HasDefaultValue(false);
            entity.Property(e => e.KasBank)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pelanggan)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Tanggal).HasColumnType("datetime");
            entity.Property(e => e.Unit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Uraian).IsUnicode(false);
        });

        modelBuilder.Entity<TransaksiBkuDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transaks__3214EC073D7070EB");

            entity.ToTable("TransaksiBkuDetail");

            entity.Property(e => e.KodeItem)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Memo).IsUnicode(false);
            entity.Property(e => e.Nominal).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Nomor)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Posisi)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.NomorNavigation).WithMany(p => p.TransaksiBkuDetails)
                .HasForeignKey(d => d.Nomor)
                .HasConstraintName("FK__Traksaksi__Nomor__1A4D1B1B");
        });

        modelBuilder.Entity<TranspaymentUpdate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TranspaymentUpdate");

            entity.Property(e => e.Closed).HasMaxLength(255);
            entity.Property(e => e.F14).HasMaxLength(255);
            entity.Property(e => e.NamaDokter)
                .HasMaxLength(255)
                .HasColumnName("Nama Dokter");
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(255)
                .HasColumnName("Nama Pasien");
            entity.Property(e => e.No).HasColumnName("No#");
            entity.Property(e => e.NoPayment)
                .HasMaxLength(255)
                .HasColumnName("NO PAYMENT");
            entity.Property(e => e.NoRegistrasi)
                .HasMaxLength(255)
                .HasColumnName("No# Registrasi");
            entity.Property(e => e.NoRm)
                .HasMaxLength(255)
                .HasColumnName("No# RM_");
            entity.Property(e => e.Sep)
                .HasMaxLength(255)
                .HasColumnName("SEP");
            entity.Property(e => e.TotalOutstanding)
                .HasColumnType("money")
                .HasColumnName("Total Outstanding");
            entity.Property(e => e.TotalPasien)
                .HasColumnType("money")
                .HasColumnName("Total Pasien");
            entity.Property(e => e.TotalPembayaran)
                .HasColumnType("money")
                .HasColumnName("Total Pembayaran");
            entity.Property(e => e.TotalPenjaminBayar)
                .HasColumnType("money")
                .HasColumnName("Total Penjamin Bayar");
            entity.Property(e => e.UangMuka)
                .HasColumnType("money")
                .HasColumnName("Uang Muka");
        });

        modelBuilder.Entity<TreatmentForAnimalBite>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.SrtreatmentForAnimalBites });

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrtreatmentForAnimalBites)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTreatmentForAnimalBites");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<UddItem>(entity =>
        {
            entity.HasKey(e => new { e.RegistrationNo, e.LocationId, e.SequenceNo });

            entity.ToTable("UddItem");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AcPcDc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DosageQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DosingPeriod)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmbalaceId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmbalaceID");
            entity.Property(e => e.EmbalaceQty)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsRflag).HasColumnName("IsRFlag");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemQtyInString)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NumberOfDosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.PrevRasproItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PrevRasproItemID");
            entity.Property(e => e.SrconsumeMethod)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRConsumeMethod");
            entity.Property(e => e.SrconsumeUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRConsumeUnit");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrmedicationRoute)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicationRoute");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.StopDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<UserHostPrinter>(entity =>
        {
            entity.HasKey(e => e.UserHostName).HasName("PK_UserHostPrinter_1");

            entity.ToTable("UserHostPrinter");

            entity.Property(e => e.UserHostName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrinterId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PrinterID");
        });

        modelBuilder.Entity<UserHostPrinterOther>(entity =>
        {
            entity.HasKey(e => new { e.UserHostName, e.ProgramId });

            entity.ToTable("UserHostPrinterOther");

            entity.Property(e => e.UserHostName)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrinterId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PrinterID");
        });

        modelBuilder.Entity<UserLog>(entity =>
        {
            entity.ToTable("UserLog");

            entity.Property(e => e.UserLogId).HasColumnName("UserLogID");
            entity.Property(e => e.ApplicationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ApplicationID");
            entity.Property(e => e.BrowserInfo)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ClientIp)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("ClientIP");
            entity.Property(e => e.LoginDateTime).HasColumnType("datetime");
            entity.Property(e => e.LogoutDateTime).HasColumnType("datetime");
            entity.Property(e => e.SessionId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SessionID");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<UserProgramLog>(entity =>
        {
            entity.HasKey(e => e.UserProgramLogId).HasName("PK_UserProgramLog_1");

            entity.ToTable("UserProgramLog");

            entity.Property(e => e.UserProgramLogId).HasColumnName("UserProgramLogID");
            entity.Property(e => e.AccessDateTime).HasColumnType("datetime");
            entity.Property(e => e.Parameter)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ProgramId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ProgramID");
            entity.Property(e => e.UserLogId).HasColumnName("UserLogID");
        });

        modelBuilder.Entity<UserSessionDatum>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__UserSess__1788CCACB1562DFC");

            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ClientIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ClientIP");
            entity.Property(e => e.SessionLogin).HasColumnType("datetime");
        });

        modelBuilder.Entity<UserSessionSetting>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.Key }).HasName("PKUserSessionSettings");

            entity.Property(e => e.UserId)
                .HasMaxLength(100)
                .HasColumnName("UserID");
            entity.Property(e => e.Key).HasMaxLength(200);
        });

        modelBuilder.Entity<VDoktersoap>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_doktersoap");

            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.TotalReseps).HasColumnName("total_reseps");
            entity.Property(e => e.TotalSoaps).HasColumnName("total_soaps");
        });

        modelBuilder.Entity<VObatKosong>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_ObatKosong");

            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VRegistrationDisplayEmergencyTrk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_RegistrationDisplayEmergency_trk");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ActualVisitDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AdjustLog).IsUnicode(false);
            entity.Property(e => e.AdministrationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AllowPatientCheckOutByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AllowPatientCheckOutByUserID");
            entity.Property(e => e.AllowPatientCheckOutDateTime).HasColumnType("datetime");
            entity.Property(e => e.Anamnesis)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproximatePlafondAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.BpjsCoverageFormula).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BpjsPackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsPackageID");
            entity.Property(e => e.BpjsSepNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CauseOfAccident)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Complaint)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmedAttendanceByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConfirmedAttendanceByUserID");
            entity.Property(e => e.ConfirmedAttendanceDateTime).HasColumnType("datetime");
            entity.Property(e => e.CoverageClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CoverageClassID");
            entity.Property(e => e.CrashSiteDetail)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DeathCertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DiscAdmGuarantor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscAdmPatient).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DischargeMedicalNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeOperatorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DischargeOperatorID");
            entity.Property(e => e.DischargePlanDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EmrDiagnoseId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EmrDiagnoseID");
            entity.Property(e => e.Expr1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExternalQueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.FirstResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Hpi)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.InitialDiagnose).IsUnicode(false);
            entity.Property(e => e.InsuranceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("InsuranceID");
            entity.Property(e => e.IsDhf).HasColumnName("IsDHF");
            entity.Property(e => e.IsDirectPrescriptionReturn).HasColumnName("isDirectPrescriptionReturn");
            entity.Property(e => e.IsEkg).HasColumnName("IsEKG");
            entity.Property(e => e.IsEmrvalid).HasColumnName("IsEMRValid");
            entity.Property(e => e.IsGenerateHl7).HasColumnName("IsGenerateHL7");
            entity.Property(e => e.IsHoldTransactionEntryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IsHoldTransactionEntryByUserID");
            entity.Property(e => e.IsOpenEntryMr).HasColumnName("IsOpenEntryMR");
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.Jam)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LockVerifiedBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LockVerifiedBillingByUserID");
            entity.Property(e => e.LockVerifiedBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.LosinDay).HasColumnName("LOSInDay");
            entity.Property(e => e.LosinMonth).HasColumnName("LOSInMonth");
            entity.Property(e => e.LosinYear).HasColumnName("LOSInYear");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MedicationPlanning).IsUnicode(false);
            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhysicianResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PhysicianResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PlavonAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PlavonAmount2).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ProcedureChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureChargeClassID");
            entity.Property(e => e.ReasonsForTreatmentDescId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentDescID");
            entity.Property(e => e.ReasonsForTreatmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentID");
            entity.Property(e => e.ReferByParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferByParamedicID");
            entity.Property(e => e.ReferTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferralID");
            entity.Property(e => e.ReferralIdTo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferralName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralNameTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegDate)
                .HasMaxLength(17)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RemainingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SentToBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SentToBillingByUserID");
            entity.Property(e => e.SentToBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SrbussinesMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBussinesMethod");
            entity.Property(e => e.SrcovidComorbidStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCovidComorbidStatus");
            entity.Property(e => e.SrcovidStatus).HasColumnName("SRCovidStatus");
            entity.Property(e => e.SrcrashSite)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCrashSite");
            entity.Property(e => e.SrdischargeCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeCondition");
            entity.Property(e => e.SrdischargeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeMethod");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SremployeeRelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeRelationship");
            entity.Property(e => e.SrercaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRERCaseType");
            entity.Property(e => e.SrfatherOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFatherOccupation");
            entity.Property(e => e.SrkiaCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKiaCaseType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrobstetricType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRObstetricType");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.SrpatientInCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientInCondition");
            entity.Property(e => e.SrpatientInType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientInType");
            entity.Property(e => e.SrreferralGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReferralGroup");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.SrrelationshipQuality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationshipQuality");
            entity.Property(e => e.SrresidentialHome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResidentialHome");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.Srtriage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTriage");
            entity.Property(e => e.SrvisitReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVisitReason");
            entity.Property(e => e.SrvoidReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVoidReason");
            entity.Property(e => e.TransactionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.UsertInsertDischargePlan)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.VisiteRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes).IsUnicode(false);
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VRegistrationIgd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_registration_igd");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ActualVisitDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AdjustLog).IsUnicode(false);
            entity.Property(e => e.AdministrationAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.AllowPatientCheckOutByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AllowPatientCheckOutByUserID");
            entity.Property(e => e.AllowPatientCheckOutDateTime).HasColumnType("datetime");
            entity.Property(e => e.Anamnesis)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproximatePlafondAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.BpjsCoverageFormula).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.BpjsPackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BpjsPackageID");
            entity.Property(e => e.BpjsSepNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CauseOfAccident)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.Complaint)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmedAttendanceByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConfirmedAttendanceByUserID");
            entity.Property(e => e.ConfirmedAttendanceDateTime).HasColumnType("datetime");
            entity.Property(e => e.CoverageClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CoverageClassID");
            entity.Property(e => e.CrashSiteDetail)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DeathCertificateNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DiscAdmGuarantor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscAdmPatient).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.DischargeMedicalNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DischargeOperatorId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DischargeOperatorID");
            entity.Property(e => e.DischargePlanDate).HasColumnType("datetime");
            entity.Property(e => e.DischargeTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.EmrDiagnoseId)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EmrDiagnoseID");
            entity.Property(e => e.ExternalQueNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.FirstResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.GuarantorCardNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Hpi)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.InitialDiagnose).IsUnicode(false);
            entity.Property(e => e.InsuranceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("InsuranceID");
            entity.Property(e => e.IsDhf).HasColumnName("IsDHF");
            entity.Property(e => e.IsDirectPrescriptionReturn).HasColumnName("isDirectPrescriptionReturn");
            entity.Property(e => e.IsEkg).HasColumnName("IsEKG");
            entity.Property(e => e.IsEmrvalid).HasColumnName("IsEMRValid");
            entity.Property(e => e.IsGenerateHl7).HasColumnName("IsGenerateHL7");
            entity.Property(e => e.IsHoldTransactionEntryByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IsHoldTransactionEntryByUserID");
            entity.Property(e => e.IsOpenEntryMr).HasColumnName("IsOpenEntryMR");
            entity.Property(e => e.ItemConditionRuleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemConditionRuleID");
            entity.Property(e => e.LastCreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LockVerifiedBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LockVerifiedBillingByUserID");
            entity.Property(e => e.LockVerifiedBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.LosinDay).HasColumnName("LOSInDay");
            entity.Property(e => e.LosinMonth).HasColumnName("LOSInMonth");
            entity.Property(e => e.LosinYear).HasColumnName("LOSInYear");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MedicationPlanning).IsUnicode(false);
            entity.Property(e => e.MembershipDetailId).HasColumnName("MembershipDetailID");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientAdm).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PhysicianResponDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PhysicianResponTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PlavonAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PlavonAmount2).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ProcedureChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ProcedureChargeClassID");
            entity.Property(e => e.ReasonsForTreatmentDescId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentDescID");
            entity.Property(e => e.ReasonsForTreatmentId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReasonsForTreatmentID");
            entity.Property(e => e.ReferByParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferByParamedicID");
            entity.Property(e => e.ReferTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ReferralID");
            entity.Property(e => e.ReferralIdTo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferralName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralNameTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RemainingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SentToBillingByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SentToBillingByUserID");
            entity.Property(e => e.SentToBillingDateTime).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SmfId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SmfID");
            entity.Property(e => e.SrbussinesMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBussinesMethod");
            entity.Property(e => e.SrcovidComorbidStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCovidComorbidStatus");
            entity.Property(e => e.SrcovidStatus).HasColumnName("SRCovidStatus");
            entity.Property(e => e.SrcrashSite)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCrashSite");
            entity.Property(e => e.SrdischargeCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeCondition");
            entity.Property(e => e.SrdischargeMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDischargeMethod");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SremployeeRelationship)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeRelationship");
            entity.Property(e => e.SrercaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRERCaseType");
            entity.Property(e => e.SrfatherOccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFatherOccupation");
            entity.Property(e => e.SrkiaCaseType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRKiaCaseType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrobstetricType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRObstetricType");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.SrpatientInCondition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientInCondition");
            entity.Property(e => e.SrpatientInType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientInType");
            entity.Property(e => e.SrreferralGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReferralGroup");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
            entity.Property(e => e.SrrelationshipQuality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRelationshipQuality");
            entity.Property(e => e.SrresidentialHome)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResidentialHome");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.Srtriage)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTriage");
            entity.Property(e => e.SrvisitReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVisitReason");
            entity.Property(e => e.SrvoidReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVoidReason");
            entity.Property(e => e.TransactionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.UsertInsertDischargePlan)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.VisiteRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDate).HasColumnType("datetime");
            entity.Property(e => e.VoidNotes).IsUnicode(false);
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VRegkendalabyarot>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_regkendalabyarot");

            entity.Property(e => e.AdministrationAmount).HasColumnType("numeric(19, 2)");
            entity.Property(e => e.DiscAdmGuarantor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscAdmPatient).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.Information).HasColumnType("text");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrguarantorType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorType");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK_VehicleID");

            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PlateNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SrvehicleStatus)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SRVehicleStatus");
            entity.Property(e => e.SrvehicleType)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SRVehicleType");
        });

        modelBuilder.Entity<VehicleDriver>(entity =>
        {
            entity.HasKey(e => e.DriverId).HasName("PK_DriverID");

            entity.Property(e => e.DriverId).HasColumnName("DriverID");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.DriverName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SrdriverStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDriverStatus");
        });

        modelBuilder.Entity<VehicleTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionNo).HasName("PK_VehicleTransNo");

            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproveByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ApproveByUserID");
            entity.Property(e => e.ApproveDateTime).HasColumnType("datetime");
            entity.Property(e => e.BookingDateTimeEnd).HasColumnType("datetime");
            entity.Property(e => e.BookingDateTimeStart).HasColumnType("datetime");
            entity.Property(e => e.ConfirmByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ConfirmByUserID");
            entity.Property(e => e.ConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreateByUserID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Destination)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DistanceInKm)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("DistanceInKM");
            entity.Property(e => e.DriverId).HasColumnName("DriverID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.OdometerEnd).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OdometerStart).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.RealizationApproveByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("RealizationApproveByUserID");
            entity.Property(e => e.RealizationApproveDateTime).HasColumnType("datetime");
            entity.Property(e => e.RealizationDateTimeEnd).HasColumnType("datetime");
            entity.Property(e => e.RealizationDateTimeStart).HasColumnType("datetime");
            entity.Property(e => e.RealizationNotes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.SrvehicleOrderType)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SRVehicleOrderType");
            entity.Property(e => e.SrvehicleType)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SRVehicleType");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
            entity.Property(e => e.VoidByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("VoidByUserID");
            entity.Property(e => e.VoidDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<VewKetersediaanBedDinke>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vew_KetersediaanBedDinkes");

            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClassId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.JenisKamar)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VewKetersediaanBedMobileJkn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vew_KetersediaanBedMobileJkn");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoomName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VirtualHostServer>(entity =>
        {
            entity.HasKey(e => e.VhostId).HasName("PKVirtualHostServers");

            entity.HasIndex(e => e.VhostAddress, "UQ_VirtualHostServers_VHostAddress").IsUnique();

            entity.Property(e => e.VhostId).HasColumnName("VHostID");
            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Password).HasMaxLength(128);
            entity.Property(e => e.RegisteredDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ServerType).HasMaxLength(128);
            entity.Property(e => e.Username).HasMaxLength(128);
            entity.Property(e => e.VhostAddress)
                .HasMaxLength(256)
                .HasColumnName("VHostAddress");
            entity.Property(e => e.VhostName)
                .HasMaxLength(256)
                .HasColumnName("VHostName");
        });

        modelBuilder.Entity<VisitSchedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__VisitSch__9C8A5B69BE8465BF");

            entity.ToTable("VisitSchedule");

            entity.Property(e => e.ScheduleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ScheduleID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("PatientID");
            entity.Property(e => e.SrscheduleType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRScheduleType");
            entity.Property(e => e.UpdatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UpdatedByUserID");
            entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<VisitScheduleDetail>(entity =>
        {
            entity.HasKey(e => e.ScheduleVisitId).HasName("PK__VisitSch__A8B8BA59A3810D8D");

            entity.ToTable("VisitScheduleDetail");

            entity.Property(e => e.ScheduleVisitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ScheduleVisitID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ScheduleId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ScheduleID");
            entity.Property(e => e.UpdatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UpdatedByUserID");
            entity.Property(e => e.UpdatedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<VisitType>(entity =>
        {
            entity.ToTable("VisitType");

            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("VisitTypeID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.VisitTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<VisitsPerServiceUnitPerPeriod>(entity =>
        {
            entity.HasKey(e => new { e.ServiceUnitId, e.Month, e.Year }).HasName("PK__VisitsPe__DF7DB263D50864FC");

            entity.ToTable("VisitsPerServiceUnitPerPeriod");

            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.Month)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDateTime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<VitalSign>(entity =>
        {
            entity.ToTable("VitalSign");

            entity.Property(e => e.VitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VitalSignID");
            entity.Property(e => e.EntryMask)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NumType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParentVitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ParentVitalSignID");
            entity.Property(e => e.QuestionId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Untuk keperluan import data dari PHR")
                .HasColumnName("QuestionID");
            entity.Property(e => e.SrvitalSignGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRVitalSignGroup");
            entity.Property(e => e.StandardReferenceId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StandardReferenceID");
            entity.Property(e => e.ValueType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.VitalSignInitial)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VitalSignName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VitalSignUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VitalSignEwsLevel>(entity =>
        {
            entity.HasKey(e => new { e.VitalSignId, e.StartAgeInDay, e.StartValue });

            entity.ToTable("VitalSignEwsLevel");

            entity.Property(e => e.VitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VitalSignID");
            entity.Property(e => e.StartValue).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<VitalSignews>(entity =>
        {
            entity.HasKey(e => new { e.VitalSignId, e.StartAgeInDay });

            entity.Property(e => e.VitalSignId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VitalSignID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<VmconfigDatum>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKVMConfigData");

            entity.ToTable("VMConfigData");

            entity.HasIndex(e => e.UtccollectionDateTime, "IX_VMConfigData_UTCCollectionDateTime");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.BootTime).HasColumnType("datetime");
            entity.Property(e => e.Cpulimit).HasColumnName("CPULimit");
            entity.Property(e => e.Cpureserve).HasColumnName("CPUReserve");
            entity.Property(e => e.DomainName).HasMaxLength(256);
            entity.Property(e => e.NumCpus).HasColumnName("NumCPUs");
            entity.Property(e => e.Uuid)
                .HasMaxLength(128)
                .HasColumnName("UUID");
            entity.Property(e => e.VmheartBeat).HasColumnName("VMHeartBeat");
            entity.Property(e => e.Vmname)
                .HasMaxLength(256)
                .HasColumnName("VMName");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.VmconfigData)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKVMConfigDataMonitoredSQLServers");
        });

        modelBuilder.Entity<Vmstatistic>(entity =>
        {
            entity.HasKey(e => new { e.SqlserverId, e.UtccollectionDateTime }).HasName("PKVMStatistics");

            entity.ToTable("VMStatistics");

            entity.HasIndex(e => e.UtccollectionDateTime, "IX_VMStatistics_UTCCollectionDateTime");

            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.Cpuready).HasColumnName("CPUReady");
            entity.Property(e => e.CpuswapWait).HasColumnName("CPUSwapWait");
            entity.Property(e => e.Cpuusage).HasColumnName("CPUUsage");
            entity.Property(e => e.CpuusageMhz).HasColumnName("CPUUsageMHz");
            entity.Property(e => e.PagePerSecVm).HasColumnName("PagePerSecVM");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.Vmstatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKVMStatisticsMonitoredSQLServers");
        });

        modelBuilder.Entity<VwAppointment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Appointment");

            entity.Property(e => e.AppointmentDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AppointmentTimeConvert)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicInitial)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.Weekdays)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwClosedRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClosedRegistration");

            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicIdreferral)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicIDReferral");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<VwEmployeeTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_EmployeeTable");

            entity.Property(e => e.AbsenceCardNo)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.BpjsKesNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BpjsTkNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BpjscoveredNo).HasColumnName("BPJSCoveredNo");
            entity.Property(e => e.BpjsuncoveredNo).HasColumnName("BPJSUncoveredNo");
            entity.Property(e => e.CoverageClass)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoverageClassBpjs)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CoverageClassBPJS");
            entity.Property(e => e.EmployeeGradeId).HasColumnName("EmployeeGradeID");
            entity.Property(e => e.EmployeeLevel)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(144)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeRegistrationNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeTypePayroll)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IjazahPengangkatan)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IncentivePositionPoints).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.IsBpjs).HasColumnName("IsBPJS");
            entity.Property(e => e.IsJp).HasColumnName("IsJP");
            entity.Property(e => e.IsKwi).HasColumnName("IsKWI");
            entity.Property(e => e.JoinDate).HasColumnType("datetime");
            entity.Property(e => e.ManagerId).HasColumnName("ManagerID");
            entity.Property(e => e.Npwp)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PlaceBirth)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.PositionLevelId).HasColumnName("PositionLevelID");
            entity.Property(e => e.PositionValidFromDate).HasColumnType("datetime");
            entity.Property(e => e.ProfessionType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ResignDate).HasColumnType("datetime");
            entity.Property(e => e.ResignDateReal).HasColumnType("datetime");
            entity.Property(e => e.SalaryScaleId).HasColumnName("SalaryScaleID");
            entity.Property(e => e.ServiceMonthPph).HasColumnName("ServiceMonthPPH");
            entity.Property(e => e.ServiceMonthThr).HasColumnType("money");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceYear).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ServiceYearPermanent).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ServiceYearPermanentText).IsUnicode(false);
            entity.Property(e => e.ServiceYearText).IsUnicode(false);
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.SrclinicalAuthorityLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalAuthorityLevel");
            entity.Property(e => e.SrclinicalWorkArea)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRClinicalWorkArea");
            entity.Property(e => e.SreducationGroup)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("SREducationGroup");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SremployeeScheduleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeScheduleType");
            entity.Property(e => e.SremployeeShiftType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeShiftType");
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
            entity.Property(e => e.SremployeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeType");
            entity.Property(e => e.SremploymentCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentCategory");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.SrfieldLabor)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("SRFieldLabor");
            entity.Property(e => e.SrgenderType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRGenderType");
            entity.Property(e => e.SrincentivePosition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentivePosition");
            entity.Property(e => e.SrincentivePositionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentivePositionGroup");
            entity.Property(e => e.SrincentiveServiceUnitGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRIncentiveServiceUnitGroup");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrpaymentFrequency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentFrequency");
            entity.Property(e => e.SrprofessionGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionGroup");
            entity.Property(e => e.SrprofessionType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRProfessionType");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.SrremunerationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRemunerationType");
            entity.Property(e => e.SrresignReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRResignReason");
            entity.Property(e => e.SrtaxStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTaxStatus");
            entity.Property(e => e.SubDivisonId).HasColumnName("SubDivisonID");
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
            entity.Property(e => e.TglDiangkat).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwGetLatestItemPorPrice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_GetLatestItemPorPrice");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwHasilLabMobileSysmex>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HasilLabMobileSysmex");

            entity.Property(e => e.Flag)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NormalResult)
                .HasMaxLength(46)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Result)
                .HasMaxLength(4016)
                .IsUnicode(false);
            entity.Property(e => e.TestCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TestComment)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TestGroup)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TestName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwHasilPasien>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_HasilPasien");

            entity.Property(e => e.Cmt)
                .IsUnicode(false)
                .HasColumnName("CMT");
            entity.Property(e => e.DispSeq)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DISP_SEQ");
            entity.Property(e => e.Flag)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("FLAG");
            entity.Property(e => e.LabOrderCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabOrderSummary)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderLabNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrderLabTglOrder).HasColumnType("datetime");
            entity.Property(e => e.OrderTestid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ORDER_TESTID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RefRange)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF_RANGE");
            entity.Property(e => e.Result)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.StandarValue)
                .HasMaxLength(46)
                .IsUnicode(false);
            entity.Property(e => e.TestComment)
                .HasMaxLength(1500)
                .IsUnicode(false)
                .HasColumnName("TEST_COMMENT");
            entity.Property(e => e.TestGroup)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TEST_GROUP");
            entity.Property(e => e.Unit)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UNIT");
            entity.Property(e => e.ValidateBy)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("VALIDATE_BY");
            entity.Property(e => e.ValidateOn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VALIDATE_ON");
        });

        modelBuilder.Entity<VwHasilPasienVanslab>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HasilPasienVanslab");

            entity.Property(e => e.Flag)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("flag");
            entity.Property(e => e.Hasil)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("hasil");
            entity.Property(e => e.KodePemeriksaan)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("kode_pemeriksaan");
            entity.Property(e => e.KodeSir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("kode_sir");
            entity.Property(e => e.KodeTest)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("kode_test");
            entity.Property(e => e.NamaPemeriksaan)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("nama_pemeriksaan");
            entity.Property(e => e.NoUrut).HasColumnName("no_urut");
            entity.Property(e => e.Normal)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasColumnName("normal");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StandardValue)
                .HasMaxLength(401)
                .IsUnicode(false);
            entity.Property(e => e.Teks)
                .HasMaxLength(3500)
                .IsUnicode(false)
                .HasColumnName("teks");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Unit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("unit");
        });

        modelBuilder.Entity<VwHistoryAppointment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HistoryAppointment");

            entity.Property(e => e.AppointmentDate).HasColumnType("smalldatetime");
            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AppointmentTimeConvert)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastCreateByUserID");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicInitial)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SrappointmentStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRAppointmentStatus");
            entity.Property(e => e.Weekdays)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwHistoryRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HistoryRegistration");

            entity.Property(e => e.AppointmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AppointmentTimeConvert)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicInitial)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Weekdays)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwHl7messageParameter>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_HL7MessageParameter");

            entity.Property(e => e.Adt)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ADT");
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CityOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Complaint)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBirth)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDateTime)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwItemAncillary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemAncillary");

            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwItemAssetUtilization>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemAssetUtilization");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
        });

        modelBuilder.Entity<VwItemProductMedicNonMedic>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemProductMedicNonMedic");

            entity.Property(e => e.Barcode)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.BrandName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ConversionFactor).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Dosage).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.GenericFlag)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.HighestPriceInBasedUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.PriceInBaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.PriceInBasedUnitWvat)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PriceInBasedUnitWVat");
            entity.Property(e => e.PriceInPurchaseUnit).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SrdosageUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDosageUnit");
            entity.Property(e => e.SrdrugLabelType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDrugLabelType");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.SrpurchaseUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPurchaseUnit");
        });

        modelBuilder.Entity<VwItemProductSalesAvailable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemProductSalesAvailable");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
        });

        modelBuilder.Entity<VwItemServiceAndProductWithAdminCalculation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemServiceAndProductWithAdminCalculation");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
        });

        modelBuilder.Entity<VwItemServicesRlReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemServicesRlReport");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.RlMasterReportItemId).HasColumnName("RlMasterReportItemID");
        });

        modelBuilder.Entity<VwItemTariffComponent>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemTariffComponent");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwItemTariffComponentClass>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemTariffComponentClass");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TariffComponentName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwItemTransactionItemPrDrFromWo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemTransactionItemPrDrFromWo");

            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwItemWithAdminCalculation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemWithAdminCalculation");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
        });

        modelBuilder.Entity<VwItemsAlreadyUsed>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ItemsAlreadyUsed");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
        });

        modelBuilder.Entity<VwListDataSatuSehat>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ListDataSatuSehat");

            entity.Property(e => e.EncounterId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EncounterID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
        });

        modelBuilder.Entity<VwMergeBillingInpatient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_MergeBillingInpatient");

            entity.Property(e => e.PatientCategory)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwMinmaxStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_MinmaxStock");

            entity.Property(e => e.Balance).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Maximum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Minimum).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
        });

        modelBuilder.Entity<VwMr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_MR");

            entity.Property(e => e.Agama)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CityOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GolDarah)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Gol_Darah");
            entity.Property(e => e.HubSaudara)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Hub_Saudara");
            entity.Property(e => e.JnsKelamin)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Jns_Kelamin");
            entity.Property(e => e.KdKecamatan)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Kd_Kecamatan");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MrSaudara)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Mr_Saudara");
            entity.Property(e => e.Pekerjaan)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Pendidikan)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StatusNikah)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Status_Nikah");
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Suku)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("User_ID");
            entity.Property(e => e.Warganegara)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwParamedicFeeDeduction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ParamedicFeeDeductions");

            entity.Property(e => e.CalculatedAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DeductionAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DeductionId).HasColumnName("DeductionID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNoMergeTo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrparamedicFeeDeduction)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRParamedicFeeDeduction");
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VerificationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwParamedicLeaveDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ParamedicLeaveDate");

            entity.Property(e => e.LeaveDate).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
        });

        modelBuilder.Entity<VwPatient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Patient");

            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NamaPasien)
                .HasMaxLength(152)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPatientMerge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientMerge");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BloodRhesus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CityOfBirth)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");
            entity.Property(e => e.DiagnosticNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.HealthcareId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HealthcareID");
            entity.Property(e => e.LastDonorDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastVisitDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MemberId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MemberID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NumberOfDonor).HasColumnType("numeric(3, 0)");
            entity.Property(e => e.OldMedicalNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PackageBalance).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ParentSpouseName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PictureFileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrbloodType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRBloodType");
            entity.Property(e => e.Sreducation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducation");
            entity.Property(e => e.Srethnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREthnic");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrmedicalFileBin)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalFileBin");
            entity.Property(e => e.SrmedicalFileStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMedicalFileStatus");
            entity.Property(e => e.Srnationality)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRNationality");
            entity.Property(e => e.Sroccupation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SROccupation");
            entity.Property(e => e.SrpatientCategory)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPatientCategory");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.Srsalutation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRSalutation");
            entity.Property(e => e.Srtitle)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTitle");
            entity.Property(e => e.Ssn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressCounty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressDistrict)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressPhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressStreetName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TempAddressZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPatientsPaidOff>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientsPaidOff");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPelangganBku>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PelangganBku");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPrescriptionSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Prescription_Sales");

            entity.Property(e => e.Acpcdc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ACPCDC");
            entity.Property(e => e.Apc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APC");
            entity.Property(e => e.ApprovalDateTime).HasColumnType("datetime");
            entity.Property(e => e.CodeLabel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsumeMethod)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");
            entity.Property(e => e.Dp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DP");
            entity.Property(e => e.Fod).HasColumnName("FOD");
            entity.Property(e => e.IsRflag)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IsRFlag");
            entity.Property(e => e.ItemName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Jumlah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Label)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Metod)
                .HasMaxLength(137)
                .IsUnicode(false)
                .HasColumnName("metod");
            entity.Property(e => e.NamaJumlah)
                .HasMaxLength(217)
                .IsUnicode(false);
            entity.Property(e => e.NamaJumlahQty)
                .HasMaxLength(244)
                .IsUnicode(false);
            entity.Property(e => e.Nod)
                .HasColumnType("numeric(10, 2)")
                .HasColumnName("NOD");
            entity.Property(e => e.Nomor)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OldMedicalNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrescriptionQty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.Price).HasColumnType("numeric(30, 4)");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.Unit)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrasi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_Registrasi");

            entity.Property(e => e.AlamatPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Alamat_PJ");
            entity.Property(e => e.BadanUsaha)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CaraKeluar)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.CaraMasuk)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("Cara_Masuk");
            entity.Property(e => e.DiagAwal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Diag_Awal");
            entity.Property(e => e.DirujukKe)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DischargeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Ekg).HasColumnName("EKG");
            entity.Property(e => e.Ekgmonitor).HasColumnName("EKGMonitor");
            entity.Property(e => e.Gds).HasColumnName("GDS");
            entity.Property(e => e.HubKlasifikasi)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Hub_Klasifikasi");
            entity.Property(e => e.HubPenanggung)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Hub_Penanggung");
            entity.Property(e => e.HubPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Hub_PJ");
            entity.Property(e => e.Identitas)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IdentitasPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Identitas_Pj");
            entity.Property(e => e.KdDokter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Kd_Dokter");
            entity.Property(e => e.KdKecamatanPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Kd_Kecamatan_PJ");
            entity.Property(e => e.KdKelasReg)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Kd_Kelas_Reg");
            entity.Property(e => e.KdLayanan)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Kd_Layanan");
            entity.Property(e => e.KelasTanggungan)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.KetDirujuk)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.KetPerujuk)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Ket_Perujuk");
            entity.Property(e => e.Kkpg).HasColumnName("KKPG");
            entity.Property(e => e.KlasifikasiPasien)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.LastCreateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastCreateUserID");
            entity.Property(e => e.Lebih15Jam).HasColumnName("Lebih_15_Jam");
            entity.Property(e => e.MatiSebelumUgd).HasColumnName("Mati_Sebelum_UGD");
            entity.Property(e => e.MatiUgd).HasColumnName("Mati_UGD");
            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NmKelPasien)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("Nm_Kel_Pasien");
            entity.Property(e => e.NmPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Nm_PJ");
            entity.Property(e => e.NoIdentitas)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No_Identitas");
            entity.Property(e => e.NoIdentitasPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No_Identitas_PJ");
            entity.Property(e => e.NoTelpPj)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("No_Telp_Pj");
            entity.Property(e => e.Penanggung)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PerujukDari)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Pgd).HasColumnName("PGD");
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Tpp)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TPP");
            entity.Property(e => e.UserId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("User_ID");
        });

        modelBuilder.Entity<VwRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Registration");

            entity.Property(e => e.Anamnesis)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.Complaint)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.InitialDiagnose).IsUnicode(false);
            entity.Property(e => e.MedicationPlanning).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.VisitTypeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VisitTypeID");
        });

        modelBuilder.Entity<VwRegistrationAllpatient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RegistrationAllpatient");

            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrationForMappingCoa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RegistrationForMappingCOA");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrguarantorIncomeGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SRGuarantorIncomeGroup");
            entity.Property(e => e.SrregistrationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRegistrationType");
        });

        modelBuilder.Entity<VwRegistrationGuarantorCob>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RegistrationGuarantorCOB");

            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrationInpatient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RegistrationInpatient");

            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrationKaryawan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RegistrationKaryawan");

            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrationOutpatient>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RegistrationOutpatient");

            entity.Property(e => e.FromRegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GuarantorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GuarantorID");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.PatientId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrationque>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_registrationque");

            entity.Property(e => e.MedicalNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientName)
                .HasMaxLength(152)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RegistrationTime)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoomName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegistrationqueoption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_registrationqueoption");

            entity.Property(e => e.EndTime1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndTime5)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.ServiceUnitName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StartTime1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime5)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwServiceUnitBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ServiceUnitBooking");

            entity.Property(e => e.AnestesiPlan)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookingDateTimeFrom).HasColumnType("datetime");
            entity.Property(e => e.BookingDateTimeTo).HasColumnType("datetime");
            entity.Property(e => e.BookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");
            entity.Property(e => e.Medicalno)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MobilePhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParamedicInitial)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PatientName)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.RoomName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Weekdays)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSpGetNilaiPersediaanAkhirFromMutasiStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_spGetNilaiPersediaanAkhirFromMutasiStock");

            entity.Property(e => e.InitialStock).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ItemId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LastQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(12, 2)");
        });

        modelBuilder.Entity<VwSpMutasiStokFixed>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_spMutasiStokFixed");

            entity.Property(e => e.InitialStock).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.ItemGroupId)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemGroupName)
                .HasMaxLength(13)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LastQuantity).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.LocationId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Periode)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ProductAccountId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ProductAccountID");
            entity.Property(e => e.ProductAccountName)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.QuantityIn).HasColumnType("numeric(12, 2)");
            entity.Property(e => e.QuantityOut).HasColumnType("numeric(12, 2)");
        });

        modelBuilder.Entity<VwTransChargesItemCompParamedic>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransChargesItemCompParamedic");

            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CitoAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FeeSettledNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TariffComponentId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TariffComponentID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransChargesItemIsOrderOutstanding>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransChargesItem_IsOrderOutstanding");

            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransChargesItemNoCorrection>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransChargesItemNoCorrection");

            entity.Property(e => e.AssetId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.AutoProcessCalculation).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ChargeClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ChargeClassID");
            entity.Property(e => e.ChargeQuantity).HasColumnType("numeric(38, 2)");
            entity.Property(e => e.CitoAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.FilmNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ParamedicID");
            entity.Property(e => e.ParentNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceSequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.RoundingAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.SecondParamedicId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SecondParamedicID");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.SrcenterId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRCenterID");
            entity.Property(e => e.SrdiscountReason)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRDiscountReason");
            entity.Property(e => e.SritemUnit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemUnit");
            entity.Property(e => e.StockQuantity).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransChargesItemPaymentType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransChargesItemPaymentType");

            entity.Property(e => e.SequenceNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransChargesNoCorrection>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransChargesNoCorrection");

            entity.Property(e => e.BedId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BedID");
            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ExecutionDate).HasColumnType("datetime");
            entity.Property(e => e.FromServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FromServiceUnitID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.PackageReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PhysicianSenders)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ResponUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ResponUnitID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.ServiceUnitBookingNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SritemType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRItemType");
            entity.Property(e => e.Srshift)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.SrtypeResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTypeResult");
            entity.Property(e => e.SurgicalPackageId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SurgicalPackageID");
            entity.Property(e => e.TariffDiscountForRoomIn).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.ToServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ToServiceUnitID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ValidatedByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ValidatedByUserID");
            entity.Property(e => e.ValidatedDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwTransPaymentItemCorrectionWithStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransPaymentItemCorrectionWithStatus");

            entity.Property(e => e.CardFeeAmount).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.CreatedByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedByUserID");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EdcmachineId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EDCMachineID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentCorrectionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SrcardProvider)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardProvider");
            entity.Property(e => e.SrcardType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCardType");
            entity.Property(e => e.SrpaymentMethod)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentMethod");
            entity.Property(e => e.SrpaymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentType");
        });

        modelBuilder.Entity<VwTransPaymentItemOrderAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransPaymentItemOrderAll");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.JournalIncomePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.QtyF).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.SrfilmId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRFilmID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransPaymentItemOrderReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransPaymentItemOrderReturn");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.JournalIncomePaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.PaymentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Qty).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransPrescriptionFromSoap>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransPrescriptionFromSOAP");

            entity.Property(e => e.PrescriptionDate).HasColumnType("datetime");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Transaction");

            entity.Property(e => e.ClassId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ClassID");
            entity.Property(e => e.FilterDate).HasColumnType("datetime");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderTransNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PackageReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ServiceUnitId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ServiceUnitID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransactionItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransactionItem");

            entity.Property(e => e.ParamedicCollectionName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransactionItemMerge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransactionItemMerge");

            entity.Property(e => e.ItemId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.Label)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WageBase>(entity =>
        {
            entity.ToTable("WageBase");

            entity.Property(e => e.WageBaseId).HasColumnName("WageBaseID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Nominal).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
        });

        modelBuilder.Entity<WageStructureAndScale>(entity =>
        {
            entity.ToTable("WageStructureAndScale");

            entity.Property(e => e.WageStructureAndScaleId).HasColumnName("WageStructureAndScaleID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrwageStructureAndScaleType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWageStructureAndScaleType");
            entity.Property(e => e.WageStructureAndScaleCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.WageStructureAndScaleName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WageStructureAndScaleItem>(entity =>
        {
            entity.ToTable("WageStructureAndScaleItem");

            entity.Property(e => e.WageStructureAndScaleItemId).HasColumnName("WageStructureAndScaleItemID");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Points).HasColumnType("numeric(10, 2)");
            entity.Property(e => e.SrwageStructureAndScaleItem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRWageStructureAndScaleItem");
            entity.Property(e => e.WageStructureAndScaleId).HasColumnName("WageStructureAndScaleID");
        });

        modelBuilder.Entity<WageTransaction>(entity =>
        {
            entity.HasKey(e => e.WageTransactionId).HasName("PK__WageTran__D8C97941080DA3F8");

            entity.ToTable("WageTransaction");

            entity.Property(e => e.WageTransactionId)
                .ValueGeneratedNever()
                .HasColumnName("WageTransactionID");
            entity.Property(e => e.EmployeeGradeId).HasColumnName("EmployeeGradeID");
            entity.Property(e => e.GradeYear).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.IsKwi).HasColumnName("IsKWI");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.PositionGradeId).HasColumnName("PositionGradeID");
            entity.Property(e => e.PositionId).HasColumnName("PositionID");
            entity.Property(e => e.SreducationLevel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREducationLevel");
            entity.Property(e => e.SremployeeStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeStatus");
            entity.Property(e => e.SremployeeType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmployeeType");
            entity.Property(e => e.SremploymentType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SREmploymentType");
            entity.Property(e => e.SrmaritalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRMaritalStatus");
            entity.Property(e => e.SrpaymentFrequency)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRPaymentFrequency");
            entity.Property(e => e.Srreligion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRReligion");
            entity.Property(e => e.SrremunerationType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRRemunerationType");
            entity.Property(e => e.SrtaxStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRTaxStatus");
            entity.Property(e => e.SubOrganizationUnitId).HasColumnName("SubOrganizationUnitID");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.WageProcessTypeId).HasColumnName("WageProcessTypeID");
        });

        modelBuilder.Entity<WageTransactionItem>(entity =>
        {
            entity.HasKey(e => new { e.WageTransactionItemId, e.WageTransactionId });

            entity.ToTable("WageTransactionItem");

            entity.Property(e => e.WageTransactionItemId).HasColumnName("WageTransactionItemID");
            entity.Property(e => e.WageTransactionId).HasColumnName("WageTransactionID");
            entity.Property(e => e.CurrencyAmount).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.CurrencyRate).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.NominalAmount).HasColumnType("money");
            entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.SalaryComponentId).HasColumnName("SalaryComponentID");
            entity.Property(e => e.SrcurrencyCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SRCurrencyCode");
        });

        modelBuilder.Entity<WaitCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PKWaitCategories");

            entity.HasIndex(e => e.Category, "UQ__WaitCate__4BB73C32D0996EB4").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Category)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.ExcludeFromCollection).HasDefaultValue(false);
        });

        modelBuilder.Entity<WaitStatistic>(entity =>
        {
            entity.HasKey(e => new { e.UtccollectionDateTime, e.SqlserverId }).HasName("PKWaitStatistics");

            entity.HasIndex(e => e.WaitStatisticsId, "UKWaitStatistics").IsUnique();

            entity.Property(e => e.UtccollectionDateTime)
                .HasColumnType("datetime")
                .HasColumnName("UTCCollectionDateTime");
            entity.Property(e => e.SqlserverId).HasColumnName("SQLServerID");
            entity.Property(e => e.WaitStatisticsId)
                .ValueGeneratedOnAdd()
                .HasColumnName("WaitStatisticsID");

            entity.HasOne(d => d.Sqlserver).WithMany(p => p.WaitStatistics)
                .HasForeignKey(d => d.SqlserverId)
                .HasConstraintName("FKWaitStatisticsMonitoredSQLServers");
        });

        modelBuilder.Entity<WaitStatisticsDetail>(entity =>
        {
            entity.HasKey(e => new { e.WaitStatisticsId, e.WaitTypeId }).HasName("PKWaitStatisticsDetails");

            entity.Property(e => e.WaitStatisticsId).HasColumnName("WaitStatisticsID");
            entity.Property(e => e.WaitTypeId).HasColumnName("WaitTypeID");

            entity.HasOne(d => d.WaitStatistics).WithMany(p => p.WaitStatisticsDetails)
                .HasPrincipalKey(p => p.WaitStatisticsId)
                .HasForeignKey(d => d.WaitStatisticsId)
                .HasConstraintName("FKWaitStatisticsDetailsWaitStatistics");

            entity.HasOne(d => d.WaitType).WithMany(p => p.WaitStatisticsDetails)
                .HasForeignKey(d => d.WaitTypeId)
                .HasConstraintName("FKWaitStatisticsDetailsWaitTypes");
        });

        modelBuilder.Entity<WaitType>(entity =>
        {
            entity.HasKey(e => e.WaitTypeId).HasName("PKWaitTypes");

            entity.Property(e => e.WaitTypeId).HasColumnName("WaitTypeID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.HelpLink).HasMaxLength(500);
            entity.Property(e => e.WaitType1)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("WaitType");

            entity.HasOne(d => d.Category).WithMany(p => p.WaitTypes)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FKWaitTypesWaitCategories");
        });

        modelBuilder.Entity<WebFramework>(entity =>
        {
            entity.HasKey(e => e.WebFrameworkId).HasName("PKWebFramework");

            entity.ToTable("WebFramework");

            entity.Property(e => e.WebFrameworkId).HasColumnName("WebFrameworkID");
            entity.Property(e => e.HostName).HasMaxLength(255);
            entity.Property(e => e.InstanceName).HasMaxLength(200);
            entity.Property(e => e.Password).HasMaxLength(100);
            entity.Property(e => e.Port).HasMaxLength(4);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.UserName).HasMaxLength(100);
        });

        modelBuilder.Entity<WebServiceAccessKey>(entity =>
        {
            entity.HasKey(e => e.ClientCode).HasName("PK__WebServi__96ADCE1A8DBA7667");

            entity.ToTable("WebServiceAccessKey");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AccessKey)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.RequestUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ResponseUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<WebServiceApilog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WebServi__3214EC27CAB11F10");

            entity.ToTable("WebServiceAPILog");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DateRequest).HasColumnType("datetime");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.Params).IsUnicode(false);
            entity.Property(e => e.Response).IsUnicode(false);
            entity.Property(e => e.UrlAddress).IsUnicode(false);
        });

        modelBuilder.Entity<WhatsappMessage>(entity =>
        {
            entity.HasKey(e => e.WhatsappMessageId).HasName("PK__Whatsapp__A2E6A586C7FB043A");

            entity.ToTable("WhatsappMessage");

            entity.Property(e => e.WhatsappMessageId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("WhatsappMessageID");
            entity.Property(e => e.IsCampaign).HasDefaultValue(false);
            entity.Property(e => e.RoomId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.SenderId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SenderID");
            entity.Property(e => e.SenderName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SenderType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Text)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Wilayah>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wilayah");

            entity.Property(e => e.Kode)
                .HasMaxLength(255)
                .HasColumnName("kode");
            entity.Property(e => e.Nama)
                .HasMaxLength(255)
                .HasColumnName("nama");
        });

        modelBuilder.Entity<WilayahRefDinke>(entity =>
        {
            entity.HasKey(e => new { e.ProvinceId, e.RegencyId, e.DistrictId, e.VillageId });

            entity.Property(e => e.ProvinceId).HasColumnName("province_id");
            entity.Property(e => e.RegencyId).HasColumnName("regency_id");
            entity.Property(e => e.DistrictId).HasColumnName("district_id");
            entity.Property(e => e.VillageId).HasColumnName("village_id");
            entity.Property(e => e.DistrictName)
                .HasMaxLength(50)
                .HasColumnName("district_name");
            entity.Property(e => e.ProvinceName)
                .HasMaxLength(50)
                .HasColumnName("province_name");
            entity.Property(e => e.RegencyName)
                .HasMaxLength(50)
                .HasColumnName("regency_name");
            entity.Property(e => e.VillageName)
                .HasMaxLength(50)
                .HasColumnName("village_name");
        });

        modelBuilder.Entity<WorkingHour>(entity =>
        {
            entity.ToTable("WorkingHour");

            entity.Property(e => e.WorkingHourId).HasColumnName("WorkingHourID");
            entity.Property(e => e.EndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.EndTime2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
            entity.Property(e => e.MaximumEndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MaximumEndTime2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MaximumStartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MaximumStartTime2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MinimumEndTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MinimumEndTime2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MinimumStartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MinimumStartTime2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Srshift)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SRShift");
            entity.Property(e => e.StartTime)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StartTime2)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.WorkingHourName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WorkingHourOrganizationUnit>(entity =>
        {
            entity.HasKey(e => new { e.WorkingHourId, e.OrganizationUnitId });

            entity.ToTable("WorkingHourOrganizationUnit");

            entity.Property(e => e.WorkingHourId).HasColumnName("WorkingHourID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
        });

        modelBuilder.Entity<WorkingSchduleIntervention>(entity =>
        {
            entity.ToTable("WorkingSchduleIntervention");

            entity.Property(e => e.WorkingSchduleInterventionId).HasColumnName("WorkingSchduleInterventionID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
            entity.Property(e => e.Notes)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WorkingScheduleId).HasColumnName("WorkingScheduleID");
        });

        modelBuilder.Entity<WorkingSchduleInterventionDetail>(entity =>
        {
            entity.ToTable("WorkingSchduleInterventionDetail");

            entity.Property(e => e.WorkingSchduleInterventionDetailId).HasColumnName("WorkingSchduleInterventionDetailID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.WorkingHourIdday1).HasColumnName("WorkingHourIDDay1");
            entity.Property(e => e.WorkingHourIdday10).HasColumnName("WorkingHourIDDay10");
            entity.Property(e => e.WorkingHourIdday11).HasColumnName("WorkingHourIDDay11");
            entity.Property(e => e.WorkingHourIdday12).HasColumnName("WorkingHourIDDay12");
            entity.Property(e => e.WorkingHourIdday13).HasColumnName("WorkingHourIDDay13");
            entity.Property(e => e.WorkingHourIdday14).HasColumnName("WorkingHourIDDay14");
            entity.Property(e => e.WorkingHourIdday15).HasColumnName("WorkingHourIDDay15");
            entity.Property(e => e.WorkingHourIdday16).HasColumnName("WorkingHourIDDay16");
            entity.Property(e => e.WorkingHourIdday17).HasColumnName("WorkingHourIDDay17");
            entity.Property(e => e.WorkingHourIdday18).HasColumnName("WorkingHourIDDay18");
            entity.Property(e => e.WorkingHourIdday19).HasColumnName("WorkingHourIDDay19");
            entity.Property(e => e.WorkingHourIdday2).HasColumnName("WorkingHourIDDay2");
            entity.Property(e => e.WorkingHourIdday20).HasColumnName("WorkingHourIDDay20");
            entity.Property(e => e.WorkingHourIdday21).HasColumnName("WorkingHourIDDay21");
            entity.Property(e => e.WorkingHourIdday22).HasColumnName("WorkingHourIDDay22");
            entity.Property(e => e.WorkingHourIdday23).HasColumnName("WorkingHourIDDay23");
            entity.Property(e => e.WorkingHourIdday24).HasColumnName("WorkingHourIDDay24");
            entity.Property(e => e.WorkingHourIdday25).HasColumnName("WorkingHourIDDay25");
            entity.Property(e => e.WorkingHourIdday26).HasColumnName("WorkingHourIDDay26");
            entity.Property(e => e.WorkingHourIdday27).HasColumnName("WorkingHourIDDay27");
            entity.Property(e => e.WorkingHourIdday28).HasColumnName("WorkingHourIDDay28");
            entity.Property(e => e.WorkingHourIdday29).HasColumnName("WorkingHourIDDay29");
            entity.Property(e => e.WorkingHourIdday3).HasColumnName("WorkingHourIDDay3");
            entity.Property(e => e.WorkingHourIdday30).HasColumnName("WorkingHourIDDay30");
            entity.Property(e => e.WorkingHourIdday31).HasColumnName("WorkingHourIDDay31");
            entity.Property(e => e.WorkingHourIdday4).HasColumnName("WorkingHourIDDay4");
            entity.Property(e => e.WorkingHourIdday5).HasColumnName("WorkingHourIDDay5");
            entity.Property(e => e.WorkingHourIdday6).HasColumnName("WorkingHourIDDay6");
            entity.Property(e => e.WorkingHourIdday7).HasColumnName("WorkingHourIDDay7");
            entity.Property(e => e.WorkingHourIdday8).HasColumnName("WorkingHourIDDay8");
            entity.Property(e => e.WorkingHourIdday9).HasColumnName("WorkingHourIDDay9");
            entity.Property(e => e.WorkingSchduleInterventionId).HasColumnName("WorkingSchduleInterventionID");
        });

        modelBuilder.Entity<WorkingSchedule>(entity =>
        {
            entity.ToTable("WorkingSchedule");

            entity.Property(e => e.WorkingScheduleId).HasColumnName("WorkingScheduleID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayrollPeriodId).HasColumnName("PayrollPeriodID");
        });

        modelBuilder.Entity<WorkingScheduleDetail>(entity =>
        {
            entity.ToTable("WorkingScheduleDetail");

            entity.Property(e => e.WorkingScheduleDetailId).HasColumnName("WorkingScheduleDetailID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.LastUpdateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LastUpdateUserID");
            entity.Property(e => e.PersonId).HasColumnName("PersonID");
            entity.Property(e => e.WorkingHourIdday1).HasColumnName("WorkingHourIDDay1");
            entity.Property(e => e.WorkingHourIdday10).HasColumnName("WorkingHourIDDay10");
            entity.Property(e => e.WorkingHourIdday11).HasColumnName("WorkingHourIDDay11");
            entity.Property(e => e.WorkingHourIdday12).HasColumnName("WorkingHourIDDay12");
            entity.Property(e => e.WorkingHourIdday13).HasColumnName("WorkingHourIDDay13");
            entity.Property(e => e.WorkingHourIdday14).HasColumnName("WorkingHourIDDay14");
            entity.Property(e => e.WorkingHourIdday15).HasColumnName("WorkingHourIDDay15");
            entity.Property(e => e.WorkingHourIdday16).HasColumnName("WorkingHourIDDay16");
            entity.Property(e => e.WorkingHourIdday17).HasColumnName("WorkingHourIDDay17");
            entity.Property(e => e.WorkingHourIdday18).HasColumnName("WorkingHourIDDay18");
            entity.Property(e => e.WorkingHourIdday19).HasColumnName("WorkingHourIDDay19");
            entity.Property(e => e.WorkingHourIdday2).HasColumnName("WorkingHourIDDay2");
            entity.Property(e => e.WorkingHourIdday20).HasColumnName("WorkingHourIDDay20");
            entity.Property(e => e.WorkingHourIdday21).HasColumnName("WorkingHourIDDay21");
            entity.Property(e => e.WorkingHourIdday22).HasColumnName("WorkingHourIDDay22");
            entity.Property(e => e.WorkingHourIdday23).HasColumnName("WorkingHourIDDay23");
            entity.Property(e => e.WorkingHourIdday24).HasColumnName("WorkingHourIDDay24");
            entity.Property(e => e.WorkingHourIdday25).HasColumnName("WorkingHourIDDay25");
            entity.Property(e => e.WorkingHourIdday26).HasColumnName("WorkingHourIDDay26");
            entity.Property(e => e.WorkingHourIdday27).HasColumnName("WorkingHourIDDay27");
            entity.Property(e => e.WorkingHourIdday28).HasColumnName("WorkingHourIDDay28");
            entity.Property(e => e.WorkingHourIdday29).HasColumnName("WorkingHourIDDay29");
            entity.Property(e => e.WorkingHourIdday3).HasColumnName("WorkingHourIDDay3");
            entity.Property(e => e.WorkingHourIdday30).HasColumnName("WorkingHourIDDay30");
            entity.Property(e => e.WorkingHourIdday31).HasColumnName("WorkingHourIDDay31");
            entity.Property(e => e.WorkingHourIdday4).HasColumnName("WorkingHourIDDay4");
            entity.Property(e => e.WorkingHourIdday5).HasColumnName("WorkingHourIDDay5");
            entity.Property(e => e.WorkingHourIdday6).HasColumnName("WorkingHourIDDay6");
            entity.Property(e => e.WorkingHourIdday7).HasColumnName("WorkingHourIDDay7");
            entity.Property(e => e.WorkingHourIdday8).HasColumnName("WorkingHourIDDay8");
            entity.Property(e => e.WorkingHourIdday9).HasColumnName("WorkingHourIDDay9");
            entity.Property(e => e.WorkingScheduleId).HasColumnName("WorkingScheduleID");
        });

        modelBuilder.Entity<XemapKey>(entity =>
        {
            entity.HasKey(e => new { e.WaitType, e.Sqlversion });

            entity.ToTable("XEMapKeys");

            entity.Property(e => e.WaitType)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.Sqlversion).HasColumnName("SQLVersion");
        });

        modelBuilder.Entity<ZatActive>(entity =>
        {
            entity.HasKey(e => e.ZatActiveId).HasName("PK__ZatActiv__13E321AA72E869E0");

            entity.ToTable("ZatActive");

            entity.Property(e => e.ZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZatActiveID");
            entity.Property(e => e.DddOral).HasColumnType("numeric(4, 2)");
            entity.Property(e => e.DddParenteral).HasColumnType("numeric(4, 2)");
            entity.Property(e => e.InsertByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("InsertByUserID");
            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.SrzatActiveGroup)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SRZatActiveGroup");
            entity.Property(e => e.ZatActiveName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ZatActiveInteraction>(entity =>
        {
            entity.HasKey(e => new { e.ZatActiveId, e.InteractionZatActiveId });

            entity.ToTable("ZatActiveInteraction");

            entity.Property(e => e.ZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ZatActiveID");
            entity.Property(e => e.InteractionZatActiveId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("InteractionZatActiveID");
            entity.Property(e => e.Interaction)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ZipCode>(entity =>
        {
            entity.HasKey(e => e.ZipCode1);

            entity.ToTable("ZipCode");

            entity.Property(e => e.ZipCode1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("ZipCode");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.County)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.LastUpdateByUserId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LastUpdateByUserID");
            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.Latitude)
                .HasDefaultValue(0.0m)
                .HasColumnType("numeric(18, 12)");
            entity.Property(e => e.Longitude)
                .HasDefaultValue(0.0m)
                .HasColumnType("numeric(18, 12)");
            entity.Property(e => e.Srprovince)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue(" ")
                .HasColumnName("SRProvince");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue(" ");
            entity.Property(e => e.ZipPostalCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
